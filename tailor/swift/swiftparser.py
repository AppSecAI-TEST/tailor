# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .swiftlistener import SwiftListener
else:
    from SwiftListener import SwiftListener
def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3g")
        buf.write("\u0760\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\3\2\3\2\7\2\u01a7\n\2\f\2\16")
        buf.write("\2\u01aa\13\2\3\2\3\2\3\3\3\3\5\3\u01b0\n\3\3\3\3\3\5")
        buf.write("\3\u01b4\n\3\3\3\3\3\5\3\u01b8\n\3\3\3\3\3\5\3\u01bc\n")
        buf.write("\3\3\3\3\3\3\3\5\3\u01c1\n\3\5\3\u01c3\n\3\3\4\6\4\u01c6")
        buf.write("\n\4\r\4\16\4\u01c7\3\5\3\5\3\5\3\5\5\5\u01ce\n\5\3\6")
        buf.write("\3\6\5\6\u01d2\n\6\3\6\3\6\5\6\u01d6\n\6\3\6\3\6\5\6\u01da")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u01e0\n\6\3\6\3\6\5\6\u01e4\n")
        buf.write("\6\3\6\3\6\5\6\u01e8\n\6\3\6\3\6\5\6\u01ec\n\6\3\7\3\7")
        buf.write("\5\7\u01f0\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t")
        buf.write("\3\n\3\n\5\n\u01fe\n\n\3\13\3\13\3\13\3\13\3\13\3\f\3")
        buf.write("\f\5\f\u0207\n\f\3\r\3\r\3\r\3\r\5\r\u020d\n\r\3\16\3")
        buf.write("\16\5\16\u0211\n\16\3\17\3\17\3\17\3\17\5\17\u0217\n\17")
        buf.write("\3\20\3\20\3\20\3\20\5\20\u021d\n\20\3\20\3\20\3\21\3")
        buf.write("\21\5\21\u0223\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u0231\n\22\3\23\3\23\3")
        buf.write("\23\3\23\3\24\3\24\5\24\u0239\n\24\3\24\3\24\5\24\u023d")
        buf.write("\n\24\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0250\n\30\3")
        buf.write("\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33\5\33\u025b")
        buf.write("\n\33\3\34\3\34\5\34\u025f\n\34\3\35\3\35\5\35\u0263\n")
        buf.write("\35\3\36\3\36\3\37\3\37\5\37\u0269\n\37\3 \3 \3 \5 \u026e")
        buf.write("\n \3 \3 \3!\3!\3!\3!\3!\5!\u0277\n!\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\5\"\u0282\n\"\3#\3#\3#\3$\3$\3$\3$")
        buf.write("\3$\5$\u028c\n$\3%\3%\5%\u0290\n%\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\5&\u029a\n&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)")
        buf.write("\7)\u02a7\n)\f)\16)\u02aa\13)\3*\3*\3+\3+\5+\u02b0\n+")
        buf.write("\3+\3+\5+\u02b4\n+\3+\3+\5+\u02b8\n+\3+\3+\5+\u02bc\n")
        buf.write("+\3+\3+\5+\u02c0\n+\3+\3+\5+\u02c4\n+\3+\3+\5+\u02c8\n")
        buf.write("+\3+\3+\5+\u02cc\n+\3+\3+\5+\u02d0\n+\3+\3+\5+\u02d4\n")
        buf.write("+\3+\3+\5+\u02d8\n+\3+\3+\5+\u02dc\n+\3+\3+\5+\u02e0\n")
        buf.write("+\3+\3+\5+\u02e4\n+\5+\u02e6\n+\3,\3,\5,\u02ea\n,\3-\3")
        buf.write("-\5-\u02ee\n-\3.\3.\3/\3/\5/\u02f4\n/\3/\3/\3\60\5\60")
        buf.write("\u02f9\n\60\3\60\3\60\5\60\u02fd\n\60\3\60\3\60\3\61\3")
        buf.write("\61\3\62\3\62\3\62\3\62\3\62\5\62\u0308\n\62\3\63\3\63")
        buf.write("\5\63\u030c\n\63\3\64\5\64\u030f\n\64\3\64\5\64\u0312")
        buf.write("\n\64\3\64\3\64\3\64\3\65\3\65\3\65\7\65\u031a\n\65\f")
        buf.write("\65\16\65\u031d\13\65\3\66\3\66\5\66\u0321\n\66\3\67\3")
        buf.write("\67\3\67\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38")
        buf.write("\38\38\38\38\38\38\38\58\u033c\n8\38\38\58\u0340\n8\3")
        buf.write("9\59\u0343\n9\39\59\u0346\n9\39\39\3:\3:\3;\3;\3;\5;\u034f")
        buf.write("\n;\3;\3;\3;\3;\3;\3;\3;\5;\u0358\n;\3<\5<\u035b\n<\3")
        buf.write("<\3<\3<\3=\5=\u0361\n=\3=\3=\5=\u0365\n=\3=\3=\3>\3>\3")
        buf.write("?\3?\3?\5?\u036e\n?\3?\3?\3?\3?\3?\3?\3?\5?\u0377\n?\3")
        buf.write("@\5@\u037a\n@\3@\3@\3A\5A\u037f\nA\3A\3A\3B\3B\3B\5B\u0386")
        buf.write("\nB\3B\3B\3B\3B\3B\3B\3B\5B\u038f\nB\3C\5C\u0392\nC\3")
        buf.write("C\3C\5C\u0396\nC\3C\3C\3D\5D\u039b\nD\3D\3D\5D\u039f\n")
        buf.write("D\3D\3D\3E\3E\3E\3F\3F\3F\3G\3G\3H\3H\3H\3I\3I\3I\5I\u03b1")
        buf.write("\nI\3I\3I\3I\3J\5J\u03b7\nJ\3J\5J\u03ba\nJ\3J\3J\3K\3")
        buf.write("K\5K\u03c0\nK\3L\3L\5L\u03c4\nL\3M\3M\5M\u03c8\nM\3M\3")
        buf.write("M\3N\3N\3O\3O\5O\u03d0\nO\3P\3P\3P\3P\3P\5P\u03d7\nP\3")
        buf.write("P\3P\5P\u03db\nP\3Q\3Q\3Q\3Q\3Q\5Q\u03e2\nQ\3R\5R\u03e5")
        buf.write("\nR\3R\5R\u03e8\nR\3R\5R\u03eb\nR\3R\3R\5R\u03ef\nR\3")
        buf.write("R\3R\5R\u03f3\nR\3R\5R\u03f6\nR\3R\3R\5R\u03fa\nR\3R\3")
        buf.write("R\5R\u03fe\nR\3R\3R\5R\u0402\nR\3R\5R\u0405\nR\3R\5R\u0408")
        buf.write("\nR\3S\3S\5S\u040c\nS\3T\3T\5T\u0410\nT\3U\3U\3U\3V\5")
        buf.write("V\u0416\nV\3V\3V\3V\3W\3W\5W\u041d\nW\3X\3X\5X\u0421\n")
        buf.write("X\3X\3X\5X\u0425\nX\3X\3X\3Y\3Y\5Y\u042b\nY\3Z\3Z\3Z\5")
        buf.write("Z\u0430\nZ\5Z\u0432\nZ\3[\5[\u0435\n[\3[\3[\3[\3\\\3\\")
        buf.write("\3\\\3\\\3\\\5\\\u043f\n\\\3]\3]\5]\u0443\n]\3^\3^\3_")
        buf.write("\3_\3`\3`\5`\u044b\n`\3`\3`\3`\3`\5`\u0451\n`\3`\3`\3")
        buf.write("a\3a\5a\u0457\na\3b\3b\5b\u045b\nb\3c\5c\u045e\nc\3c\3")
        buf.write("c\3c\3d\3d\3d\3d\3d\5d\u0468\nd\3e\3e\5e\u046c\ne\3f\3")
        buf.write("f\3f\3g\5g\u0472\ng\3g\3g\3g\5g\u0477\ng\3g\5g\u047a\n")
        buf.write("g\3g\3g\3h\3h\3i\3i\5i\u0482\ni\3i\3i\3j\5j\u0487\nj\3")
        buf.write("j\3j\3j\5j\u048c\nj\3j\5j\u048f\nj\3j\3j\3k\3k\3l\3l\5")
        buf.write("l\u0497\nl\3l\3l\3m\5m\u049c\nm\3m\3m\3m\5m\u04a1\nm\3")
        buf.write("m\3m\3n\3n\3o\3o\5o\u04a9\no\3o\3o\3p\3p\5p\u04af\np\3")
        buf.write("p\3p\5p\u04b3\np\3p\3p\5p\u04b7\np\3p\3p\5p\u04bb\np\3")
        buf.write("p\3p\5p\u04bf\np\5p\u04c1\np\3q\3q\5q\u04c5\nq\3r\3r\3")
        buf.write("r\3r\3r\3s\3s\3s\5s\u04cf\ns\3s\3s\3t\3t\5t\u04d5\nt\3")
        buf.write("t\3t\3u\3u\3u\3u\3v\3v\5v\u04df\nv\3v\5v\u04e2\nv\3w\3")
        buf.write("w\5w\u04e6\nw\3w\3w\3w\3x\5x\u04ec\nx\3x\5x\u04ef\nx\3")
        buf.write("x\3x\3y\3y\3z\5z\u04f6\nz\3z\3z\3z\3{\3{\3{\5{\u04fe\n")
        buf.write("{\3{\3{\3|\3|\5|\u0504\n|\3|\3|\3}\3}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\5}\u0514\n}\3~\5~\u0517\n~\3~\3~\3~\3\177")
        buf.write("\3\177\5\177\u051e\n\177\3\177\3\177\3\u0080\3\u0080\3")
        buf.write("\u0080\5\u0080\u0525\n\u0080\3\u0081\3\u0081\3\u0081\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0084\5\u0084\u053b\n\u0084\3\u0084")
        buf.write("\5\u0084\u053e\n\u0084\3\u0085\3\u0085\3\u0085\3\u0086")
        buf.write("\3\u0086\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089")
        buf.write("\3\u0089\3\u0089\5\u0089\u054d\n\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0555\n\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u055b\n\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\7\u0089\u0560\n\u0089\f\u0089")
        buf.write("\16\u0089\u0563\13\u0089\3\u008a\3\u008a\3\u008b\3\u008b")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u056d\n\u008c")
        buf.write("\3\u008d\3\u008d\5\u008d\u0571\n\u008d\3\u008d\3\u008d")
        buf.write("\3\u008e\3\u008e\3\u008e\7\u008e\u0578\n\u008e\f\u008e")
        buf.write("\16\u008e\u057b\13\u008e\3\u008f\3\u008f\3\u0090\5\u0090")
        buf.write("\u0580\n\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0585\n")
        buf.write("\u0090\3\u0091\3\u0091\5\u0091\u0589\n\u0091\3\u0092\3")
        buf.write("\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094")
        buf.write("\3\u0094\3\u0095\3\u0095\3\u0095\5\u0095\u0597\n\u0095")
        buf.write("\3\u0096\3\u0096\3\u0097\3\u0097\5\u0097\u059d\n\u0097")
        buf.write("\3\u0097\3\u0097\3\u0098\6\u0098\u05a2\n\u0098\r\u0098")
        buf.write("\16\u0098\u05a3\3\u0099\6\u0099\u05a7\n\u0099\r\u0099")
        buf.write("\16\u0099\u05a8\3\u009a\3\u009a\5\u009a\u05ad\n\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\5\u009a\u05b2\n\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\5\u009a\u05b7\n\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u05bf\n\u009a")
        buf.write("\3\u009b\3\u009b\3\u009b\7\u009b\u05c4\n\u009b\f\u009b")
        buf.write("\16\u009b\u05c7\13\u009b\3\u009c\3\u009c\7\u009c\u05cb")
        buf.write("\n\u009c\f\u009c\16\u009c\u05ce\13\u009c\3\u009d\5\u009d")
        buf.write("\u05d1\n\u009d\3\u009d\3\u009d\5\u009d\u05d5\n\u009d\3")
        buf.write("\u009d\5\u009d\u05d8\n\u009d\3\u009e\3\u009e\3\u009e\3")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\5\u009f\u05e7\n\u009f\3\u00a0")
        buf.write("\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u05f6")
        buf.write("\n\u00a2\3\u00a3\3\u00a3\5\u00a3\u05fa\n\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0602")
        buf.write("\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\5\u00a4\u060b\n\u00a4\3\u00a5\3\u00a5\5\u00a5")
        buf.write("\u060f\n\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\7\u00a6\u0616\n\u00a6\f\u00a6\16\u00a6\u0619\13\u00a6")
        buf.write("\3\u00a6\5\u00a6\u061c\n\u00a6\3\u00a7\3\u00a7\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8")
        buf.write("\u0627\n\u00a8\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u062c\n")
        buf.write("\u00a9\f\u00a9\16\u00a9\u062f\13\u00a9\3\u00a9\5\u00a9")
        buf.write("\u0632\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0644\n\u00ab")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0649\n\u00ac\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0")
        buf.write("\5\u00b0\u065a\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1")
        buf.write("\3\u00b1\5\u00b1\u0661\n\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\5\u00b1\u0667\n\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\5\u00b1\u066e\n\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0675\n\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u067c\n\u00b1")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\5\u00b5\u068a")
        buf.write("\n\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\7\u00b6")
        buf.write("\u0691\n\u00b6\f\u00b6\16\u00b6\u0694\13\u00b6\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u069b\n\u00b7")
        buf.write("\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u06a8\n\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u06b5\n\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\7\u00b9\u06c6\n\u00b9\f\u00b9\16\u00b9\u06c9")
        buf.write("\13\u00b9\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bc\3\u00bc")
        buf.write("\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be")
        buf.write("\u06d7\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u06e9\n\u00be")
        buf.write("\f\u00be\16\u00be\u06ec\13\u00be\3\u00bf\3\u00bf\5\u00bf")
        buf.write("\u06f0\n\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\5\u00c0")
        buf.write("\u06f6\n\u00c0\3\u00c0\3\u00c0\5\u00c0\u06fa\n\u00c0\3")
        buf.write("\u00c0\3\u00c0\3\u00c0\5\u00c0\u06ff\n\u00c0\3\u00c1\3")
        buf.write("\u00c1\3\u00c2\3\u00c2\5\u00c2\u0705\n\u00c2\3\u00c2\3")
        buf.write("\u00c2\3\u00c3\3\u00c3\5\u00c3\u070b\n\u00c3\3\u00c4\3")
        buf.write("\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0712\n\u00c4\3")
        buf.write("\u00c5\5\u00c5\u0715\n\u00c5\3\u00c5\5\u00c5\u0718\n\u00c5")
        buf.write("\3\u00c5\3\u00c5\5\u00c5\u071c\n\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\5\u00c5\u0721\n\u00c5\3\u00c6\3\u00c6\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\5\u00c7\u0728\n\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0731")
        buf.write("\n\u00c8\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u073d\n\u00ca")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\7\u00cc")
        buf.write("\u0745\n\u00cc\f\u00cc\16\u00cc\u0748\13\u00cc\3\u00cd")
        buf.write("\3\u00cd\5\u00cd\u074c\n\u00cd\3\u00ce\3\u00ce\3\u00cf")
        buf.write("\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0")
        buf.write("\u0757\n\u00d0\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u075c\n")
        buf.write("\u00d1\3\u00d2\3\u00d2\3\u00d2\2\5\u0110\u0170\u017a\u00d3")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write("\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190")
        buf.write("\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2")
        buf.write("\2\t\3\2\33#\4\2\33\33%*\3\2BD\3\2 #\17\2\4\4\7\f\17\17")
        buf.write("\22\27\33\33\37\37$*,,\67;EFPRTTVW\7\2\34\36 #.\61\64")
        buf.write("\64<D\3\2^a\u07c0\2\u01a8\3\2\2\2\4\u01c2\3\2\2\2\6\u01c5")
        buf.write("\3\2\2\2\b\u01cd\3\2\2\2\n\u01eb\3\2\2\2\f\u01ef\3\2\2")
        buf.write("\2\16\u01f1\3\2\2\2\20\u01f7\3\2\2\2\22\u01fd\3\2\2\2")
        buf.write("\24\u01ff\3\2\2\2\26\u0206\3\2\2\2\30\u0208\3\2\2\2\32")
        buf.write("\u0210\3\2\2\2\34\u0216\3\2\2\2\36\u0218\3\2\2\2 \u0220")
        buf.write("\3\2\2\2\"\u0230\3\2\2\2$\u0232\3\2\2\2&\u0236\3\2\2\2")
        buf.write("(\u0241\3\2\2\2*\u0244\3\2\2\2,\u0247\3\2\2\2.\u024f\3")
        buf.write("\2\2\2\60\u0251\3\2\2\2\62\u0254\3\2\2\2\64\u025a\3\2")
        buf.write("\2\2\66\u025c\3\2\2\28\u0260\3\2\2\2:\u0264\3\2\2\2<\u0266")
        buf.write("\3\2\2\2>\u026a\3\2\2\2@\u0276\3\2\2\2B\u0281\3\2\2\2")
        buf.write("D\u0283\3\2\2\2F\u028b\3\2\2\2H\u028f\3\2\2\2J\u0299\3")
        buf.write("\2\2\2L\u029b\3\2\2\2N\u029f\3\2\2\2P\u02a3\3\2\2\2R\u02ab")
        buf.write("\3\2\2\2T\u02e5\3\2\2\2V\u02e7\3\2\2\2X\u02eb\3\2\2\2")
        buf.write("Z\u02ef\3\2\2\2\\\u02f1\3\2\2\2^\u02f8\3\2\2\2`\u0300")
        buf.write("\3\2\2\2b\u0307\3\2\2\2d\u030b\3\2\2\2f\u030e\3\2\2\2")
        buf.write("h\u0316\3\2\2\2j\u031e\3\2\2\2l\u0322\3\2\2\2n\u033f\3")
        buf.write("\2\2\2p\u0342\3\2\2\2r\u0349\3\2\2\2t\u0357\3\2\2\2v\u035a")
        buf.write("\3\2\2\2x\u0360\3\2\2\2z\u0368\3\2\2\2|\u0376\3\2\2\2")
        buf.write("~\u0379\3\2\2\2\u0080\u037e\3\2\2\2\u0082\u038e\3\2\2")
        buf.write("\2\u0084\u0391\3\2\2\2\u0086\u039a\3\2\2\2\u0088\u03a2")
        buf.write("\3\2\2\2\u008a\u03a5\3\2\2\2\u008c\u03a8\3\2\2\2\u008e")
        buf.write("\u03aa\3\2\2\2\u0090\u03ad\3\2\2\2\u0092\u03b6\3\2\2\2")
        buf.write("\u0094\u03bf\3\2\2\2\u0096\u03c1\3\2\2\2\u0098\u03c5\3")
        buf.write("\2\2\2\u009a\u03cb\3\2\2\2\u009c\u03cd\3\2\2\2\u009e\u03da")
        buf.write("\3\2\2\2\u00a0\u03e1\3\2\2\2\u00a2\u0407\3\2\2\2\u00a4")
        buf.write("\u040b\3\2\2\2\u00a6\u040f\3\2\2\2\u00a8\u0411\3\2\2\2")
        buf.write("\u00aa\u0415\3\2\2\2\u00ac\u041c\3\2\2\2\u00ae\u041e\3")
        buf.write("\2\2\2\u00b0\u0428\3\2\2\2\u00b2\u0431\3\2\2\2\u00b4\u0434")
        buf.write("\3\2\2\2\u00b6\u043e\3\2\2\2\u00b8\u0440\3\2\2\2\u00ba")
        buf.write("\u0444\3\2\2\2\u00bc\u0446\3\2\2\2\u00be\u0448\3\2\2\2")
        buf.write("\u00c0\u0454\3\2\2\2\u00c2\u045a\3\2\2\2\u00c4\u045d\3")
        buf.write("\2\2\2\u00c6\u0467\3\2\2\2\u00c8\u0469\3\2\2\2\u00ca\u046d")
        buf.write("\3\2\2\2\u00cc\u0471\3\2\2\2\u00ce\u047d\3\2\2\2\u00d0")
        buf.write("\u047f\3\2\2\2\u00d2\u0486\3\2\2\2\u00d4\u0492\3\2\2\2")
        buf.write("\u00d6\u0494\3\2\2\2\u00d8\u049b\3\2\2\2\u00da\u04a4\3")
        buf.write("\2\2\2\u00dc\u04a6\3\2\2\2\u00de\u04c0\3\2\2\2\u00e0\u04c2")
        buf.write("\3\2\2\2\u00e2\u04c6\3\2\2\2\u00e4\u04cb\3\2\2\2\u00e6")
        buf.write("\u04d2\3\2\2\2\u00e8\u04d8\3\2\2\2\u00ea\u04dc\3\2\2\2")
        buf.write("\u00ec\u04e3\3\2\2\2\u00ee\u04eb\3\2\2\2\u00f0\u04f2\3")
        buf.write("\2\2\2\u00f2\u04f5\3\2\2\2\u00f4\u04fa\3\2\2\2\u00f6\u0501")
        buf.write("\3\2\2\2\u00f8\u0513\3\2\2\2\u00fa\u0516\3\2\2\2\u00fc")
        buf.write("\u051b\3\2\2\2\u00fe\u0524\3\2\2\2\u0100\u0526\3\2\2\2")
        buf.write("\u0102\u052c\3\2\2\2\u0104\u0532\3\2\2\2\u0106\u053a\3")
        buf.write("\2\2\2\u0108\u053f\3\2\2\2\u010a\u0542\3\2\2\2\u010c\u0544")
        buf.write("\3\2\2\2\u010e\u0547\3\2\2\2\u0110\u055a\3\2\2\2\u0112")
        buf.write("\u0564\3\2\2\2\u0114\u0566\3\2\2\2\u0116\u056c\3\2\2\2")
        buf.write("\u0118\u056e\3\2\2\2\u011a\u0574\3\2\2\2\u011c\u057c\3")
        buf.write("\2\2\2\u011e\u057f\3\2\2\2\u0120\u0588\3\2\2\2\u0122\u058a")
        buf.write("\3\2\2\2\u0124\u058d\3\2\2\2\u0126\u0591\3\2\2\2\u0128")
        buf.write("\u0593\3\2\2\2\u012a\u0598\3\2\2\2\u012c\u059a\3\2\2\2")
        buf.write("\u012e\u05a1\3\2\2\2\u0130\u05a6\3\2\2\2\u0132\u05be\3")
        buf.write("\2\2\2\u0134\u05c0\3\2\2\2\u0136\u05c8\3\2\2\2\u0138\u05d7")
        buf.write("\3\2\2\2\u013a\u05d9\3\2\2\2\u013c\u05e6\3\2\2\2\u013e")
        buf.write("\u05e8\3\2\2\2\u0140\u05ea\3\2\2\2\u0142\u05f5\3\2\2\2")
        buf.write("\u0144\u0601\3\2\2\2\u0146\u060a\3\2\2\2\u0148\u060c\3")
        buf.write("\2\2\2\u014a\u0612\3\2\2\2\u014c\u061d\3\2\2\2\u014e\u0626")
        buf.write("\3\2\2\2\u0150\u0628\3\2\2\2\u0152\u0633\3\2\2\2\u0154")
        buf.write("\u0643\3\2\2\2\u0156\u0648\3\2\2\2\u0158\u064a\3\2\2\2")
        buf.write("\u015a\u064e\3\2\2\2\u015c\u0653\3\2\2\2\u015e\u0657\3")
        buf.write("\2\2\2\u0160\u067b\3\2\2\2\u0162\u067d\3\2\2\2\u0164\u0682")
        buf.write("\3\2\2\2\u0166\u0684\3\2\2\2\u0168\u0687\3\2\2\2\u016a")
        buf.write("\u068d\3\2\2\2\u016c\u069a\3\2\2\2\u016e\u069c\3\2\2\2")
        buf.write("\u0170\u069e\3\2\2\2\u0172\u06ca\3\2\2\2\u0174\u06cc\3")
        buf.write("\2\2\2\u0176\u06ce\3\2\2\2\u0178\u06d0\3\2\2\2\u017a\u06d6")
        buf.write("\3\2\2\2\u017c\u06ed\3\2\2\2\u017e\u06fe\3\2\2\2\u0180")
        buf.write("\u0700\3\2\2\2\u0182\u0702\3\2\2\2\u0184\u0708\3\2\2\2")
        buf.write("\u0186\u0711\3\2\2\2\u0188\u0720\3\2\2\2\u018a\u0722\3")
        buf.write("\2\2\2\u018c\u0724\3\2\2\2\u018e\u0730\3\2\2\2\u0190\u0732")
        buf.write("\3\2\2\2\u0192\u073c\3\2\2\2\u0194\u073e\3\2\2\2\u0196")
        buf.write("\u0741\3\2\2\2\u0198\u074b\3\2\2\2\u019a\u074d\3\2\2\2")
        buf.write("\u019c\u074f\3\2\2\2\u019e\u0756\3\2\2\2\u01a0\u075b\3")
        buf.write("\2\2\2\u01a2\u075d\3\2\2\2\u01a4\u01a7\5\4\3\2\u01a5\u01a7")
        buf.write("\5\u0136\u009c\2\u01a6\u01a4\3\2\2\2\u01a6\u01a5\3\2\2")
        buf.write("\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9")
        buf.write("\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa\u01a8\3\2\2\2\u01ab")
        buf.write("\u01ac\7\2\2\3\u01ac\3\3\2\2\2\u01ad\u01af\5\u0136\u009c")
        buf.write("\2\u01ae\u01b0\7\3\2\2\u01af\u01ae\3\2\2\2\u01af\u01b0")
        buf.write("\3\2\2\2\u01b0\u01c3\3\2\2\2\u01b1\u01b3\5T+\2\u01b2\u01b4")
        buf.write("\7\3\2\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4")
        buf.write("\u01c3\3\2\2\2\u01b5\u01b7\5\b\5\2\u01b6\u01b8\7\3\2\2")
        buf.write("\u01b7\u01b6\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01c3\3")
        buf.write("\2\2\2\u01b9\u01bb\5\26\f\2\u01ba\u01bc\7\3\2\2\u01bb")
        buf.write("\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01c3\3\2\2\2")
        buf.write("\u01bd\u01c3\5.\30\2\u01be\u01c0\5\64\33\2\u01bf\u01c1")
        buf.write("\7\3\2\2\u01c0\u01bf\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1")
        buf.write("\u01c3\3\2\2\2\u01c2\u01ad\3\2\2\2\u01c2\u01b1\3\2\2\2")
        buf.write("\u01c2\u01b5\3\2\2\2\u01c2\u01b9\3\2\2\2\u01c2\u01bd\3")
        buf.write("\2\2\2\u01c2\u01be\3\2\2\2\u01c3\5\3\2\2\2\u01c4\u01c6")
        buf.write("\5\4\3\2\u01c5\u01c4\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7")
        buf.write("\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\7\3\2\2\2\u01c9")
        buf.write("\u01ce\5\n\6\2\u01ca\u01ce\5\16\b\2\u01cb\u01ce\5\20\t")
        buf.write("\2\u01cc\u01ce\5\24\13\2\u01cd\u01c9\3\2\2\2\u01cd\u01ca")
        buf.write("\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01cc\3\2\2\2\u01ce")
        buf.write("\t\3\2\2\2\u01cf\u01d1\7\4\2\2\u01d0\u01d2\5\f\7\2\u01d1")
        buf.write("\u01d0\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2")
        buf.write("\u01d3\u01d5\7\3\2\2\u01d4\u01d6\5\u0136\u009c\2\u01d5")
        buf.write("\u01d4\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\3\2\2\2")
        buf.write("\u01d7\u01d9\7\3\2\2\u01d8\u01da\5\u0136\u009c\2\u01d9")
        buf.write("\u01d8\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01db\3\2\2\2")
        buf.write("\u01db\u01ec\5\\/\2\u01dc\u01dd\7\4\2\2\u01dd\u01df\7")
        buf.write("\5\2\2\u01de\u01e0\5\f\7\2\u01df\u01de\3\2\2\2\u01df\u01e0")
        buf.write("\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e3\7\3\2\2\u01e2")
        buf.write("\u01e4\5\u0136\u009c\2\u01e3\u01e2\3\2\2\2\u01e3\u01e4")
        buf.write("\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e7\7\3\2\2\u01e6")
        buf.write("\u01e8\5\u0136\u009c\2\u01e7\u01e6\3\2\2\2\u01e7\u01e8")
        buf.write("\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01ea\7\6\2\2\u01ea")
        buf.write("\u01ec\5\\/\2\u01eb\u01cf\3\2\2\2\u01eb\u01dc\3\2\2\2")
        buf.write("\u01ec\13\3\2\2\2\u01ed\u01f0\5n8\2\u01ee\u01f0\5\u0134")
        buf.write("\u009b\2\u01ef\u01ed\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0")
        buf.write("\r\3\2\2\2\u01f1\u01f2\7\4\2\2\u01f2\u01f3\5\u0110\u0089")
        buf.write("\2\u01f3\u01f4\7\7\2\2\u01f4\u01f5\5\u0136\u009c\2\u01f5")
        buf.write("\u01f6\5\\/\2\u01f6\17\3\2\2\2\u01f7\u01f8\7\b\2\2\u01f8")
        buf.write("\u01f9\5\22\n\2\u01f9\u01fa\5\\/\2\u01fa\21\3\2\2\2\u01fb")
        buf.write("\u01fe\5\u0136\u009c\2\u01fc\u01fe\5T+\2\u01fd\u01fb\3")
        buf.write("\2\2\2\u01fd\u01fc\3\2\2\2\u01fe\23\3\2\2\2\u01ff\u0200")
        buf.write("\7\t\2\2\u0200\u0201\5\\/\2\u0201\u0202\7\b\2\2\u0202")
        buf.write("\u0203\5\22\n\2\u0203\25\3\2\2\2\u0204\u0207\5\30\r\2")
        buf.write("\u0205\u0207\5\36\20\2\u0206\u0204\3\2\2\2\u0206\u0205")
        buf.write("\3\2\2\2\u0207\27\3\2\2\2\u0208\u0209\7\n\2\2\u0209\u020a")
        buf.write("\5\32\16\2\u020a\u020c\5\\/\2\u020b\u020d\5\34\17\2\u020c")
        buf.write("\u020b\3\2\2\2\u020c\u020d\3\2\2\2\u020d\31\3\2\2\2\u020e")
        buf.write("\u0211\5\u0136\u009c\2\u020f\u0211\5T+\2\u0210\u020e\3")
        buf.write("\2\2\2\u0210\u020f\3\2\2\2\u0211\33\3\2\2\2\u0212\u0213")
        buf.write("\7\13\2\2\u0213\u0217\5\\/\2\u0214\u0215\7\13\2\2\u0215")
        buf.write("\u0217\5\30\r\2\u0216\u0212\3\2\2\2\u0216\u0214\3\2\2")
        buf.write("\2\u0217\35\3\2\2\2\u0218\u0219\7\f\2\2\u0219\u021a\5")
        buf.write("\u0136\u009c\2\u021a\u021c\7\r\2\2\u021b\u021d\5 \21\2")
        buf.write("\u021c\u021b\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021e\3")
        buf.write("\2\2\2\u021e\u021f\7\16\2\2\u021f\37\3\2\2\2\u0220\u0222")
        buf.write("\5\"\22\2\u0221\u0223\5 \21\2\u0222\u0221\3\2\2\2\u0222")
        buf.write("\u0223\3\2\2\2\u0223!\3\2\2\2\u0224\u0225\5$\23\2\u0225")
        buf.write("\u0226\5\6\4\2\u0226\u0231\3\2\2\2\u0227\u0228\5(\25\2")
        buf.write("\u0228\u0229\5\6\4\2\u0229\u0231\3\2\2\2\u022a\u022b\5")
        buf.write("$\23\2\u022b\u022c\7\3\2\2\u022c\u0231\3\2\2\2\u022d\u022e")
        buf.write("\5(\25\2\u022e\u022f\7\3\2\2\u022f\u0231\3\2\2\2\u0230")
        buf.write("\u0224\3\2\2\2\u0230\u0227\3\2\2\2\u0230\u022a\3\2\2\2")
        buf.write("\u0230\u022d\3\2\2\2\u0231#\3\2\2\2\u0232\u0233\7\17\2")
        buf.write("\2\u0233\u0234\5&\24\2\u0234\u0235\7\20\2\2\u0235%\3\2")
        buf.write("\2\2\u0236\u0238\5\u0110\u0089\2\u0237\u0239\5*\26\2\u0238")
        buf.write("\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023a\3\2\2\2")
        buf.write("\u023a\u023c\5\u0110\u0089\2\u023b\u023d\5*\26\2\u023c")
        buf.write("\u023b\3\2\2\2\u023c\u023d\3\2\2\2\u023d\u023e\3\2\2\2")
        buf.write("\u023e\u023f\7\21\2\2\u023f\u0240\5&\24\2\u0240\'\3\2")
        buf.write("\2\2\u0241\u0242\7\22\2\2\u0242\u0243\7\20\2\2\u0243)")
        buf.write("\3\2\2\2\u0244\u0245\7\23\2\2\u0245\u0246\5,\27\2\u0246")
        buf.write("+\3\2\2\2\u0247\u0248\5\u0136\u009c\2\u0248-\3\2\2\2\u0249")
        buf.write("\u024a\5\60\31\2\u024a\u024b\5\b\5\2\u024b\u0250\3\2\2")
        buf.write("\2\u024c\u024d\5\60\31\2\u024d\u024e\5\36\20\2\u024e\u0250")
        buf.write("\3\2\2\2\u024f\u0249\3\2\2\2\u024f\u024c\3\2\2\2\u0250")
        buf.write("/\3\2\2\2\u0251\u0252\5\62\32\2\u0252\u0253\7\20\2\2\u0253")
        buf.write("\61\3\2\2\2\u0254\u0255\5\u0198\u00cd\2\u0255\63\3\2\2")
        buf.write("\2\u0256\u025b\5\66\34\2\u0257\u025b\58\35\2\u0258\u025b")
        buf.write("\5:\36\2\u0259\u025b\5<\37\2\u025a\u0256\3\2\2\2\u025a")
        buf.write("\u0257\3\2\2\2\u025a\u0258\3\2\2\2\u025a\u0259\3\2\2\2")
        buf.write("\u025b\65\3\2\2\2\u025c\u025e\7\24\2\2\u025d\u025f\5\62")
        buf.write("\32\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f\67")
        buf.write("\3\2\2\2\u0260\u0262\7\25\2\2\u0261\u0263\5\62\32\2\u0262")
        buf.write("\u0261\3\2\2\2\u0262\u0263\3\2\2\2\u02639\3\2\2\2\u0264")
        buf.write("\u0265\7\26\2\2\u0265;\3\2\2\2\u0266\u0268\7\27\2\2\u0267")
        buf.write("\u0269\5\u0136\u009c\2\u0268\u0267\3\2\2\2\u0268\u0269")
        buf.write("\3\2\2\2\u0269=\3\2\2\2\u026a\u026b\7\30\2\2\u026b\u026d")
        buf.write("\5@!\2\u026c\u026e\5D#\2\u026d\u026c\3\2\2\2\u026d\u026e")
        buf.write("\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\7\31\2\2\u0270")
        buf.write("?\3\2\2\2\u0271\u0277\5B\"\2\u0272\u0273\5B\"\2\u0273")
        buf.write("\u0274\7\21\2\2\u0274\u0275\5@!\2\u0275\u0277\3\2\2\2")
        buf.write("\u0276\u0271\3\2\2\2\u0276\u0272\3\2\2\2\u0277A\3\2\2")
        buf.write("\2\u0278\u0282\5\u0180\u00c1\2\u0279\u027a\5\u0180\u00c1")
        buf.write("\2\u027a\u027b\7\20\2\2\u027b\u027c\5\u017e\u00c0\2\u027c")
        buf.write("\u0282\3\2\2\2\u027d\u027e\5\u0180\u00c1\2\u027e\u027f")
        buf.write("\7\20\2\2\u027f\u0280\5\u018c\u00c7\2\u0280\u0282\3\2")
        buf.write("\2\2\u0281\u0278\3\2\2\2\u0281\u0279\3\2\2\2\u0281\u027d")
        buf.write("\3\2\2\2\u0282C\3\2\2\2\u0283\u0284\7\23\2\2\u0284\u0285")
        buf.write("\5F$\2\u0285E\3\2\2\2\u0286\u028c\5H%\2\u0287\u0288\5")
        buf.write("H%\2\u0288\u0289\7\21\2\2\u0289\u028a\5F$\2\u028a\u028c")
        buf.write("\3\2\2\2\u028b\u0286\3\2\2\2\u028b\u0287\3\2\2\2\u028c")
        buf.write("G\3\2\2\2\u028d\u0290\5J&\2\u028e\u0290\5L\'\2\u028f\u028d")
        buf.write("\3\2\2\2\u028f\u028e\3\2\2\2\u0290I\3\2\2\2\u0291\u0292")
        buf.write("\5\u017e\u00c0\2\u0292\u0293\7\20\2\2\u0293\u0294\5\u017e")
        buf.write("\u00c0\2\u0294\u029a\3\2\2\2\u0295\u0296\5\u017e\u00c0")
        buf.write("\2\u0296\u0297\7\20\2\2\u0297\u0298\5\u018c\u00c7\2\u0298")
        buf.write("\u029a\3\2\2\2\u0299\u0291\3\2\2\2\u0299\u0295\3\2\2\2")
        buf.write("\u029aK\3\2\2\2\u029b\u029c\5\u017e\u00c0\2\u029c\u029d")
        buf.write("\7\32\2\2\u029d\u029e\5\u017e\u00c0\2\u029eM\3\2\2\2\u029f")
        buf.write("\u02a0\7\30\2\2\u02a0\u02a1\5P)\2\u02a1\u02a2\7\31\2\2")
        buf.write("\u02a2O\3\2\2\2\u02a3\u02a8\5R*\2\u02a4\u02a5\7\21\2\2")
        buf.write("\u02a5\u02a7\5R*\2\u02a6\u02a4\3\2\2\2\u02a7\u02aa\3\2")
        buf.write("\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9Q\3")
        buf.write("\2\2\2\u02aa\u02a8\3\2\2\2\u02ab\u02ac\5\u017a\u00be\2")
        buf.write("\u02acS\3\2\2\2\u02ad\u02af\5^\60\2\u02ae\u02b0\7\3\2")
        buf.write("\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02e6")
        buf.write("\3\2\2\2\u02b1\u02b3\5f\64\2\u02b2\u02b4\7\3\2\2\u02b3")
        buf.write("\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02e6\3\2\2\2")
        buf.write("\u02b5\u02b7\5n8\2\u02b6\u02b8\7\3\2\2\u02b7\u02b6\3\2")
        buf.write("\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02e6\3\2\2\2\u02b9\u02bb")
        buf.write("\5\u0088E\2\u02ba\u02bc\7\3\2\2\u02bb\u02ba\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02e6\3\2\2\2\u02bd\u02bf\5\u0090")
        buf.write("I\2\u02be\u02c0\7\3\2\2\u02bf\u02be\3\2\2\2\u02bf\u02c0")
        buf.write("\3\2\2\2\u02c0\u02e6\3\2\2\2\u02c1\u02c3\5\u00aaV\2\u02c2")
        buf.write("\u02c4\7\3\2\2\u02c3\u02c2\3\2\2\2\u02c3\u02c4\3\2\2\2")
        buf.write("\u02c4\u02e6\3\2\2\2\u02c5\u02c7\5\u00ccg\2\u02c6\u02c8")
        buf.write("\7\3\2\2\u02c7\u02c6\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8")
        buf.write("\u02e6\3\2\2\2\u02c9\u02cb\5\u00d2j\2\u02ca\u02cc\7\3")
        buf.write("\2\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02e6")
        buf.write("\3\2\2\2\u02cd\u02cf\5\u00d8m\2\u02ce\u02d0\7\3\2\2\u02cf")
        buf.write("\u02ce\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02e6\3\2\2\2")
        buf.write("\u02d1\u02d3\5\u00ecw\2\u02d2\u02d4\7\3\2\2\u02d3\u02d2")
        buf.write("\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02e6\3\2\2\2\u02d5")
        buf.write("\u02d7\5\u00f2z\2\u02d6\u02d8\7\3\2\2\u02d7\u02d6\3\2")
        buf.write("\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02e6\3\2\2\2\u02d9\u02db")
        buf.write("\5\u00f4{\2\u02da\u02dc\7\3\2\2\u02db\u02da\3\2\2\2\u02db")
        buf.write("\u02dc\3\2\2\2\u02dc\u02e6\3\2\2\2\u02dd\u02df\5\u00f8")
        buf.write("}\2\u02de\u02e0\7\3\2\2\u02df\u02de\3\2\2\2\u02df\u02e0")
        buf.write("\3\2\2\2\u02e0\u02e6\3\2\2\2\u02e1\u02e3\5\u00fe\u0080")
        buf.write("\2\u02e2\u02e4\7\3\2\2\u02e3\u02e2\3\2\2\2\u02e3\u02e4")
        buf.write("\3\2\2\2\u02e4\u02e6\3\2\2\2\u02e5\u02ad\3\2\2\2\u02e5")
        buf.write("\u02b1\3\2\2\2\u02e5\u02b5\3\2\2\2\u02e5\u02b9\3\2\2\2")
        buf.write("\u02e5\u02bd\3\2\2\2\u02e5\u02c1\3\2\2\2\u02e5\u02c5\3")
        buf.write("\2\2\2\u02e5\u02c9\3\2\2\2\u02e5\u02cd\3\2\2\2\u02e5\u02d1")
        buf.write("\3\2\2\2\u02e5\u02d5\3\2\2\2\u02e5\u02d9\3\2\2\2\u02e5")
        buf.write("\u02dd\3\2\2\2\u02e5\u02e1\3\2\2\2\u02e6U\3\2\2\2\u02e7")
        buf.write("\u02e9\5T+\2\u02e8\u02ea\5V,\2\u02e9\u02e8\3\2\2\2\u02e9")
        buf.write("\u02ea\3\2\2\2\u02eaW\3\2\2\2\u02eb\u02ed\5Z.\2\u02ec")
        buf.write("\u02ee\5X-\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee")
        buf.write("Y\3\2\2\2\u02ef\u02f0\t\2\2\2\u02f0[\3\2\2\2\u02f1\u02f3")
        buf.write("\7\r\2\2\u02f2\u02f4\5\6\4\2\u02f3\u02f2\3\2\2\2\u02f3")
        buf.write("\u02f4\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\7\16\2")
        buf.write("\2\u02f6]\3\2\2\2\u02f7\u02f9\5\u012e\u0098\2\u02f8\u02f7")
        buf.write("\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa")
        buf.write("\u02fc\7$\2\2\u02fb\u02fd\5`\61\2\u02fc\u02fb\3\2\2\2")
        buf.write("\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff\5")
        buf.write("b\62\2\u02ff_\3\2\2\2\u0300\u0301\t\3\2\2\u0301a\3\2\2")
        buf.write("\2\u0302\u0308\5d\63\2\u0303\u0304\5d\63\2\u0304\u0305")
        buf.write("\7+\2\2\u0305\u0306\5b\62\2\u0306\u0308\3\2\2\2\u0307")
        buf.write("\u0302\3\2\2\2\u0307\u0303\3\2\2\2\u0308c\3\2\2\2\u0309")
        buf.write("\u030c\5\u0198\u00cd\2\u030a\u030c\5\u0172\u00ba\2\u030b")
        buf.write("\u0309\3\2\2\2\u030b\u030a\3\2\2\2\u030ce\3\2\2\2\u030d")
        buf.write("\u030f\5\u012e\u0098\2\u030e\u030d\3\2\2\2\u030e\u030f")
        buf.write("\3\2\2\2\u030f\u0311\3\2\2\2\u0310\u0312\5X-\2\u0311\u0310")
        buf.write("\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0313\3\2\2\2\u0313")
        buf.write("\u0314\7,\2\2\u0314\u0315\5h\65\2\u0315g\3\2\2\2\u0316")
        buf.write("\u031b\5j\66\2\u0317\u0318\7\21\2\2\u0318\u031a\5j\66")
        buf.write("\2\u0319\u0317\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319")
        buf.write("\3\2\2\2\u031b\u031c\3\2\2\2\u031ci\3\2\2\2\u031d\u031b")
        buf.write("\3\2\2\2\u031e\u0320\5\u0110\u0089\2\u031f\u0321\5l\67")
        buf.write("\2\u0320\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321k\3\2")
        buf.write("\2\2\u0322\u0323\7-\2\2\u0323\u0324\5\u0136\u009c\2\u0324")
        buf.write("m\3\2\2\2\u0325\u0326\5p9\2\u0326\u0327\5h\65\2\u0327")
        buf.write("\u0340\3\2\2\2\u0328\u0329\5p9\2\u0329\u032a\5r:\2\u032a")
        buf.write("\u032b\5\u017c\u00bf\2\u032b\u032c\5\\/\2\u032c\u0340")
        buf.write("\3\2\2\2\u032d\u032e\5p9\2\u032e\u032f\5r:\2\u032f\u0330")
        buf.write("\5\u017c\u00bf\2\u0330\u0331\5t;\2\u0331\u0340\3\2\2\2")
        buf.write("\u0332\u0333\5p9\2\u0333\u0334\5r:\2\u0334\u0335\5\u017c")
        buf.write("\u00bf\2\u0335\u0336\5|?\2\u0336\u0340\3\2\2\2\u0337\u0338")
        buf.write("\5p9\2\u0338\u0339\5r:\2\u0339\u033b\5\u017c\u00bf\2\u033a")
        buf.write("\u033c\5l\67\2\u033b\u033a\3\2\2\2\u033b\u033c\3\2\2\2")
        buf.write("\u033c\u033d\3\2\2\2\u033d\u033e\5\u0082B\2\u033e\u0340")
        buf.write("\3\2\2\2\u033f\u0325\3\2\2\2\u033f\u0328\3\2\2\2\u033f")
        buf.write("\u032d\3\2\2\2\u033f\u0332\3\2\2\2\u033f\u0337\3\2\2\2")
        buf.write("\u0340o\3\2\2\2\u0341\u0343\5\u012e\u0098\2\u0342\u0341")
        buf.write("\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345\3\2\2\2\u0344")
        buf.write("\u0346\5X-\2\u0345\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u0348\7)\2\2\u0348q\3\2\2\2\u0349")
        buf.write("\u034a\5\u0198\u00cd\2\u034as\3\2\2\2\u034b\u034c\7\r")
        buf.write("\2\2\u034c\u034e\5v<\2\u034d\u034f\5x=\2\u034e\u034d\3")
        buf.write("\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0351")
        buf.write("\7\16\2\2\u0351\u0358\3\2\2\2\u0352\u0353\7\r\2\2\u0353")
        buf.write("\u0354\5x=\2\u0354\u0355\5v<\2\u0355\u0356\7\16\2\2\u0356")
        buf.write("\u0358\3\2\2\2\u0357\u034b\3\2\2\2\u0357\u0352\3\2\2\2")
        buf.write("\u0358u\3\2\2\2\u0359\u035b\5\u012e\u0098\2\u035a\u0359")
        buf.write("\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3\2\2\2\u035c")
        buf.write("\u035d\7.\2\2\u035d\u035e\5\\/\2\u035ew\3\2\2\2\u035f")
        buf.write("\u0361\5\u012e\u0098\2\u0360\u035f\3\2\2\2\u0360\u0361")
        buf.write("\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0364\7/\2\2\u0363")
        buf.write("\u0365\5z>\2\u0364\u0363\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366\u0367\5\\/\2\u0367y\3\2\2\2\u0368")
        buf.write("\u0369\5\u0198\u00cd\2\u0369{\3\2\2\2\u036a\u036b\7\r")
        buf.write("\2\2\u036b\u036d\5~@\2\u036c\u036e\5\u0080A\2\u036d\u036c")
        buf.write("\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u0370\7\16\2\2\u0370\u0377\3\2\2\2\u0371\u0372\7\r\2")
        buf.write("\2\u0372\u0373\5\u0080A\2\u0373\u0374\5~@\2\u0374\u0375")
        buf.write("\7\16\2\2\u0375\u0377\3\2\2\2\u0376\u036a\3\2\2\2\u0376")
        buf.write("\u0371\3\2\2\2\u0377}\3\2\2\2\u0378\u037a\5\u012e\u0098")
        buf.write("\2\u0379\u0378\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037b")
        buf.write("\3\2\2\2\u037b\u037c\7.\2\2\u037c\177\3\2\2\2\u037d\u037f")
        buf.write("\5\u012e\u0098\2\u037e\u037d\3\2\2\2\u037e\u037f\3\2\2")
        buf.write("\2\u037f\u0380\3\2\2\2\u0380\u0381\7/\2\2\u0381\u0081")
        buf.write("\3\2\2\2\u0382\u0383\7\r\2\2\u0383\u0385\5\u0084C\2\u0384")
        buf.write("\u0386\5\u0086D\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2")
        buf.write("\2\2\u0386\u0387\3\2\2\2\u0387\u0388\7\16\2\2\u0388\u038f")
        buf.write("\3\2\2\2\u0389\u038a\7\r\2\2\u038a\u038b\5\u0086D\2\u038b")
        buf.write("\u038c\5\u0084C\2\u038c\u038d\7\16\2\2\u038d\u038f\3\2")
        buf.write("\2\2\u038e\u0382\3\2\2\2\u038e\u0389\3\2\2\2\u038f\u0083")
        buf.write("\3\2\2\2\u0390\u0392\5\u012e\u0098\2\u0391\u0390\3\2\2")
        buf.write("\2\u0391\u0392\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395")
        buf.write("\7\60\2\2\u0394\u0396\5z>\2\u0395\u0394\3\2\2\2\u0395")
        buf.write("\u0396\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398\5\\/\2")
        buf.write("\u0398\u0085\3\2\2\2\u0399\u039b\5\u012e\u0098\2\u039a")
        buf.write("\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2")
        buf.write("\u039c\u039e\7\61\2\2\u039d\u039f\5z>\2\u039e\u039d\3")
        buf.write("\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1")
        buf.write("\5\\/\2\u03a1\u0087\3\2\2\2\u03a2\u03a3\5\u008aF\2\u03a3")
        buf.write("\u03a4\5\u008eH\2\u03a4\u0089\3\2\2\2\u03a5\u03a6\7%\2")
        buf.write("\2\u03a6\u03a7\5\u008cG\2\u03a7\u008b\3\2\2\2\u03a8\u03a9")
        buf.write("\5\u0198\u00cd\2\u03a9\u008d\3\2\2\2\u03aa\u03ab\7-\2")
        buf.write("\2\u03ab\u03ac\5\u017a\u00be\2\u03ac\u008f\3\2\2\2\u03ad")
        buf.write("\u03ae\5\u0092J\2\u03ae\u03b0\5\u0094K\2\u03af\u03b1\5")
        buf.write("> \2\u03b0\u03af\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2")
        buf.write("\3\2\2\2\u03b2\u03b3\5\u0096L\2\u03b3\u03b4\5\u009aN\2")
        buf.write("\u03b4\u0091\3\2\2\2\u03b5\u03b7\5\u012e\u0098\2\u03b6")
        buf.write("\u03b5\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b9\3\2\2\2")
        buf.write("\u03b8\u03ba\5X-\2\u03b9\u03b8\3\2\2\2\u03b9\u03ba\3\2")
        buf.write("\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bc\7*\2\2\u03bc\u0093")
        buf.write("\3\2\2\2\u03bd\u03c0\5\u0198\u00cd\2\u03be\u03c0\5\u0172")
        buf.write("\u00ba\2\u03bf\u03bd\3\2\2\2\u03bf\u03be\3\2\2\2\u03c0")
        buf.write("\u0095\3\2\2\2\u03c1\u03c3\5\u009cO\2\u03c2\u03c4\5\u0098")
        buf.write("M\2\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u0097")
        buf.write("\3\2\2\2\u03c5\u03c7\7\62\2\2\u03c6\u03c8\5\u012e\u0098")
        buf.write("\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9")
        buf.write("\3\2\2\2\u03c9\u03ca\5\u017a\u00be\2\u03ca\u0099\3\2\2")
        buf.write("\2\u03cb\u03cc\5\\/\2\u03cc\u009b\3\2\2\2\u03cd\u03cf")
        buf.write("\5\u009eP\2\u03ce\u03d0\5\u009cO\2\u03cf\u03ce\3\2\2\2")
        buf.write("\u03cf\u03d0\3\2\2\2\u03d0\u009d\3\2\2\2\u03d1\u03d2\7")
        buf.write("\5\2\2\u03d2\u03db\7\6\2\2\u03d3\u03d4\7\5\2\2\u03d4\u03d6")
        buf.write("\5\u00a0Q\2\u03d5\u03d7\7\63\2\2\u03d6\u03d5\3\2\2\2\u03d6")
        buf.write("\u03d7\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9\7\6\2\2")
        buf.write("\u03d9\u03db\3\2\2\2\u03da\u03d1\3\2\2\2\u03da\u03d3\3")
        buf.write("\2\2\2\u03db\u009f\3\2\2\2\u03dc\u03e2\5\u00a2R\2\u03dd")
        buf.write("\u03de\5\u00a2R\2\u03de\u03df\7\21\2\2\u03df\u03e0\5\u00a0")
        buf.write("Q\2\u03e0\u03e2\3\2\2\2\u03e1\u03dc\3\2\2\2\u03e1\u03dd")
        buf.write("\3\2\2\2\u03e2\u00a1\3\2\2\2\u03e3\u03e5\7\64\2\2\u03e4")
        buf.write("\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7\3\2\2\2")
        buf.write("\u03e6\u03e8\7,\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3")
        buf.write("\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03eb\7\65\2\2\u03ea")
        buf.write("\u03e9\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ec\3\2\2\2")
        buf.write("\u03ec\u03ee\5\u00a4S\2\u03ed\u03ef\5\u00a6T\2\u03ee\u03ed")
        buf.write("\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0")
        buf.write("\u03f2\5\u017c\u00bf\2\u03f1\u03f3\5\u00a8U\2\u03f2\u03f1")
        buf.write("\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u0408\3\2\2\2\u03f4")
        buf.write("\u03f6\7\64\2\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6\3\2\2")
        buf.write("\2\u03f6\u03f7\3\2\2\2\u03f7\u03f9\7)\2\2\u03f8\u03fa")
        buf.write("\7\65\2\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa")
        buf.write("\u03fb\3\2\2\2\u03fb\u03fd\5\u00a4S\2\u03fc\u03fe\5\u00a6")
        buf.write("T\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff")
        buf.write("\3\2\2\2\u03ff\u0401\5\u017c\u00bf\2\u0400\u0402\5\u00a8")
        buf.write("U\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0408")
        buf.write("\3\2\2\2\u0403\u0405\5\u012e\u0098\2\u0404\u0403\3\2\2")
        buf.write("\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408")
        buf.write("\5\u017a\u00be\2\u0407\u03e4\3\2\2\2\u0407\u03f5\3\2\2")
        buf.write("\2\u0407\u0404\3\2\2\2\u0408\u00a3\3\2\2\2\u0409\u040c")
        buf.write("\5\u0198\u00cd\2\u040a\u040c\7\66\2\2\u040b\u0409\3\2")
        buf.write("\2\2\u040b\u040a\3\2\2\2\u040c\u00a5\3\2\2\2\u040d\u0410")
        buf.write("\5\u0198\u00cd\2\u040e\u0410\7\66\2\2\u040f\u040d\3\2")
        buf.write("\2\2\u040f\u040e\3\2\2\2\u0410\u00a7\3\2\2\2\u0411\u0412")
        buf.write("\7-\2\2\u0412\u0413\5\u0136\u009c\2\u0413\u00a9\3\2\2")
        buf.write("\2\u0414\u0416\5\u012e\u0098\2\u0415\u0414\3\2\2\2\u0415")
        buf.write("\u0416\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\7\'\2\2")
        buf.write("\u0418\u0419\5\u00acW\2\u0419\u00ab\3\2\2\2\u041a\u041d")
        buf.write("\5\u00aeX\2\u041b\u041d\5\u00be`\2\u041c\u041a\3\2\2\2")
        buf.write("\u041c\u041b\3\2\2\2\u041d\u00ad\3\2\2\2\u041e\u0420\5")
        buf.write("\u00ba^\2\u041f\u0421\5> \2\u0420\u041f\3\2\2\2\u0420")
        buf.write("\u0421\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0424\7\r\2\2")
        buf.write("\u0423\u0425\5\u00b0Y\2\u0424\u0423\3\2\2\2\u0424\u0425")
        buf.write("\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\7\16\2\2\u0427")
        buf.write("\u00af\3\2\2\2\u0428\u042a\5\u00b2Z\2\u0429\u042b\5\u00b0")
        buf.write("Y\2\u042a\u0429\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u00b1")
        buf.write("\3\2\2\2\u042c\u0432\5T+\2\u042d\u042f\5\u00b4[\2\u042e")
        buf.write("\u0430\7\3\2\2\u042f\u042e\3\2\2\2\u042f\u0430\3\2\2\2")
        buf.write("\u0430\u0432\3\2\2\2\u0431\u042c\3\2\2\2\u0431\u042d\3")
        buf.write("\2\2\2\u0432\u00b3\3\2\2\2\u0433\u0435\5\u012e\u0098\2")
        buf.write("\u0434\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0436\3")
        buf.write("\2\2\2\u0436\u0437\7\17\2\2\u0437\u0438\5\u00b6\\\2\u0438")
        buf.write("\u00b5\3\2\2\2\u0439\u043f\5\u00b8]\2\u043a\u043b\5\u00b8")
        buf.write("]\2\u043b\u043c\7\21\2\2\u043c\u043d\5\u00b6\\\2\u043d")
        buf.write("\u043f\3\2\2\2\u043e\u0439\3\2\2\2\u043e\u043a\3\2\2\2")
        buf.write("\u043f\u00b7\3\2\2\2\u0440\u0442\5\u00bc_\2\u0441\u0443")
        buf.write("\5\u0182\u00c2\2\u0442\u0441\3\2\2\2\u0442\u0443\3\2\2")
        buf.write("\2\u0443\u00b9\3\2\2\2\u0444\u0445\5\u0198\u00cd\2\u0445")
        buf.write("\u00bb\3\2\2\2\u0446\u0447\5\u0198\u00cd\2\u0447\u00bd")
        buf.write("\3\2\2\2\u0448\u044a\5\u00ba^\2\u0449\u044b\5> \2\u044a")
        buf.write("\u0449\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\3\2\2\2")
        buf.write("\u044c\u044d\7\20\2\2\u044d\u044e\5\u017e\u00c0\2\u044e")
        buf.write("\u0450\7\r\2\2\u044f\u0451\5\u00c0a\2\u0450\u044f\3\2")
        buf.write("\2\2\u0450\u0451\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0453")
        buf.write("\7\16\2\2\u0453\u00bf\3\2\2\2\u0454\u0456\5\u00c2b\2\u0455")
        buf.write("\u0457\5\u00c0a\2\u0456\u0455\3\2\2\2\u0456\u0457\3\2")
        buf.write("\2\2\u0457\u00c1\3\2\2\2\u0458\u045b\5T+\2\u0459\u045b")
        buf.write("\5\u00c4c\2\u045a\u0458\3\2\2\2\u045a\u0459\3\2\2\2\u045b")
        buf.write("\u00c3\3\2\2\2\u045c\u045e\5\u012e\u0098\2\u045d\u045c")
        buf.write("\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u045f\3\2\2\2\u045f")
        buf.write("\u0460\7\17\2\2\u0460\u0461\5\u00c6d\2\u0461\u00c5\3\2")
        buf.write("\2\2\u0462\u0468\5\u00c8e\2\u0463\u0464\5\u00c8e\2\u0464")
        buf.write("\u0465\7\21\2\2\u0465\u0466\5\u00c6d\2\u0466\u0468\3\2")
        buf.write("\2\2\u0467\u0462\3\2\2\2\u0467\u0463\3\2\2\2\u0468\u00c7")
        buf.write("\3\2\2\2\u0469\u046b\5\u00bc_\2\u046a\u046c\5\u00caf\2")
        buf.write("\u046b\u046a\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u00c9\3")
        buf.write("\2\2\2\u046d\u046e\7-\2\2\u046e\u046f\5\u01a0\u00d1\2")
        buf.write("\u046f\u00cb\3\2\2\2\u0470\u0472\5\u012e\u0098\2\u0471")
        buf.write("\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\3\2\2\2")
        buf.write("\u0473\u0474\7&\2\2\u0474\u0476\5\u00ceh\2\u0475\u0477")
        buf.write("\5> \2\u0476\u0475\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0479")
        buf.write("\3\2\2\2\u0478\u047a\5\u0194\u00cb\2\u0479\u0478\3\2\2")
        buf.write("\2\u0479\u047a\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c")
        buf.write("\5\u00d0i\2\u047c\u00cd\3\2\2\2\u047d\u047e\5\u0198\u00cd")
        buf.write("\2\u047e\u00cf\3\2\2\2\u047f\u0481\7\r\2\2\u0480\u0482")
        buf.write("\5V,\2\u0481\u0480\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0483")
        buf.write("\3\2\2\2\u0483\u0484\7\16\2\2\u0484\u00d1\3\2\2\2\u0485")
        buf.write("\u0487\5\u012e\u0098\2\u0486\u0485\3\2\2\2\u0486\u0487")
        buf.write("\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u0489\7\33\2\2\u0489")
        buf.write("\u048b\5\u00d4k\2\u048a\u048c\5> \2\u048b\u048a\3\2\2")
        buf.write("\2\u048b\u048c\3\2\2\2\u048c\u048e\3\2\2\2\u048d\u048f")
        buf.write("\5\u0194\u00cb\2\u048e\u048d\3\2\2\2\u048e\u048f\3\2\2")
        buf.write("\2\u048f\u0490\3\2\2\2\u0490\u0491\5\u00d6l\2\u0491\u00d3")
        buf.write("\3\2\2\2\u0492\u0493\5\u0198\u00cd\2\u0493\u00d5\3\2\2")
        buf.write("\2\u0494\u0496\7\r\2\2\u0495\u0497\5V,\2\u0496\u0495\3")
        buf.write("\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499")
        buf.write("\7\16\2\2\u0499\u00d7\3\2\2\2\u049a\u049c\5\u012e\u0098")
        buf.write("\2\u049b\u049a\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049d")
        buf.write("\3\2\2\2\u049d\u049e\7(\2\2\u049e\u04a0\5\u00dan\2\u049f")
        buf.write("\u04a1\5\u0194\u00cb\2\u04a0\u049f\3\2\2\2\u04a0\u04a1")
        buf.write("\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a3\5\u00dco\2\u04a3")
        buf.write("\u00d9\3\2\2\2\u04a4\u04a5\5\u0198\u00cd\2\u04a5\u00db")
        buf.write("\3\2\2\2\u04a6\u04a8\7\r\2\2\u04a7\u04a9\5\u00e0q\2\u04a8")
        buf.write("\u04a7\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\3\2\2\2")
        buf.write("\u04aa\u04ab\7\16\2\2\u04ab\u00dd\3\2\2\2\u04ac\u04ae")
        buf.write("\5\u00e2r\2\u04ad\u04af\7\3\2\2\u04ae\u04ad\3\2\2\2\u04ae")
        buf.write("\u04af\3\2\2\2\u04af\u04c1\3\2\2\2\u04b0\u04b2\5\u00e4")
        buf.write("s\2\u04b1\u04b3\7\3\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3")
        buf.write("\3\2\2\2\u04b3\u04c1\3\2\2\2\u04b4\u04b6\5\u00e6t\2\u04b5")
        buf.write("\u04b7\7\3\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2")
        buf.write("\u04b7\u04c1\3\2\2\2\u04b8\u04ba\5\u00e8u\2\u04b9\u04bb")
        buf.write("\7\3\2\2\u04ba\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb")
        buf.write("\u04c1\3\2\2\2\u04bc\u04be\5\u00eav\2\u04bd\u04bf\7\3")
        buf.write("\2\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c1")
        buf.write("\3\2\2\2\u04c0\u04ac\3\2\2\2\u04c0\u04b0\3\2\2\2\u04c0")
        buf.write("\u04b4\3\2\2\2\u04c0\u04b8\3\2\2\2\u04c0\u04bc\3\2\2\2")
        buf.write("\u04c1\u00df\3\2\2\2\u04c2\u04c4\5\u00dep\2\u04c3\u04c5")
        buf.write("\5\u00e0q\2\u04c4\u04c3\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5")
        buf.write("\u00e1\3\2\2\2\u04c6\u04c7\5p9\2\u04c7\u04c8\5r:\2\u04c8")
        buf.write("\u04c9\5\u017c\u00bf\2\u04c9\u04ca\5|?\2\u04ca\u00e3\3")
        buf.write("\2\2\2\u04cb\u04cc\5\u0092J\2\u04cc\u04ce\5\u0094K\2\u04cd")
        buf.write("\u04cf\5> \2\u04ce\u04cd\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf")
        buf.write("\u04d0\3\2\2\2\u04d0\u04d1\5\u0096L\2\u04d1\u00e5\3\2")
        buf.write("\2\2\u04d2\u04d4\5\u00eex\2\u04d3\u04d5\5> \2\u04d4\u04d3")
        buf.write("\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6")
        buf.write("\u04d7\5\u009eP\2\u04d7\u00e7\3\2\2\2\u04d8\u04d9\5\u00fa")
        buf.write("~\2\u04d9\u04da\5\u00fc\177\2\u04da\u04db\5|?\2\u04db")
        buf.write("\u00e9\3\2\2\2\u04dc\u04de\5\u008aF\2\u04dd\u04df\5\u0194")
        buf.write("\u00cb\2\u04de\u04dd\3\2\2\2\u04de\u04df\3\2\2\2\u04df")
        buf.write("\u04e1\3\2\2\2\u04e0\u04e2\5\u008eH\2\u04e1\u04e0\3\2")
        buf.write("\2\2\u04e1\u04e2\3\2\2\2\u04e2\u00eb\3\2\2\2\u04e3\u04e5")
        buf.write("\5\u00eex\2\u04e4\u04e6\5> \2\u04e5\u04e4\3\2\2\2\u04e5")
        buf.write("\u04e6\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\5\u009e")
        buf.write("P\2\u04e8\u04e9\5\u00f0y\2\u04e9\u00ed\3\2\2\2\u04ea\u04ec")
        buf.write("\5\u012e\u0098\2\u04eb\u04ea\3\2\2\2\u04eb\u04ec\3\2\2")
        buf.write("\2\u04ec\u04ee\3\2\2\2\u04ed\u04ef\7\67\2\2\u04ee\u04ed")
        buf.write("\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0")
        buf.write("\u04f1\78\2\2\u04f1\u00ef\3\2\2\2\u04f2\u04f3\5\\/\2\u04f3")
        buf.write("\u00f1\3\2\2\2\u04f4\u04f6\5\u012e\u0098\2\u04f5\u04f4")
        buf.write("\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7")
        buf.write("\u04f8\79\2\2\u04f8\u04f9\5\\/\2\u04f9\u00f3\3\2\2\2\u04fa")
        buf.write("\u04fb\7:\2\2\u04fb\u04fd\5\u017e\u00c0\2\u04fc\u04fe")
        buf.write("\5\u0194\u00cb\2\u04fd\u04fc\3\2\2\2\u04fd\u04fe\3\2\2")
        buf.write("\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\5\u00f6|\2\u0500\u00f5")
        buf.write("\3\2\2\2\u0501\u0503\7\r\2\2\u0502\u0504\5V,\2\u0503\u0502")
        buf.write("\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0505\3\2\2\2\u0505")
        buf.write("\u0506\7\16\2\2\u0506\u00f7\3\2\2\2\u0507\u0508\5\u00fa")
        buf.write("~\2\u0508\u0509\5\u00fc\177\2\u0509\u050a\5\\/\2\u050a")
        buf.write("\u0514\3\2\2\2\u050b\u050c\5\u00fa~\2\u050c\u050d\5\u00fc")
        buf.write("\177\2\u050d\u050e\5t;\2\u050e\u0514\3\2\2\2\u050f\u0510")
        buf.write("\5\u00fa~\2\u0510\u0511\5\u00fc\177\2\u0511\u0512\5|?")
        buf.write("\2\u0512\u0514\3\2\2\2\u0513\u0507\3\2\2\2\u0513\u050b")
        buf.write("\3\2\2\2\u0513\u050f\3\2\2\2\u0514\u00f9\3\2\2\2\u0515")
        buf.write("\u0517\5\u012e\u0098\2\u0516\u0515\3\2\2\2\u0516\u0517")
        buf.write("\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\7;\2\2\u0519")
        buf.write("\u051a\5\u009eP\2\u051a\u00fb\3\2\2\2\u051b\u051d\7\62")
        buf.write("\2\2\u051c\u051e\5\u012e\u0098\2\u051d\u051c\3\2\2\2\u051d")
        buf.write("\u051e\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0520\5\u017a")
        buf.write("\u00be\2\u0520\u00fd\3\2\2\2\u0521\u0525\5\u0100\u0081")
        buf.write("\2\u0522\u0525\5\u0102\u0082\2\u0523\u0525\5\u0104\u0083")
        buf.write("\2\u0524\u0521\3\2\2\2\u0524\u0522\3\2\2\2\u0524\u0523")
        buf.write("\3\2\2\2\u0525\u00ff\3\2\2\2\u0526\u0527\7<\2\2\u0527")
        buf.write("\u0528\7=\2\2\u0528\u0529\7<\2\2\u0529\u052a\7\r\2\2\u052a")
        buf.write("\u052b\7\16\2\2\u052b\u0101\3\2\2\2\u052c\u052d\7<\2\2")
        buf.write("\u052d\u052e\7>\2\2\u052e\u052f\7<\2\2\u052f\u0530\7\r")
        buf.write("\2\2\u0530\u0531\7\16\2\2\u0531\u0103\3\2\2\2\u0532\u0533")
        buf.write("\7<\2\2\u0533\u0534\7?\2\2\u0534\u0535\7<\2\2\u0535\u0536")
        buf.write("\7\r\2\2\u0536\u0537\5\u0106\u0084\2\u0537\u0538\7\16")
        buf.write("\2\2\u0538\u0105\3\2\2\2\u0539\u053b\5\u0108\u0085\2\u053a")
        buf.write("\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053d\3\2\2\2")
        buf.write("\u053c\u053e\5\u010c\u0087\2\u053d\u053c\3\2\2\2\u053d")
        buf.write("\u053e\3\2\2\2\u053e\u0107\3\2\2\2\u053f\u0540\7@\2\2")
        buf.write("\u0540\u0541\5\u010a\u0086\2\u0541\u0109\3\2\2\2\u0542")
        buf.write("\u0543\5\u01a2\u00d2\2\u0543\u010b\3\2\2\2\u0544\u0545")
        buf.write("\7A\2\2\u0545\u0546\5\u010e\u0088\2\u0546\u010d\3\2\2")
        buf.write("\2\u0547\u0548\t\4\2\2\u0548\u010f\3\2\2\2\u0549\u054a")
        buf.write("\b\u0089\1\2\u054a\u054c\5\u0112\u008a\2\u054b\u054d\5")
        buf.write("\u017c\u00bf\2\u054c\u054b\3\2\2\2\u054c\u054d\3\2\2\2")
        buf.write("\u054d\u055b\3\2\2\2\u054e\u054f\5\u0114\u008b\2\u054f")
        buf.write("\u0550\5\u017c\u00bf\2\u0550\u055b\3\2\2\2\u0551\u055b")
        buf.write("\5\u0116\u008c\2\u0552\u0554\5\u0118\u008d\2\u0553\u0555")
        buf.write("\5\u017c\u00bf\2\u0554\u0553\3\2\2\2\u0554\u0555\3\2\2")
        buf.write("\2\u0555\u055b\3\2\2\2\u0556\u055b\5\u011e\u0090\2\u0557")
        buf.write("\u0558\7E\2\2\u0558\u055b\5\u017a\u00be\2\u0559\u055b")
        buf.write("\5\u0126\u0094\2\u055a\u0549\3\2\2\2\u055a\u054e\3\2\2")
        buf.write("\2\u055a\u0551\3\2\2\2\u055a\u0552\3\2\2\2\u055a\u0556")
        buf.write("\3\2\2\2\u055a\u0557\3\2\2\2\u055a\u0559\3\2\2\2\u055b")
        buf.write("\u0561\3\2\2\2\u055c\u055d\f\4\2\2\u055d\u055e\7F\2\2")
        buf.write("\u055e\u0560\5\u017a\u00be\2\u055f\u055c\3\2\2\2\u0560")
        buf.write("\u0563\3\2\2\2\u0561\u055f\3\2\2\2\u0561\u0562\3\2\2\2")
        buf.write("\u0562\u0111\3\2\2\2\u0563\u0561\3\2\2\2\u0564\u0565\7")
        buf.write("\66\2\2\u0565\u0113\3\2\2\2\u0566\u0567\5\u0198\u00cd")
        buf.write("\2\u0567\u0115\3\2\2\2\u0568\u0569\7)\2\2\u0569\u056d")
        buf.write("\5\u0110\u0089\2\u056a\u056b\7,\2\2\u056b\u056d\5\u0110")
        buf.write("\u0089\2\u056c\u0568\3\2\2\2\u056c\u056a\3\2\2\2\u056d")
        buf.write("\u0117\3\2\2\2\u056e\u0570\7\5\2\2\u056f\u0571\5\u011a")
        buf.write("\u008e\2\u0570\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571")
        buf.write("\u0572\3\2\2\2\u0572\u0573\7\6\2\2\u0573\u0119\3\2\2\2")
        buf.write("\u0574\u0579\5\u011c\u008f\2\u0575\u0576\7\21\2\2\u0576")
        buf.write("\u0578\5\u011c\u008f\2\u0577\u0575\3\2\2\2\u0578\u057b")
        buf.write("\3\2\2\2\u0579\u0577\3\2\2\2\u0579\u057a\3\2\2\2\u057a")
        buf.write("\u011b\3\2\2\2\u057b\u0579\3\2\2\2\u057c\u057d\5\u0110")
        buf.write("\u0089\2\u057d\u011d\3\2\2\2\u057e\u0580\5\u017e\u00c0")
        buf.write("\2\u057f\u057e\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0581")
        buf.write("\3\2\2\2\u0581\u0582\7+\2\2\u0582\u0584\5\u00bc_\2\u0583")
        buf.write("\u0585\5\u0118\u008d\2\u0584\u0583\3\2\2\2\u0584\u0585")
        buf.write("\3\2\2\2\u0585\u011f\3\2\2\2\u0586\u0589\5\u0122\u0092")
        buf.write("\2\u0587\u0589\5\u0124\u0093\2\u0588\u0586\3\2\2\2\u0588")
        buf.write("\u0587\3\2\2\2\u0589\u0121\3\2\2\2\u058a\u058b\7E\2\2")
        buf.write("\u058b\u058c\5\u017a\u00be\2\u058c\u0123\3\2\2\2\u058d")
        buf.write("\u058e\5\u0110\u0089\2\u058e\u058f\7F\2\2\u058f\u0590")
        buf.write("\5\u017a\u00be\2\u0590\u0125\3\2\2\2\u0591\u0592\5\u0136")
        buf.write("\u009c\2\u0592\u0127\3\2\2\2\u0593\u0594\7G\2\2\u0594")
        buf.write("\u0596\5\u012a\u0096\2\u0595\u0597\5\u012c\u0097\2\u0596")
        buf.write("\u0595\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0129\3\2\2\2")
        buf.write("\u0598\u0599\5\u0198\u00cd\2\u0599\u012b\3\2\2\2\u059a")
        buf.write("\u059c\7\5\2\2\u059b\u059d\5\u0130\u0099\2\u059c\u059b")
        buf.write("\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e\3\2\2\2\u059e")
        buf.write("\u059f\7\6\2\2\u059f\u012d\3\2\2\2\u05a0\u05a2\5\u0128")
        buf.write("\u0095\2\u05a1\u05a0\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3")
        buf.write("\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u012f\3\2\2\2")
        buf.write("\u05a5\u05a7\5\u0132\u009a\2\u05a6\u05a5\3\2\2\2\u05a7")
        buf.write("\u05a8\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a8\u05a9\3\2\2\2")
        buf.write("\u05a9\u0131\3\2\2\2\u05aa\u05ac\7\5\2\2\u05ab\u05ad\5")
        buf.write("\u0130\u0099\2\u05ac\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2")
        buf.write("\u05ad\u05ae\3\2\2\2\u05ae\u05bf\7\6\2\2\u05af\u05b1\7")
        buf.write("H\2\2\u05b0\u05b2\5\u0130\u0099\2\u05b1\u05b0\3\2\2\2")
        buf.write("\u05b1\u05b2\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05bf\7")
        buf.write("I\2\2\u05b4\u05b6\7\r\2\2\u05b5\u05b7\5\u0130\u0099\2")
        buf.write("\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\3")
        buf.write("\2\2\2\u05b8\u05bf\7\16\2\2\u05b9\u05bf\5\u0198\u00cd")
        buf.write("\2\u05ba\u05bf\5\u0136\u009c\2\u05bb\u05bf\5\u019c\u00cf")
        buf.write("\2\u05bc\u05bf\5\u01a0\u00d1\2\u05bd\u05bf\5\u0172\u00ba")
        buf.write("\2\u05be\u05aa\3\2\2\2\u05be\u05af\3\2\2\2\u05be\u05b4")
        buf.write("\3\2\2\2\u05be\u05b9\3\2\2\2\u05be\u05ba\3\2\2\2\u05be")
        buf.write("\u05bb\3\2\2\2\u05be\u05bc\3\2\2\2\u05be\u05bd\3\2\2\2")
        buf.write("\u05bf\u0133\3\2\2\2\u05c0\u05c5\5\u0136\u009c\2\u05c1")
        buf.write("\u05c2\7\21\2\2\u05c2\u05c4\5\u0136\u009c\2\u05c3\u05c1")
        buf.write("\3\2\2\2\u05c4\u05c7\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c5")
        buf.write("\u05c6\3\2\2\2\u05c6\u0135\3\2\2\2\u05c7\u05c5\3\2\2\2")
        buf.write("\u05c8\u05cc\5\u0138\u009d\2\u05c9\u05cb\5\u013c\u009f")
        buf.write("\2\u05ca\u05c9\3\2\2\2\u05cb\u05ce\3\2\2\2\u05cc\u05ca")
        buf.write("\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u0137\3\2\2\2\u05ce")
        buf.write("\u05cc\3\2\2\2\u05cf\u05d1\5\u0176\u00bc\2\u05d0\u05cf")
        buf.write("\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2")
        buf.write("\u05d4\5\u0170\u00b9\2\u05d3\u05d5\7\3\2\2\u05d4\u05d3")
        buf.write("\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6")
        buf.write("\u05d8\5\u013a\u009e\2\u05d7\u05d0\3\2\2\2\u05d7\u05d6")
        buf.write("\3\2\2\2\u05d8\u0139\3\2\2\2\u05d9\u05da\7J\2\2\u05da")
        buf.write("\u05db\5\u0198\u00cd\2\u05db\u013b\3\2\2\2\u05dc\u05dd")
        buf.write("\5\u0174\u00bb\2\u05dd\u05de\5\u0138\u009d\2\u05de\u05e7")
        buf.write("\3\2\2\2\u05df\u05e0\5\u013e\u00a0\2\u05e0\u05e1\5\u0138")
        buf.write("\u009d\2\u05e1\u05e7\3\2\2\2\u05e2\u05e3\5\u0140\u00a1")
        buf.write("\2\u05e3\u05e4\5\u0138\u009d\2\u05e4\u05e7\3\2\2\2\u05e5")
        buf.write("\u05e7\5\u0142\u00a2\2\u05e6\u05dc\3\2\2\2\u05e6\u05df")
        buf.write("\3\2\2\2\u05e6\u05e2\3\2\2\2\u05e6\u05e5\3\2\2\2\u05e7")
        buf.write("\u013d\3\2\2\2\u05e8\u05e9\7-\2\2\u05e9\u013f\3\2\2\2")
        buf.write("\u05ea\u05eb\7K\2\2\u05eb\u05ec\5\u0136\u009c\2\u05ec")
        buf.write("\u05ed\7\20\2\2\u05ed\u0141\3\2\2\2\u05ee\u05ef\7E\2\2")
        buf.write("\u05ef\u05f6\5\u017a\u00be\2\u05f0\u05f1\7F\2\2\u05f1")
        buf.write("\u05f2\7K\2\2\u05f2\u05f6\5\u017a\u00be\2\u05f3\u05f4")
        buf.write("\7F\2\2\u05f4\u05f6\5\u017a\u00be\2\u05f5\u05ee\3\2\2")
        buf.write("\2\u05f5\u05f0\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f6\u0143")
        buf.write("\3\2\2\2\u05f7\u05f9\5\u0198\u00cd\2\u05f8\u05fa\5N(\2")
        buf.write("\u05f9\u05f8\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u0602\3")
        buf.write("\2\2\2\u05fb\u0602\5\u0146\u00a4\2\u05fc\u0602\5\u0154")
        buf.write("\u00ab\2\u05fd\u0602\5\u0156\u00ac\2\u05fe\u0602\5\u015e")
        buf.write("\u00b0\2\u05ff\u0602\5\u0168\u00b5\2\u0600\u0602\5\u016e")
        buf.write("\u00b8\2\u0601\u05f7\3\2\2\2\u0601\u05fb\3\2\2\2\u0601")
        buf.write("\u05fc\3\2\2\2\u0601\u05fd\3\2\2\2\u0601\u05fe\3\2\2\2")
        buf.write("\u0601\u05ff\3\2\2\2\u0601\u0600\3\2\2\2\u0602\u0145\3")
        buf.write("\2\2\2\u0603\u060b\5\u01a0\u00d1\2\u0604\u060b\5\u0148")
        buf.write("\u00a5\2\u0605\u060b\5\u014e\u00a8\2\u0606\u060b\7L\2")
        buf.write("\2\u0607\u060b\7M\2\2\u0608\u060b\7N\2\2\u0609\u060b\7")
        buf.write("O\2\2\u060a\u0603\3\2\2\2\u060a\u0604\3\2\2\2\u060a\u0605")
        buf.write("\3\2\2\2\u060a\u0606\3\2\2\2\u060a\u0607\3\2\2\2\u060a")
        buf.write("\u0608\3\2\2\2\u060a\u0609\3\2\2\2\u060b\u0147\3\2\2\2")
        buf.write("\u060c\u060e\7H\2\2\u060d\u060f\5\u014a\u00a6\2\u060e")
        buf.write("\u060d\3\2\2\2\u060e\u060f\3\2\2\2\u060f\u0610\3\2\2\2")
        buf.write("\u0610\u0611\7I\2\2\u0611\u0149\3\2\2\2\u0612\u0617\5")
        buf.write("\u014c\u00a7\2\u0613\u0614\7\21\2\2\u0614\u0616\5\u014c")
        buf.write("\u00a7\2\u0615\u0613\3\2\2\2\u0616\u0619\3\2\2\2\u0617")
        buf.write("\u0615\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u061b\3\2\2\2")
        buf.write("\u0619\u0617\3\2\2\2\u061a\u061c\7\21\2\2\u061b\u061a")
        buf.write("\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u014b\3\2\2\2\u061d")
        buf.write("\u061e\5\u0136\u009c\2\u061e\u014d\3\2\2\2\u061f\u0620")
        buf.write("\7H\2\2\u0620\u0621\5\u0150\u00a9\2\u0621\u0622\7I\2\2")
        buf.write("\u0622\u0627\3\2\2\2\u0623\u0624\7H\2\2\u0624\u0625\7")
        buf.write("\20\2\2\u0625\u0627\7I\2\2\u0626\u061f\3\2\2\2\u0626\u0623")
        buf.write("\3\2\2\2\u0627\u014f\3\2\2\2\u0628\u062d\5\u0152\u00aa")
        buf.write("\2\u0629\u062a\7\21\2\2\u062a\u062c\5\u0152\u00aa\2\u062b")
        buf.write("\u0629\3\2\2\2\u062c\u062f\3\2\2\2\u062d\u062b\3\2\2\2")
        buf.write("\u062d\u062e\3\2\2\2\u062e\u0631\3\2\2\2\u062f\u062d\3")
        buf.write("\2\2\2\u0630\u0632\7\21\2\2\u0631\u0630\3\2\2\2\u0631")
        buf.write("\u0632\3\2\2\2\u0632\u0151\3\2\2\2\u0633\u0634\5\u0136")
        buf.write("\u009c\2\u0634\u0635\7\20\2\2\u0635\u0636\5\u0136\u009c")
        buf.write("\2\u0636\u0153\3\2\2\2\u0637\u0644\7P\2\2\u0638\u0639")
        buf.write("\7P\2\2\u0639\u063a\7+\2\2\u063a\u0644\5\u0198\u00cd\2")
        buf.write("\u063b\u063c\7P\2\2\u063c\u063d\7H\2\2\u063d\u063e\5\u0136")
        buf.write("\u009c\2\u063e\u063f\7I\2\2\u063f\u0644\3\2\2\2\u0640")
        buf.write("\u0641\7P\2\2\u0641\u0642\7+\2\2\u0642\u0644\78\2\2\u0643")
        buf.write("\u0637\3\2\2\2\u0643\u0638\3\2\2\2\u0643\u063b\3\2\2\2")
        buf.write("\u0643\u0640\3\2\2\2\u0644\u0155\3\2\2\2\u0645\u0649\5")
        buf.write("\u0158\u00ad\2\u0646\u0649\5\u015a\u00ae\2\u0647\u0649")
        buf.write("\5\u015c\u00af\2\u0648\u0645\3\2\2\2\u0648\u0646\3\2\2")
        buf.write("\2\u0648\u0647\3\2\2\2\u0649\u0157\3\2\2\2\u064a\u064b")
        buf.write("\7Q\2\2\u064b\u064c\7+\2\2\u064c\u064d\5\u0198\u00cd\2")
        buf.write("\u064d\u0159\3\2\2\2\u064e\u064f\7Q\2\2\u064f\u0650\7")
        buf.write("H\2\2\u0650\u0651\5\u0136\u009c\2\u0651\u0652\7I\2\2\u0652")
        buf.write("\u015b\3\2\2\2\u0653\u0654\7Q\2\2\u0654\u0655\7+\2\2\u0655")
        buf.write("\u0656\78\2\2\u0656\u015d\3\2\2\2\u0657\u0659\7\r\2\2")
        buf.write("\u0658\u065a\5\u0160\u00b1\2\u0659\u0658\3\2\2\2\u0659")
        buf.write("\u065a\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u065c\5\6\4\2")
        buf.write("\u065c\u065d\7\16\2\2\u065d\u015f\3\2\2\2\u065e\u0660")
        buf.write("\5\u009eP\2\u065f\u0661\5\u0098M\2\u0660\u065f\3\2\2\2")
        buf.write("\u0660\u0661\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0663\7")
        buf.write("\7\2\2\u0663\u067c\3\2\2\2\u0664\u0666\5\u019e\u00d0\2")
        buf.write("\u0665\u0667\5\u0098M\2\u0666\u0665\3\2\2\2\u0666\u0667")
        buf.write("\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669\7\7\2\2\u0669")
        buf.write("\u067c\3\2\2\2\u066a\u066b\5\u0162\u00b2\2\u066b\u066d")
        buf.write("\5\u009eP\2\u066c\u066e\5\u0098M\2\u066d\u066c\3\2\2\2")
        buf.write("\u066d\u066e\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0670\7")
        buf.write("\7\2\2\u0670\u067c\3\2\2\2\u0671\u0672\5\u0162\u00b2\2")
        buf.write("\u0672\u0674\5\u019e\u00d0\2\u0673\u0675\5\u0098M\2\u0674")
        buf.write("\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0676\3\2\2\2")
        buf.write("\u0676\u0677\7\7\2\2\u0677\u067c\3\2\2\2\u0678\u0679\5")
        buf.write("\u0162\u00b2\2\u0679\u067a\7\7\2\2\u067a\u067c\3\2\2\2")
        buf.write("\u067b\u065e\3\2\2\2\u067b\u0664\3\2\2\2\u067b\u066a\3")
        buf.write("\2\2\2\u067b\u0671\3\2\2\2\u067b\u0678\3\2\2\2\u067c\u0161")
        buf.write("\3\2\2\2\u067d\u067e\7H\2\2\u067e\u067f\5\u0164\u00b3")
        buf.write("\2\u067f\u0680\5\u0136\u009c\2\u0680\u0681\7I\2\2\u0681")
        buf.write("\u0163\3\2\2\2\u0682\u0683\t\5\2\2\u0683\u0165\3\2\2\2")
        buf.write("\u0684\u0685\7+\2\2\u0685\u0686\5\u0198\u00cd\2\u0686")
        buf.write("\u0167\3\2\2\2\u0687\u0689\7\5\2\2\u0688\u068a\5\u016a")
        buf.write("\u00b6\2\u0689\u0688\3\2\2\2\u0689\u068a\3\2\2\2\u068a")
        buf.write("\u068b\3\2\2\2\u068b\u068c\7\6\2\2\u068c\u0169\3\2\2\2")
        buf.write("\u068d\u0692\5\u016c\u00b7\2\u068e\u068f\7\21\2\2\u068f")
        buf.write("\u0691\5\u016a\u00b6\2\u0690\u068e\3\2\2\2\u0691\u0694")
        buf.write("\3\2\2\2\u0692\u0690\3\2\2\2\u0692\u0693\3\2\2\2\u0693")
        buf.write("\u016b\3\2\2\2\u0694\u0692\3\2\2\2\u0695\u069b\5\u0136")
        buf.write("\u009c\2\u0696\u0697\5\u0198\u00cd\2\u0697\u0698\7\20")
        buf.write("\2\2\u0698\u0699\5\u0136\u009c\2\u0699\u069b\3\2\2\2\u069a")
        buf.write("\u0695\3\2\2\2\u069a\u0696\3\2\2\2\u069b\u016d\3\2\2\2")
        buf.write("\u069c\u069d\7\66\2\2\u069d\u016f\3\2\2\2\u069e\u069f")
        buf.write("\b\u00b9\1\2\u069f\u06a0\5\u0144\u00a3\2\u06a0\u06c7\3")
        buf.write("\2\2\2\u06a1\u06a2\f\r\2\2\u06a2\u06c6\5\u0178\u00bd\2")
        buf.write("\u06a3\u06a4\f\f\2\2\u06a4\u06c6\5\u0168\u00b5\2\u06a5")
        buf.write("\u06a7\f\13\2\2\u06a6\u06a8\5\u0168\u00b5\2\u06a7\u06a6")
        buf.write("\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9")
        buf.write("\u06c6\5\u015e\u00b0\2\u06aa\u06ab\f\n\2\2\u06ab\u06ac")
        buf.write("\7+\2\2\u06ac\u06c6\78\2\2\u06ad\u06ae\f\t\2\2\u06ae\u06af")
        buf.write("\7+\2\2\u06af\u06c6\7`\2\2\u06b0\u06b1\f\b\2\2\u06b1\u06b2")
        buf.write("\7+\2\2\u06b2\u06b4\5\u0198\u00cd\2\u06b3\u06b5\5N(\2")
        buf.write("\u06b4\u06b3\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06c6\3")
        buf.write("\2\2\2\u06b6\u06b7\f\7\2\2\u06b7\u06b8\7+\2\2\u06b8\u06c6")
        buf.write("\7P\2\2\u06b9\u06ba\f\6\2\2\u06ba\u06bb\7+\2\2\u06bb\u06c6")
        buf.write("\7R\2\2\u06bc\u06bd\f\5\2\2\u06bd\u06be\7H\2\2\u06be\u06bf")
        buf.write("\5\u0134\u009b\2\u06bf\u06c0\7I\2\2\u06c0\u06c6\3\2\2")
        buf.write("\2\u06c1\u06c2\f\4\2\2\u06c2\u06c6\7S\2\2\u06c3\u06c4")
        buf.write("\f\3\2\2\u06c4\u06c6\7K\2\2\u06c5\u06a1\3\2\2\2\u06c5")
        buf.write("\u06a3\3\2\2\2\u06c5\u06a5\3\2\2\2\u06c5\u06aa\3\2\2\2")
        buf.write("\u06c5\u06ad\3\2\2\2\u06c5\u06b0\3\2\2\2\u06c5\u06b6\3")
        buf.write("\2\2\2\u06c5\u06b9\3\2\2\2\u06c5\u06bc\3\2\2\2\u06c5\u06c1")
        buf.write("\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c6\u06c9\3\2\2\2\u06c7")
        buf.write("\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u0171\3\2\2\2")
        buf.write("\u06c9\u06c7\3\2\2\2\u06ca\u06cb\7X\2\2\u06cb\u0173\3")
        buf.write("\2\2\2\u06cc\u06cd\5\u0172\u00ba\2\u06cd\u0175\3\2\2\2")
        buf.write("\u06ce\u06cf\5\u0172\u00ba\2\u06cf\u0177\3\2\2\2\u06d0")
        buf.write("\u06d1\5\u0172\u00ba\2\u06d1\u0179\3\2\2\2\u06d2\u06d3")
        buf.write("\b\u00be\1\2\u06d3\u06d7\5\u017e\u00c0\2\u06d4\u06d7\5")
        buf.write("\u0182\u00c2\2\u06d5\u06d7\5\u018c\u00c7\2\u06d6\u06d2")
        buf.write("\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d6\u06d5\3\2\2\2\u06d7")
        buf.write("\u06ea\3\2\2\2\u06d8\u06d9\f\n\2\2\u06d9\u06da\7\62\2")
        buf.write("\2\u06da\u06e9\5\u017a\u00be\13\u06db\u06dc\f\13\2\2\u06dc")
        buf.write("\u06dd\7H\2\2\u06dd\u06e9\7I\2\2\u06de\u06df\f\7\2\2\u06df")
        buf.write("\u06e9\7K\2\2\u06e0\u06e1\f\6\2\2\u06e1\u06e9\7S\2\2\u06e2")
        buf.write("\u06e3\f\4\2\2\u06e3\u06e4\7+\2\2\u06e4\u06e9\7T\2\2\u06e5")
        buf.write("\u06e6\f\3\2\2\u06e6\u06e7\7+\2\2\u06e7\u06e9\7U\2\2\u06e8")
        buf.write("\u06d8\3\2\2\2\u06e8\u06db\3\2\2\2\u06e8\u06de\3\2\2\2")
        buf.write("\u06e8\u06e0\3\2\2\2\u06e8\u06e2\3\2\2\2\u06e8\u06e5\3")
        buf.write("\2\2\2\u06e9\u06ec\3\2\2\2\u06ea\u06e8\3\2\2\2\u06ea\u06eb")
        buf.write("\3\2\2\2\u06eb\u017b\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ed")
        buf.write("\u06ef\7\20\2\2\u06ee\u06f0\5\u012e\u0098\2\u06ef\u06ee")
        buf.write("\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1")
        buf.write("\u06f2\5\u017a\u00be\2\u06f2\u017d\3\2\2\2\u06f3\u06f5")
        buf.write("\5\u0180\u00c1\2\u06f4\u06f6\5N(\2\u06f5\u06f4\3\2\2\2")
        buf.write("\u06f5\u06f6\3\2\2\2\u06f6\u06ff\3\2\2\2\u06f7\u06f9\5")
        buf.write("\u0180\u00c1\2\u06f8\u06fa\5N(\2\u06f9\u06f8\3\2\2\2\u06f9")
        buf.write("\u06fa\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fc\7+\2\2")
        buf.write("\u06fc\u06fd\5\u017e\u00c0\2\u06fd\u06ff\3\2\2\2\u06fe")
        buf.write("\u06f3\3\2\2\2\u06fe\u06f7\3\2\2\2\u06ff\u017f\3\2\2\2")
        buf.write("\u0700\u0701\5\u0198\u00cd\2\u0701\u0181\3\2\2\2\u0702")
        buf.write("\u0704\7\5\2\2\u0703\u0705\5\u0184\u00c3\2\u0704\u0703")
        buf.write("\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0706\3\2\2\2\u0706")
        buf.write("\u0707\7\6\2\2\u0707\u0183\3\2\2\2\u0708\u070a\5\u0186")
        buf.write("\u00c4\2\u0709\u070b\7\63\2\2\u070a\u0709\3\2\2\2\u070a")
        buf.write("\u070b\3\2\2\2\u070b\u0185\3\2\2\2\u070c\u0712\5\u0188")
        buf.write("\u00c5\2\u070d\u070e\5\u0188\u00c5\2\u070e\u070f\7\21")
        buf.write("\2\2\u070f\u0710\5\u0186\u00c4\2\u0710\u0712\3\2\2\2\u0711")
        buf.write("\u070c\3\2\2\2\u0711\u070d\3\2\2\2\u0712\u0187\3\2\2\2")
        buf.write("\u0713\u0715\5\u012e\u0098\2\u0714\u0713\3\2\2\2\u0714")
        buf.write("\u0715\3\2\2\2\u0715\u0717\3\2\2\2\u0716\u0718\7\64\2")
        buf.write("\2\u0717\u0716\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u0719")
        buf.write("\3\2\2\2\u0719\u0721\5\u017a\u00be\2\u071a\u071c\7\64")
        buf.write("\2\2\u071b\u071a\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071d")
        buf.write("\3\2\2\2\u071d\u071e\5\u018a\u00c6\2\u071e\u071f\5\u017c")
        buf.write("\u00bf\2\u071f\u0721\3\2\2\2\u0720\u0714\3\2\2\2\u0720")
        buf.write("\u071b\3\2\2\2\u0721\u0189\3\2\2\2\u0722\u0723\5\u0198")
        buf.write("\u00cd\2\u0723\u018b\3\2\2\2\u0724\u0725\7(\2\2\u0725")
        buf.write("\u0727\7\30\2\2\u0726\u0728\5\u018e\u00c8\2\u0727\u0726")
        buf.write("\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u0729\3\2\2\2\u0729")
        buf.write("\u072a\7\31\2\2\u072a\u018d\3\2\2\2\u072b\u0731\5\u0190")
        buf.write("\u00c9\2\u072c\u072d\5\u0190\u00c9\2\u072d\u072e\7\21")
        buf.write("\2\2\u072e\u072f\5\u018e\u00c8\2\u072f\u0731\3\2\2\2\u0730")
        buf.write("\u072b\3\2\2\2\u0730\u072c\3\2\2\2\u0731\u018f\3\2\2\2")
        buf.write("\u0732\u0733\5\u017e\u00c0\2\u0733\u0191\3\2\2\2\u0734")
        buf.write("\u0735\5\u017a\u00be\2\u0735\u0736\7+\2\2\u0736\u0737")
        buf.write("\7T\2\2\u0737\u073d\3\2\2\2\u0738\u0739\5\u017a\u00be")
        buf.write("\2\u0739\u073a\7+\2\2\u073a\u073b\7U\2\2\u073b\u073d\3")
        buf.write("\2\2\2\u073c\u0734\3\2\2\2\u073c\u0738\3\2\2\2\u073d\u0193")
        buf.write("\3\2\2\2\u073e\u073f\7\20\2\2\u073f\u0740\5\u0196\u00cc")
        buf.write("\2\u0740\u0195\3\2\2\2\u0741\u0746\5\u017e\u00c0\2\u0742")
        buf.write("\u0743\7\21\2\2\u0743\u0745\5\u017e\u00c0\2\u0744\u0742")
        buf.write("\3\2\2\2\u0745\u0748\3\2\2\2\u0746\u0744\3\2\2\2\u0746")
        buf.write("\u0747\3\2\2\2\u0747\u0197\3\2\2\2\u0748\u0746\3\2\2\2")
        buf.write("\u0749\u074c\7\\\2\2\u074a\u074c\5\u019c\u00cf\2\u074b")
        buf.write("\u0749\3\2\2\2\u074b\u074a\3\2\2\2\u074c\u0199\3\2\2\2")
        buf.write("\u074d\u074e\t\6\2\2\u074e\u019b\3\2\2\2\u074f\u0750\t")
        buf.write("\7\2\2\u0750\u019d\3\2\2\2\u0751\u0757\5\u0198\u00cd\2")
        buf.write("\u0752\u0753\5\u0198\u00cd\2\u0753\u0754\7\21\2\2\u0754")
        buf.write("\u0755\5\u019e\u00d0\2\u0755\u0757\3\2\2\2\u0756\u0751")
        buf.write("\3\2\2\2\u0756\u0752\3\2\2\2\u0757\u019f\3\2\2\2\u0758")
        buf.write("\u075c\5\u01a2\u00d2\2\u0759\u075c\7b\2\2\u075a\u075c")
        buf.write("\7c\2\2\u075b\u0758\3\2\2\2\u075b\u0759\3\2\2\2\u075b")
        buf.write("\u075a\3\2\2\2\u075c\u01a1\3\2\2\2\u075d\u075e\t\b\2\2")
        buf.write("\u075e\u01a3\3\2\2\2\u00e7\u01a6\u01a8\u01af\u01b3\u01b7")
        buf.write("\u01bb\u01c0\u01c2\u01c7\u01cd\u01d1\u01d5\u01d9\u01df")
        buf.write("\u01e3\u01e7\u01eb\u01ef\u01fd\u0206\u020c\u0210\u0216")
        buf.write("\u021c\u0222\u0230\u0238\u023c\u024f\u025a\u025e\u0262")
        buf.write("\u0268\u026d\u0276\u0281\u028b\u028f\u0299\u02a8\u02af")
        buf.write("\u02b3\u02b7\u02bb\u02bf\u02c3\u02c7\u02cb\u02cf\u02d3")
        buf.write("\u02d7\u02db\u02df\u02e3\u02e5\u02e9\u02ed\u02f3\u02f8")
        buf.write("\u02fc\u0307\u030b\u030e\u0311\u031b\u0320\u033b\u033f")
        buf.write("\u0342\u0345\u034e\u0357\u035a\u0360\u0364\u036d\u0376")
        buf.write("\u0379\u037e\u0385\u038e\u0391\u0395\u039a\u039e\u03b0")
        buf.write("\u03b6\u03b9\u03bf\u03c3\u03c7\u03cf\u03d6\u03da\u03e1")
        buf.write("\u03e4\u03e7\u03ea\u03ee\u03f2\u03f5\u03f9\u03fd\u0401")
        buf.write("\u0404\u0407\u040b\u040f\u0415\u041c\u0420\u0424\u042a")
        buf.write("\u042f\u0431\u0434\u043e\u0442\u044a\u0450\u0456\u045a")
        buf.write("\u045d\u0467\u046b\u0471\u0476\u0479\u0481\u0486\u048b")
        buf.write("\u048e\u0496\u049b\u04a0\u04a8\u04ae\u04b2\u04b6\u04ba")
        buf.write("\u04be\u04c0\u04c4\u04ce\u04d4\u04de\u04e1\u04e5\u04eb")
        buf.write("\u04ee\u04f5\u04fd\u0503\u0513\u0516\u051d\u0524\u053a")
        buf.write("\u053d\u054c\u0554\u055a\u0561\u056c\u0570\u0579\u057f")
        buf.write("\u0584\u0588\u0596\u059c\u05a3\u05a8\u05ac\u05b1\u05b6")
        buf.write("\u05be\u05c5\u05cc\u05d0\u05d4\u05d7\u05e6\u05f5\u05f9")
        buf.write("\u0601\u060a\u060e\u0617\u061b\u0626\u062d\u0631\u0643")
        buf.write("\u0648\u0659\u0660\u0666\u066d\u0674\u067b\u0689\u0692")
        buf.write("\u069a\u06a7\u06b4\u06c5\u06c7\u06d6\u06e8\u06ea\u06ef")
        buf.write("\u06f5\u06f9\u06fe\u0704\u070a\u0711\u0714\u0717\u071b")
        buf.write("\u0720\u0727\u0730\u073c\u0746\u074b\u0756\u075b")
        return buf.getvalue()


class SwiftParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"';'", u"'for'", u"'('", u"')'", u"'in'", 
                     u"'while'", u"'do'", u"'if'", u"'else'", u"'switch'", 
                     u"'{'", u"'}'", u"'case'", u"':'", u"','", u"'default'", 
                     u"'where'", u"'break'", u"'continue'", u"'fallthrough'", 
                     u"'return'", u"'<'", u"'>'", u"'=='", u"'class'", u"'mutating'", 
                     u"'nonmutating'", u"'override'", u"'static'", u"'unowned'", 
                     u"'unowned(safe)'", u"'unowned(unsafe)'", u"'weak'", 
                     u"'import'", u"'typealias'", u"'struct'", u"'enum'", 
                     u"'protocol'", u"'var'", u"'func'", u"'.'", u"'let'", 
                     u"'='", u"'get'", u"'set'", u"'willSet'", u"'didSet'", 
                     u"'->'", u"'...'", u"'inout'", u"'#'", u"'_'", u"'convenience'", 
                     u"'init'", u"'deinit'", u"'extension'", u"'subscript'", 
                     u"'operator'", u"'prefix'", u"'postfix'", u"'infix'", 
                     u"'precedence'", u"'associativity'", u"'left'", u"'right'", 
                     u"'none'", u"'is'", u"'as'", u"'@'", u"'['", u"']'", 
                     u"'&'", u"'?'", u"'__FILE__'", u"'__LINE__'", u"'__COLUMN__'", 
                     u"'__FUNCTION__'", u"'self'", u"'super'", u"'dynamicType'", 
                     u"'!'", u"'Type'", u"'Protocol'", u"'new'", u"'Self'", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"'..'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"Operator", u"OperatorHead", 
                      u"OperatorCharacter", u"DotOperatorHead", u"Identifier", 
                      u"ImplicitParameterName", u"BinaryLiteral", u"OctalLiteral", 
                      u"DecimalLiteral", u"HexadecimalLiteral", u"FloatingPointLiteral", 
                      u"StringLiteral", u"EscapedCharacter", u"WS", u"BlockComment", 
                      u"LineComment" ]

    RULE_topLevel = 0
    RULE_statement = 1
    RULE_statements = 2
    RULE_loopStatement = 3
    RULE_forStatement = 4
    RULE_forInit = 5
    RULE_forInStatement = 6
    RULE_whileStatement = 7
    RULE_whileCondition = 8
    RULE_doWhileStatement = 9
    RULE_branchStatement = 10
    RULE_ifStatement = 11
    RULE_ifCondition = 12
    RULE_elseClause = 13
    RULE_switchStatement = 14
    RULE_switchCases = 15
    RULE_switchCase = 16
    RULE_caseLabel = 17
    RULE_caseItemList = 18
    RULE_defaultLabel = 19
    RULE_guardClause = 20
    RULE_guardExpression = 21
    RULE_labeledStatement = 22
    RULE_statementLabel = 23
    RULE_labelName = 24
    RULE_controlTransferStatement = 25
    RULE_breakStatement = 26
    RULE_continueStatement = 27
    RULE_fallthroughStatement = 28
    RULE_returnStatement = 29
    RULE_genericParameterClause = 30
    RULE_genericParameterList = 31
    RULE_genericParameter = 32
    RULE_requirementClause = 33
    RULE_requirementList = 34
    RULE_requirement = 35
    RULE_conformanceRequirement = 36
    RULE_sameTypeRequirement = 37
    RULE_genericArgumentClause = 38
    RULE_genericArgumentList = 39
    RULE_genericArgument = 40
    RULE_declaration = 41
    RULE_declarations = 42
    RULE_declarationSpecifiers = 43
    RULE_declarationSpecifier = 44
    RULE_codeBlock = 45
    RULE_importDeclaration = 46
    RULE_importKind = 47
    RULE_importPath = 48
    RULE_importPathIdentifier = 49
    RULE_constantDeclaration = 50
    RULE_patternInitializerList = 51
    RULE_patternInitializer = 52
    RULE_initializer = 53
    RULE_variableDeclaration = 54
    RULE_variableDeclarationHead = 55
    RULE_variableName = 56
    RULE_getterSetterBlock = 57
    RULE_getterClause = 58
    RULE_setterClause = 59
    RULE_setterName = 60
    RULE_getterSetterKeywordBlock = 61
    RULE_getterKeywordClause = 62
    RULE_setterKeywordClause = 63
    RULE_willSetDidSetBlock = 64
    RULE_willSetClause = 65
    RULE_didSetClause = 66
    RULE_typealiasDeclaration = 67
    RULE_typealiasHead = 68
    RULE_typealiasName = 69
    RULE_typealiasAssignment = 70
    RULE_functionDeclaration = 71
    RULE_functionHead = 72
    RULE_functionName = 73
    RULE_functionSignature = 74
    RULE_functionResult = 75
    RULE_functionBody = 76
    RULE_parameterClauses = 77
    RULE_parameterClause = 78
    RULE_parameterList = 79
    RULE_parameter = 80
    RULE_parameterName = 81
    RULE_localParameterName = 82
    RULE_defaultArgumentClause = 83
    RULE_enumDeclaration = 84
    RULE_enumDef = 85
    RULE_unionStyleEnum = 86
    RULE_unionStyleEnumMembers = 87
    RULE_unionStyleEnumMember = 88
    RULE_unionStyleEnumCaseClause = 89
    RULE_unionStyleEnumCaseList = 90
    RULE_unionStyleEnumCase = 91
    RULE_enumName = 92
    RULE_enumCaseName = 93
    RULE_rawValueStyleEnum = 94
    RULE_rawValueStyleEnumMembers = 95
    RULE_rawValueStyleEnumMember = 96
    RULE_rawValueStyleEnumCaseClause = 97
    RULE_rawValueStyleEnumCaseList = 98
    RULE_rawValueStyleEnumCase = 99
    RULE_rawValueAssignment = 100
    RULE_structDeclaration = 101
    RULE_structName = 102
    RULE_structBody = 103
    RULE_classDeclaration = 104
    RULE_className = 105
    RULE_classBody = 106
    RULE_protocolDeclaration = 107
    RULE_protocolName = 108
    RULE_protocolBody = 109
    RULE_protocolMemberDeclaration = 110
    RULE_protocolMemberDeclarations = 111
    RULE_protocolPropertyDeclaration = 112
    RULE_protocolMethodDeclaration = 113
    RULE_protocolInitializerDeclaration = 114
    RULE_protocolSubscriptDeclaration = 115
    RULE_protocolAssociatedTypeDeclaration = 116
    RULE_initializerDeclaration = 117
    RULE_initializerHead = 118
    RULE_initializerBody = 119
    RULE_deinitializerDeclaration = 120
    RULE_extensionDeclaration = 121
    RULE_extensionBody = 122
    RULE_subscriptDeclaration = 123
    RULE_subscriptHead = 124
    RULE_subscriptResult = 125
    RULE_operatorDeclaration = 126
    RULE_prefixOperatorDeclaration = 127
    RULE_postfixOperatorDeclaration = 128
    RULE_infixOperatorDeclaration = 129
    RULE_infixOperatorAttributes = 130
    RULE_precedenceClause = 131
    RULE_precedenceLevel = 132
    RULE_associativityClause = 133
    RULE_associativity = 134
    RULE_pattern = 135
    RULE_wildcardPattern = 136
    RULE_identifierPattern = 137
    RULE_valueBindingPattern = 138
    RULE_tuplePattern = 139
    RULE_tuplePatternElementList = 140
    RULE_tuplePatternElement = 141
    RULE_enumCasePattern = 142
    RULE_typeCastingPattern = 143
    RULE_isPattern = 144
    RULE_asPattern = 145
    RULE_expressionPattern = 146
    RULE_attribute = 147
    RULE_attributeName = 148
    RULE_attributeArgumentClause = 149
    RULE_attributes = 150
    RULE_balancedTokens = 151
    RULE_balancedToken = 152
    RULE_expressionList = 153
    RULE_expression = 154
    RULE_prefixExpression = 155
    RULE_inOutExpression = 156
    RULE_binaryExpression = 157
    RULE_assignmentOperator = 158
    RULE_conditionalOperator = 159
    RULE_typeCastingOperator = 160
    RULE_primaryExpression = 161
    RULE_literalExpression = 162
    RULE_arrayLiteral = 163
    RULE_arrayLiteralItems = 164
    RULE_arrayLiteralItem = 165
    RULE_dictionaryLiteral = 166
    RULE_dictionaryLiteralItems = 167
    RULE_dictionaryLiteralItem = 168
    RULE_selfExpression = 169
    RULE_superclassExpression = 170
    RULE_superclassMethodExpression = 171
    RULE_superclassSubscriptExpression = 172
    RULE_superclassInitializerExpression = 173
    RULE_closureExpression = 174
    RULE_closureSignature = 175
    RULE_captureList = 176
    RULE_captureSpecifier = 177
    RULE_implicitMemberExpression = 178
    RULE_parenthesizedExpression = 179
    RULE_expressionElementList = 180
    RULE_expressionElement = 181
    RULE_wildcardExpression = 182
    RULE_postfixExpression = 183
    RULE_operator = 184
    RULE_binaryOperator = 185
    RULE_prefixOperator = 186
    RULE_postfixOperator = 187
    RULE_sType = 188
    RULE_typeAnnotation = 189
    RULE_typeIdentifier = 190
    RULE_typeName = 191
    RULE_tupleType = 192
    RULE_tupleTypeBody = 193
    RULE_tupleTypeElementList = 194
    RULE_tupleTypeElement = 195
    RULE_elementName = 196
    RULE_protocolCompositionType = 197
    RULE_protocolIdentifierList = 198
    RULE_protocolIdentifier = 199
    RULE_metatypeType = 200
    RULE_typeInheritanceClause = 201
    RULE_typeInheritanceList = 202
    RULE_identifier = 203
    RULE_keyword = 204
    RULE_contextSensitiveKeyword = 205
    RULE_identifierList = 206
    RULE_literal = 207
    RULE_integerLiteral = 208

    ruleNames =  [ "topLevel", "statement", "statements", "loopStatement", 
                   "forStatement", "forInit", "forInStatement", "whileStatement", 
                   "whileCondition", "doWhileStatement", "branchStatement", 
                   "ifStatement", "ifCondition", "elseClause", "switchStatement", 
                   "switchCases", "switchCase", "caseLabel", "caseItemList", 
                   "defaultLabel", "guardClause", "guardExpression", "labeledStatement", 
                   "statementLabel", "labelName", "controlTransferStatement", 
                   "breakStatement", "continueStatement", "fallthroughStatement", 
                   "returnStatement", "genericParameterClause", "genericParameterList", 
                   "genericParameter", "requirementClause", "requirementList", 
                   "requirement", "conformanceRequirement", "sameTypeRequirement", 
                   "genericArgumentClause", "genericArgumentList", "genericArgument", 
                   "declaration", "declarations", "declarationSpecifiers", 
                   "declarationSpecifier", "codeBlock", "importDeclaration", 
                   "importKind", "importPath", "importPathIdentifier", "constantDeclaration", 
                   "patternInitializerList", "patternInitializer", "initializer", 
                   "variableDeclaration", "variableDeclarationHead", "variableName", 
                   "getterSetterBlock", "getterClause", "setterClause", 
                   "setterName", "getterSetterKeywordBlock", "getterKeywordClause", 
                   "setterKeywordClause", "willSetDidSetBlock", "willSetClause", 
                   "didSetClause", "typealiasDeclaration", "typealiasHead", 
                   "typealiasName", "typealiasAssignment", "functionDeclaration", 
                   "functionHead", "functionName", "functionSignature", 
                   "functionResult", "functionBody", "parameterClauses", 
                   "parameterClause", "parameterList", "parameter", "parameterName", 
                   "localParameterName", "defaultArgumentClause", "enumDeclaration", 
                   "enumDef", "unionStyleEnum", "unionStyleEnumMembers", 
                   "unionStyleEnumMember", "unionStyleEnumCaseClause", "unionStyleEnumCaseList", 
                   "unionStyleEnumCase", "enumName", "enumCaseName", "rawValueStyleEnum", 
                   "rawValueStyleEnumMembers", "rawValueStyleEnumMember", 
                   "rawValueStyleEnumCaseClause", "rawValueStyleEnumCaseList", 
                   "rawValueStyleEnumCase", "rawValueAssignment", "structDeclaration", 
                   "structName", "structBody", "classDeclaration", "className", 
                   "classBody", "protocolDeclaration", "protocolName", "protocolBody", 
                   "protocolMemberDeclaration", "protocolMemberDeclarations", 
                   "protocolPropertyDeclaration", "protocolMethodDeclaration", 
                   "protocolInitializerDeclaration", "protocolSubscriptDeclaration", 
                   "protocolAssociatedTypeDeclaration", "initializerDeclaration", 
                   "initializerHead", "initializerBody", "deinitializerDeclaration", 
                   "extensionDeclaration", "extensionBody", "subscriptDeclaration", 
                   "subscriptHead", "subscriptResult", "operatorDeclaration", 
                   "prefixOperatorDeclaration", "postfixOperatorDeclaration", 
                   "infixOperatorDeclaration", "infixOperatorAttributes", 
                   "precedenceClause", "precedenceLevel", "associativityClause", 
                   "associativity", "pattern", "wildcardPattern", "identifierPattern", 
                   "valueBindingPattern", "tuplePattern", "tuplePatternElementList", 
                   "tuplePatternElement", "enumCasePattern", "typeCastingPattern", 
                   "isPattern", "asPattern", "expressionPattern", "attribute", 
                   "attributeName", "attributeArgumentClause", "attributes", 
                   "balancedTokens", "balancedToken", "expressionList", 
                   "expression", "prefixExpression", "inOutExpression", 
                   "binaryExpression", "assignmentOperator", "conditionalOperator", 
                   "typeCastingOperator", "primaryExpression", "literalExpression", 
                   "arrayLiteral", "arrayLiteralItems", "arrayLiteralItem", 
                   "dictionaryLiteral", "dictionaryLiteralItems", "dictionaryLiteralItem", 
                   "selfExpression", "superclassExpression", "superclassMethodExpression", 
                   "superclassSubscriptExpression", "superclassInitializerExpression", 
                   "closureExpression", "closureSignature", "captureList", 
                   "captureSpecifier", "implicitMemberExpression", "parenthesizedExpression", 
                   "expressionElementList", "expressionElement", "wildcardExpression", 
                   "postfixExpression", "operator", "binaryOperator", "prefixOperator", 
                   "postfixOperator", "sType", "typeAnnotation", "typeIdentifier", 
                   "typeName", "tupleType", "tupleTypeBody", "tupleTypeElementList", 
                   "tupleTypeElement", "elementName", "protocolCompositionType", 
                   "protocolIdentifierList", "protocolIdentifier", "metatypeType", 
                   "typeInheritanceClause", "typeInheritanceList", "identifier", 
                   "keyword", "contextSensitiveKeyword", "identifierList", 
                   "literal", "integerLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    Operator=86
    OperatorHead=87
    OperatorCharacter=88
    DotOperatorHead=89
    Identifier=90
    ImplicitParameterName=91
    BinaryLiteral=92
    OctalLiteral=93
    DecimalLiteral=94
    HexadecimalLiteral=95
    FloatingPointLiteral=96
    StringLiteral=97
    EscapedCharacter=98
    WS=99
    BlockComment=100
    LineComment=101

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class TopLevelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SwiftParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.StatementContext)
            else:
                return self.getTypedRuleContext(SwiftParser.StatementContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SwiftParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_topLevel

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTopLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTopLevel(self)




    def topLevel(self):

        localctx = SwiftParser.TopLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_topLevel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__1) | (1 << SwiftParser.T__2) | (1 << SwiftParser.T__5) | (1 << SwiftParser.T__6) | (1 << SwiftParser.T__7) | (1 << SwiftParser.T__9) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__17) | (1 << SwiftParser.T__18) | (1 << SwiftParser.T__19) | (1 << SwiftParser.T__20) | (1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__33) | (1 << SwiftParser.T__34) | (1 << SwiftParser.T__35) | (1 << SwiftParser.T__36) | (1 << SwiftParser.T__37) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__39) | (1 << SwiftParser.T__41) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__52) | (1 << SwiftParser.T__53) | (1 << SwiftParser.T__54) | (1 << SwiftParser.T__55) | (1 << SwiftParser.T__56) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__68 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                self.state = 420
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 418
                    self.statement()
                    pass

                elif la_ == 2:
                    self.state = 419
                    self.expression()
                    pass


                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 425
            self.match(SwiftParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(SwiftParser.LoopStatementContext,0)


        def branchStatement(self):
            return self.getTypedRuleContext(SwiftParser.BranchStatementContext,0)


        def labeledStatement(self):
            return self.getTypedRuleContext(SwiftParser.LabeledStatementContext,0)


        def controlTransferStatement(self):
            return self.getTypedRuleContext(SwiftParser.ControlTransferStatementContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SwiftParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 448
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.expression()
                self.state = 429
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 428
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 431
                self.declaration()
                self.state = 433
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 432
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.loopStatement()
                self.state = 437
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 436
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 439
                self.branchStatement()
                self.state = 441
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 440
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 443
                self.labeledStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 444
                self.controlTransferStatement()
                self.state = 446
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 445
                    self.match(SwiftParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.StatementContext)
            else:
                return self.getTypedRuleContext(SwiftParser.StatementContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitStatements(self)




    def statements(self):

        localctx = SwiftParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 450
                self.statement()
                self.state = 453 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__1) | (1 << SwiftParser.T__2) | (1 << SwiftParser.T__5) | (1 << SwiftParser.T__6) | (1 << SwiftParser.T__7) | (1 << SwiftParser.T__9) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__17) | (1 << SwiftParser.T__18) | (1 << SwiftParser.T__19) | (1 << SwiftParser.T__20) | (1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__33) | (1 << SwiftParser.T__34) | (1 << SwiftParser.T__35) | (1 << SwiftParser.T__36) | (1 << SwiftParser.T__37) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__39) | (1 << SwiftParser.T__41) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__52) | (1 << SwiftParser.T__53) | (1 << SwiftParser.T__54) | (1 << SwiftParser.T__55) | (1 << SwiftParser.T__56) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__68 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forStatement(self):
            return self.getTypedRuleContext(SwiftParser.ForStatementContext,0)


        def forInStatement(self):
            return self.getTypedRuleContext(SwiftParser.ForInStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SwiftParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SwiftParser.DoWhileStatementContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = SwiftParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loopStatement)
        try:
            self.state = 459
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.forStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.forInStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 458
                self.doWhileStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def forInit(self):
            return self.getTypedRuleContext(SwiftParser.ForInitContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SwiftParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SwiftParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.state = 489
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.match(SwiftParser.T__1)
                self.state = 463
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__68 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 462
                    self.forInit()


                self.state = 465
                self.match(SwiftParser.T__0)
                self.state = 467
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 466
                    self.expression()


                self.state = 469
                self.match(SwiftParser.T__0)
                self.state = 471
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 470
                    self.expression()


                self.state = 473
                self.codeBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.match(SwiftParser.T__1)
                self.state = 475
                self.match(SwiftParser.T__2)
                self.state = 477
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__68 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 476
                    self.forInit()


                self.state = 479
                self.match(SwiftParser.T__0)
                self.state = 481
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 480
                    self.expression()


                self.state = 483
                self.match(SwiftParser.T__0)
                self.state = 485
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 484
                    self.expression()


                self.state = 487
                self.match(SwiftParser.T__3)
                self.state = 488
                self.codeBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.VariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = SwiftParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_forInit)
        try:
            self.state = 493
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.variableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(SwiftParser.PatternContext,0)


        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_forInStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterForInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitForInStatement(self)




    def forInStatement(self):

        localctx = SwiftParser.ForInStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_forInStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(SwiftParser.T__1)
            self.state = 496
            self.pattern(0)
            self.state = 497
            self.match(SwiftParser.T__4)
            self.state = 498
            self.expression()
            self.state = 499
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileCondition(self):
            return self.getTypedRuleContext(SwiftParser.WhileConditionContext,0)


        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SwiftParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(SwiftParser.T__5)
            self.state = 502
            self.whileCondition()
            self.state = 503
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_whileCondition

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterWhileCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitWhileCondition(self)




    def whileCondition(self):

        localctx = SwiftParser.WhileConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_whileCondition)
        try:
            self.state = 507
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def whileCondition(self):
            return self.getTypedRuleContext(SwiftParser.WhileConditionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SwiftParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(SwiftParser.T__6)
            self.state = 510
            self.codeBlock()
            self.state = 511
            self.match(SwiftParser.T__5)
            self.state = 512
            self.whileCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BranchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SwiftParser.IfStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(SwiftParser.SwitchStatementContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_branchStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterBranchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitBranchStatement(self)




    def branchStatement(self):

        localctx = SwiftParser.BranchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_branchStatement)
        try:
            self.state = 516
            token = self._input.LA(1)
            if token in [SwiftParser.T__7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self.ifStatement()

            elif token in [SwiftParser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.switchStatement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifCondition(self):
            return self.getTypedRuleContext(SwiftParser.IfConditionContext,0)


        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def elseClause(self):
            return self.getTypedRuleContext(SwiftParser.ElseClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SwiftParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(SwiftParser.T__7)
            self.state = 519
            self.ifCondition()
            self.state = 520
            self.codeBlock()
            self.state = 522
            _la = self._input.LA(1)
            if _la==SwiftParser.T__8:
                self.state = 521
                self.elseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_ifCondition

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterIfCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitIfCondition(self)




    def ifCondition(self):

        localctx = SwiftParser.IfConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_ifCondition)
        try:
            self.state = 526
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SwiftParser.IfStatementContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_elseClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitElseClause(self)




    def elseClause(self):

        localctx = SwiftParser.ElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_elseClause)
        try:
            self.state = 532
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.match(SwiftParser.T__8)
                self.state = 529
                self.codeBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.match(SwiftParser.T__8)
                self.state = 531
                self.ifStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def switchCases(self):
            return self.getTypedRuleContext(SwiftParser.SwitchCasesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = SwiftParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(SwiftParser.T__9)
            self.state = 535
            self.expression()
            self.state = 536
            self.match(SwiftParser.T__10)
            self.state = 538
            _la = self._input.LA(1)
            if _la==SwiftParser.T__12 or _la==SwiftParser.T__15:
                self.state = 537
                self.switchCases()


            self.state = 540
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchCasesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchCase(self):
            return self.getTypedRuleContext(SwiftParser.SwitchCaseContext,0)


        def switchCases(self):
            return self.getTypedRuleContext(SwiftParser.SwitchCasesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_switchCases

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSwitchCases(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSwitchCases(self)




    def switchCases(self):

        localctx = SwiftParser.SwitchCasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_switchCases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.switchCase()
            self.state = 544
            _la = self._input.LA(1)
            if _la==SwiftParser.T__12 or _la==SwiftParser.T__15:
                self.state = 543
                self.switchCases()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseLabel(self):
            return self.getTypedRuleContext(SwiftParser.CaseLabelContext,0)


        def statements(self):
            return self.getTypedRuleContext(SwiftParser.StatementsContext,0)


        def defaultLabel(self):
            return self.getTypedRuleContext(SwiftParser.DefaultLabelContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_switchCase

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSwitchCase(self)




    def switchCase(self):

        localctx = SwiftParser.SwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_switchCase)
        try:
            self.state = 558
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.caseLabel()
                self.state = 547
                self.statements()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.defaultLabel()
                self.state = 550
                self.statements()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 552
                self.caseLabel()
                self.state = 553
                self.match(SwiftParser.T__0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 555
                self.defaultLabel()
                self.state = 556
                self.match(SwiftParser.T__0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseItemList(self):
            return self.getTypedRuleContext(SwiftParser.CaseItemListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_caseLabel

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterCaseLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitCaseLabel(self)




    def caseLabel(self):

        localctx = SwiftParser.CaseLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_caseLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(SwiftParser.T__12)
            self.state = 561
            self.caseItemList()
            self.state = 562
            self.match(SwiftParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.PatternContext)
            else:
                return self.getTypedRuleContext(SwiftParser.PatternContext,i)


        def caseItemList(self):
            return self.getTypedRuleContext(SwiftParser.CaseItemListContext,0)


        def guardClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.GuardClauseContext)
            else:
                return self.getTypedRuleContext(SwiftParser.GuardClauseContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_caseItemList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterCaseItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitCaseItemList(self)




    def caseItemList(self):

        localctx = SwiftParser.CaseItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_caseItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.pattern(0)
            self.state = 566
            _la = self._input.LA(1)
            if _la==SwiftParser.T__16:
                self.state = 565
                self.guardClause()


            self.state = 568
            self.pattern(0)
            self.state = 570
            _la = self._input.LA(1)
            if _la==SwiftParser.T__16:
                self.state = 569
                self.guardClause()


            self.state = 572
            self.match(SwiftParser.T__14)
            self.state = 573
            self.caseItemList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_defaultLabel

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDefaultLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDefaultLabel(self)




    def defaultLabel(self):

        localctx = SwiftParser.DefaultLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_defaultLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(SwiftParser.T__15)
            self.state = 576
            self.match(SwiftParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def guardExpression(self):
            return self.getTypedRuleContext(SwiftParser.GuardExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_guardClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGuardClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGuardClause(self)




    def guardClause(self):

        localctx = SwiftParser.GuardClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_guardClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(SwiftParser.T__16)
            self.state = 579
            self.guardExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_guardExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGuardExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGuardExpression(self)




    def guardExpression(self):

        localctx = SwiftParser.GuardExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_guardExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementLabel(self):
            return self.getTypedRuleContext(SwiftParser.StatementLabelContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(SwiftParser.LoopStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(SwiftParser.SwitchStatementContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = SwiftParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_labeledStatement)
        try:
            self.state = 589
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.statementLabel()
                self.state = 584
                self.loopStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.statementLabel()
                self.state = 587
                self.switchStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(SwiftParser.LabelNameContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_statementLabel

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterStatementLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitStatementLabel(self)




    def statementLabel(self):

        localctx = SwiftParser.StatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_statementLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.labelName()
            self.state = 592
            self.match(SwiftParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_labelName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterLabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitLabelName(self)




    def labelName(self):

        localctx = SwiftParser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_labelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlTransferStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def breakStatement(self):
            return self.getTypedRuleContext(SwiftParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SwiftParser.ContinueStatementContext,0)


        def fallthroughStatement(self):
            return self.getTypedRuleContext(SwiftParser.FallthroughStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SwiftParser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_controlTransferStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterControlTransferStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitControlTransferStatement(self)




    def controlTransferStatement(self):

        localctx = SwiftParser.ControlTransferStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_controlTransferStatement)
        try:
            self.state = 600
            token = self._input.LA(1)
            if token in [SwiftParser.T__17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 596
                self.breakStatement()

            elif token in [SwiftParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.continueStatement()

            elif token in [SwiftParser.T__19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 598
                self.fallthroughStatement()

            elif token in [SwiftParser.T__20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 599
                self.returnStatement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(SwiftParser.LabelNameContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SwiftParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(SwiftParser.T__17)
            self.state = 604
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 603
                self.labelName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labelName(self):
            return self.getTypedRuleContext(SwiftParser.LabelNameContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SwiftParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(SwiftParser.T__18)
            self.state = 608
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 607
                self.labelName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FallthroughStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_fallthroughStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFallthroughStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFallthroughStatement(self)




    def fallthroughStatement(self):

        localctx = SwiftParser.FallthroughStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fallthroughStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(SwiftParser.T__19)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SwiftParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(SwiftParser.T__20)
            self.state = 614
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 613
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParameterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericParameterList(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterListContext,0)


        def requirementClause(self):
            return self.getTypedRuleContext(SwiftParser.RequirementClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_genericParameterClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGenericParameterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGenericParameterClause(self)




    def genericParameterClause(self):

        localctx = SwiftParser.GenericParameterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_genericParameterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(SwiftParser.T__21)
            self.state = 617
            self.genericParameterList()
            self.state = 619
            _la = self._input.LA(1)
            if _la==SwiftParser.T__16:
                self.state = 618
                self.requirementClause()


            self.state = 621
            self.match(SwiftParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericParameter(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterContext,0)


        def genericParameterList(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_genericParameterList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGenericParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGenericParameterList(self)




    def genericParameterList(self):

        localctx = SwiftParser.GenericParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_genericParameterList)
        try:
            self.state = 628
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 623
                self.genericParameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 624
                self.genericParameter()
                self.state = 625
                self.match(SwiftParser.T__14)
                self.state = 626
                self.genericParameterList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SwiftParser.TypeNameContext,0)


        def typeIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,0)


        def protocolCompositionType(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolCompositionTypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_genericParameter

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGenericParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGenericParameter(self)




    def genericParameter(self):

        localctx = SwiftParser.GenericParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_genericParameter)
        try:
            self.state = 639
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.typeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.typeName()
                self.state = 632
                self.match(SwiftParser.T__13)
                self.state = 633
                self.typeIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 635
                self.typeName()
                self.state = 636
                self.match(SwiftParser.T__13)
                self.state = 637
                self.protocolCompositionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequirementClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requirementList(self):
            return self.getTypedRuleContext(SwiftParser.RequirementListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_requirementClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRequirementClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRequirementClause(self)




    def requirementClause(self):

        localctx = SwiftParser.RequirementClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_requirementClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(SwiftParser.T__16)
            self.state = 642
            self.requirementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequirementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requirement(self):
            return self.getTypedRuleContext(SwiftParser.RequirementContext,0)


        def requirementList(self):
            return self.getTypedRuleContext(SwiftParser.RequirementListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_requirementList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRequirementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRequirementList(self)




    def requirementList(self):

        localctx = SwiftParser.RequirementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_requirementList)
        try:
            self.state = 649
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.requirement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.requirement()
                self.state = 646
                self.match(SwiftParser.T__14)
                self.state = 647
                self.requirementList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conformanceRequirement(self):
            return self.getTypedRuleContext(SwiftParser.ConformanceRequirementContext,0)


        def sameTypeRequirement(self):
            return self.getTypedRuleContext(SwiftParser.SameTypeRequirementContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = SwiftParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_requirement)
        try:
            self.state = 653
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.conformanceRequirement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 652
                self.sameTypeRequirement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConformanceRequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.TypeIdentifierContext)
            else:
                return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,i)


        def protocolCompositionType(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolCompositionTypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_conformanceRequirement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterConformanceRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitConformanceRequirement(self)




    def conformanceRequirement(self):

        localctx = SwiftParser.ConformanceRequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_conformanceRequirement)
        try:
            self.state = 663
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.typeIdentifier()
                self.state = 656
                self.match(SwiftParser.T__13)
                self.state = 657
                self.typeIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.typeIdentifier()
                self.state = 660
                self.match(SwiftParser.T__13)
                self.state = 661
                self.protocolCompositionType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SameTypeRequirementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.TypeIdentifierContext)
            else:
                return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_sameTypeRequirement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSameTypeRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSameTypeRequirement(self)




    def sameTypeRequirement(self):

        localctx = SwiftParser.SameTypeRequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_sameTypeRequirement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.typeIdentifier()
            self.state = 666
            self.match(SwiftParser.T__23)
            self.state = 667
            self.typeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericArgumentClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericArgumentList(self):
            return self.getTypedRuleContext(SwiftParser.GenericArgumentListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_genericArgumentClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGenericArgumentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGenericArgumentClause(self)




    def genericArgumentClause(self):

        localctx = SwiftParser.GenericArgumentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_genericArgumentClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(SwiftParser.T__21)
            self.state = 670
            self.genericArgumentList()
            self.state = 671
            self.match(SwiftParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.GenericArgumentContext)
            else:
                return self.getTypedRuleContext(SwiftParser.GenericArgumentContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_genericArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGenericArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGenericArgumentList(self)




    def genericArgumentList(self):

        localctx = SwiftParser.GenericArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_genericArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.genericArgument()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SwiftParser.T__14:
                self.state = 674
                self.match(SwiftParser.T__14)
                self.state = 675
                self.genericArgument()
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_genericArgument

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGenericArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGenericArgument(self)




    def genericArgument(self):

        localctx = SwiftParser.GenericArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_genericArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.sType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ImportDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ConstantDeclarationContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.VariableDeclarationContext,0)


        def typealiasDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.TypealiasDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.FunctionDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.EnumDeclarationContext,0)


        def structDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.StructDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ClassDeclarationContext,0)


        def protocolDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolDeclarationContext,0)


        def initializerDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.InitializerDeclarationContext,0)


        def deinitializerDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.DeinitializerDeclarationContext,0)


        def extensionDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ExtensionDeclarationContext,0)


        def subscriptDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.SubscriptDeclarationContext,0)


        def operatorDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.OperatorDeclarationContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = SwiftParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_declaration)
        try:
            self.state = 739
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self.importDeclaration()
                self.state = 685
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 684
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.constantDeclaration()
                self.state = 689
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 691
                self.variableDeclaration()
                self.state = 693
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 692
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 695
                self.typealiasDeclaration()
                self.state = 697
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 696
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 699
                self.functionDeclaration()
                self.state = 701
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 700
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 703
                self.enumDeclaration()
                self.state = 705
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 704
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 707
                self.structDeclaration()
                self.state = 709
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 708
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 711
                self.classDeclaration()
                self.state = 713
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 712
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 715
                self.protocolDeclaration()
                self.state = 717
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 716
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 719
                self.initializerDeclaration()
                self.state = 721
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 720
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 723
                self.deinitializerDeclaration()
                self.state = 725
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 724
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 727
                self.extensionDeclaration()
                self.state = 729
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 728
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 731
                self.subscriptDeclaration()
                self.state = 733
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 735
                self.operatorDeclaration()
                self.state = 737
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 736
                    self.match(SwiftParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationContext,0)


        def declarations(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_declarations

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDeclarations(self)




    def declarations(self):

        localctx = SwiftParser.DeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_declarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.declaration()
            self.state = 743
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SwiftParser.T__24 - 25)) | (1 << (SwiftParser.T__25 - 25)) | (1 << (SwiftParser.T__26 - 25)) | (1 << (SwiftParser.T__27 - 25)) | (1 << (SwiftParser.T__28 - 25)) | (1 << (SwiftParser.T__29 - 25)) | (1 << (SwiftParser.T__30 - 25)) | (1 << (SwiftParser.T__31 - 25)) | (1 << (SwiftParser.T__32 - 25)) | (1 << (SwiftParser.T__33 - 25)) | (1 << (SwiftParser.T__34 - 25)) | (1 << (SwiftParser.T__35 - 25)) | (1 << (SwiftParser.T__36 - 25)) | (1 << (SwiftParser.T__37 - 25)) | (1 << (SwiftParser.T__38 - 25)) | (1 << (SwiftParser.T__39 - 25)) | (1 << (SwiftParser.T__41 - 25)) | (1 << (SwiftParser.T__52 - 25)) | (1 << (SwiftParser.T__53 - 25)) | (1 << (SwiftParser.T__54 - 25)) | (1 << (SwiftParser.T__55 - 25)) | (1 << (SwiftParser.T__56 - 25)) | (1 << (SwiftParser.T__57 - 25)) | (1 << (SwiftParser.T__68 - 25)))) != 0):
                self.state = 742
                self.declarations()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationSpecifierContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = SwiftParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_declarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.declarationSpecifier()
            self.state = 747
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32))) != 0):
                self.state = 746
                self.declarationSpecifiers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = SwiftParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_declarationSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(SwiftParser.StatementsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_codeBlock

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterCodeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitCodeBlock(self)




    def codeBlock(self):

        localctx = SwiftParser.CodeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_codeBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(SwiftParser.T__10)
            self.state = 753
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__1) | (1 << SwiftParser.T__2) | (1 << SwiftParser.T__5) | (1 << SwiftParser.T__6) | (1 << SwiftParser.T__7) | (1 << SwiftParser.T__9) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__17) | (1 << SwiftParser.T__18) | (1 << SwiftParser.T__19) | (1 << SwiftParser.T__20) | (1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__33) | (1 << SwiftParser.T__34) | (1 << SwiftParser.T__35) | (1 << SwiftParser.T__36) | (1 << SwiftParser.T__37) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__39) | (1 << SwiftParser.T__41) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__52) | (1 << SwiftParser.T__53) | (1 << SwiftParser.T__54) | (1 << SwiftParser.T__55) | (1 << SwiftParser.T__56) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__68 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                self.state = 752
                self.statements()


            self.state = 755
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SwiftParser.ImportPathContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def importKind(self):
            return self.getTypedRuleContext(SwiftParser.ImportKindContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = SwiftParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 757
                self.attributes()


            self.state = 760
            self.match(SwiftParser.T__33)
            self.state = 762
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__24) | (1 << SwiftParser.T__34) | (1 << SwiftParser.T__35) | (1 << SwiftParser.T__36) | (1 << SwiftParser.T__37) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__39))) != 0):
                self.state = 761
                self.importKind()


            self.state = 764
            self.importPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportKindContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_importKind

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterImportKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitImportKind(self)




    def importKind(self):

        localctx = SwiftParser.ImportKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_importKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__24) | (1 << SwiftParser.T__34) | (1 << SwiftParser.T__35) | (1 << SwiftParser.T__36) | (1 << SwiftParser.T__37) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__39))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportPathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPathIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.ImportPathIdentifierContext,0)


        def importPath(self):
            return self.getTypedRuleContext(SwiftParser.ImportPathContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitImportPath(self)




    def importPath(self):

        localctx = SwiftParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_importPath)
        try:
            self.state = 773
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.importPathIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.importPathIdentifier()
                self.state = 770
                self.match(SwiftParser.T__40)
                self.state = 771
                self.importPath()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportPathIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def operator(self):
            return self.getTypedRuleContext(SwiftParser.OperatorContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_importPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterImportPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitImportPathIdentifier(self)




    def importPathIdentifier(self):

        localctx = SwiftParser.ImportPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_importPathIdentifier)
        try:
            self.state = 777
            token = self._input.LA(1)
            if token in [SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65, SwiftParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.identifier()

            elif token in [SwiftParser.Operator]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.operator()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patternInitializerList(self):
            return self.getTypedRuleContext(SwiftParser.PatternInitializerListContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitConstantDeclaration(self)




    def constantDeclaration(self):

        localctx = SwiftParser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_constantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 779
                self.attributes()


            self.state = 783
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32))) != 0):
                self.state = 782
                self.declarationSpecifiers()


            self.state = 785
            self.match(SwiftParser.T__41)
            self.state = 786
            self.patternInitializerList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternInitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patternInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.PatternInitializerContext)
            else:
                return self.getTypedRuleContext(SwiftParser.PatternInitializerContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_patternInitializerList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPatternInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPatternInitializerList(self)




    def patternInitializerList(self):

        localctx = SwiftParser.PatternInitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_patternInitializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.patternInitializer()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SwiftParser.T__14:
                self.state = 789
                self.match(SwiftParser.T__14)
                self.state = 790
                self.patternInitializer()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(SwiftParser.PatternContext,0)


        def initializer(self):
            return self.getTypedRuleContext(SwiftParser.InitializerContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_patternInitializer

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPatternInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPatternInitializer(self)




    def patternInitializer(self):

        localctx = SwiftParser.PatternInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_patternInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.pattern(0)
            self.state = 798
            _la = self._input.LA(1)
            if _la==SwiftParser.T__42:
                self.state = 797
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = SwiftParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_initializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(SwiftParser.T__42)
            self.state = 801
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationHead(self):
            return self.getTypedRuleContext(SwiftParser.VariableDeclarationHeadContext,0)


        def patternInitializerList(self):
            return self.getTypedRuleContext(SwiftParser.PatternInitializerListContext,0)


        def variableName(self):
            return self.getTypedRuleContext(SwiftParser.VariableNameContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SwiftParser.TypeAnnotationContext,0)


        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def getterSetterBlock(self):
            return self.getTypedRuleContext(SwiftParser.GetterSetterBlockContext,0)


        def getterSetterKeywordBlock(self):
            return self.getTypedRuleContext(SwiftParser.GetterSetterKeywordBlockContext,0)


        def willSetDidSetBlock(self):
            return self.getTypedRuleContext(SwiftParser.WillSetDidSetBlockContext,0)


        def initializer(self):
            return self.getTypedRuleContext(SwiftParser.InitializerContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = SwiftParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 829
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.variableDeclarationHead()
                self.state = 804
                self.patternInitializerList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.variableDeclarationHead()
                self.state = 807
                self.variableName()
                self.state = 808
                self.typeAnnotation()
                self.state = 809
                self.codeBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 811
                self.variableDeclarationHead()
                self.state = 812
                self.variableName()
                self.state = 813
                self.typeAnnotation()
                self.state = 814
                self.getterSetterBlock()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 816
                self.variableDeclarationHead()
                self.state = 817
                self.variableName()
                self.state = 818
                self.typeAnnotation()
                self.state = 819
                self.getterSetterKeywordBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 821
                self.variableDeclarationHead()
                self.state = 822
                self.variableName()
                self.state = 823
                self.typeAnnotation()
                self.state = 825
                _la = self._input.LA(1)
                if _la==SwiftParser.T__42:
                    self.state = 824
                    self.initializer()


                self.state = 827
                self.willSetDidSetBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_variableDeclarationHead

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterVariableDeclarationHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitVariableDeclarationHead(self)




    def variableDeclarationHead(self):

        localctx = SwiftParser.VariableDeclarationHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_variableDeclarationHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 831
                self.attributes()


            self.state = 835
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32))) != 0):
                self.state = 834
                self.declarationSpecifiers()


            self.state = 837
            self.match(SwiftParser.T__38)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_variableName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterVariableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitVariableName(self)




    def variableName(self):

        localctx = SwiftParser.VariableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_variableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterSetterBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getterClause(self):
            return self.getTypedRuleContext(SwiftParser.GetterClauseContext,0)


        def setterClause(self):
            return self.getTypedRuleContext(SwiftParser.SetterClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_getterSetterBlock

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGetterSetterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGetterSetterBlock(self)




    def getterSetterBlock(self):

        localctx = SwiftParser.GetterSetterBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_getterSetterBlock)
        self._la = 0 # Token type
        try:
            self.state = 853
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self.match(SwiftParser.T__10)
                self.state = 842
                self.getterClause()
                self.state = 844
                _la = self._input.LA(1)
                if _la==SwiftParser.T__44 or _la==SwiftParser.T__68:
                    self.state = 843
                    self.setterClause()


                self.state = 846
                self.match(SwiftParser.T__11)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.match(SwiftParser.T__10)
                self.state = 849
                self.setterClause()
                self.state = 850
                self.getterClause()
                self.state = 851
                self.match(SwiftParser.T__11)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_getterClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGetterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGetterClause(self)




    def getterClause(self):

        localctx = SwiftParser.GetterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_getterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 855
                self.attributes()


            self.state = 858
            self.match(SwiftParser.T__43)
            self.state = 859
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def setterName(self):
            return self.getTypedRuleContext(SwiftParser.SetterNameContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_setterClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSetterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSetterClause(self)




    def setterClause(self):

        localctx = SwiftParser.SetterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_setterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 861
                self.attributes()


            self.state = 864
            self.match(SwiftParser.T__44)
            self.state = 866
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                self.state = 865
                self.setterName()


            self.state = 868
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_setterName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSetterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSetterName(self)




    def setterName(self):

        localctx = SwiftParser.SetterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_setterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterSetterKeywordBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getterKeywordClause(self):
            return self.getTypedRuleContext(SwiftParser.GetterKeywordClauseContext,0)


        def setterKeywordClause(self):
            return self.getTypedRuleContext(SwiftParser.SetterKeywordClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_getterSetterKeywordBlock

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGetterSetterKeywordBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGetterSetterKeywordBlock(self)




    def getterSetterKeywordBlock(self):

        localctx = SwiftParser.GetterSetterKeywordBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_getterSetterKeywordBlock)
        self._la = 0 # Token type
        try:
            self.state = 884
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.match(SwiftParser.T__10)
                self.state = 873
                self.getterKeywordClause()
                self.state = 875
                _la = self._input.LA(1)
                if _la==SwiftParser.T__44 or _la==SwiftParser.T__68:
                    self.state = 874
                    self.setterKeywordClause()


                self.state = 877
                self.match(SwiftParser.T__11)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.match(SwiftParser.T__10)
                self.state = 880
                self.setterKeywordClause()
                self.state = 881
                self.getterKeywordClause()
                self.state = 882
                self.match(SwiftParser.T__11)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterKeywordClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_getterKeywordClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterGetterKeywordClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitGetterKeywordClause(self)




    def getterKeywordClause(self):

        localctx = SwiftParser.GetterKeywordClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_getterKeywordClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 886
                self.attributes()


            self.state = 889
            self.match(SwiftParser.T__43)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterKeywordClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_setterKeywordClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSetterKeywordClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSetterKeywordClause(self)




    def setterKeywordClause(self):

        localctx = SwiftParser.SetterKeywordClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_setterKeywordClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 891
                self.attributes()


            self.state = 894
            self.match(SwiftParser.T__44)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WillSetDidSetBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def willSetClause(self):
            return self.getTypedRuleContext(SwiftParser.WillSetClauseContext,0)


        def didSetClause(self):
            return self.getTypedRuleContext(SwiftParser.DidSetClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_willSetDidSetBlock

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterWillSetDidSetBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitWillSetDidSetBlock(self)




    def willSetDidSetBlock(self):

        localctx = SwiftParser.WillSetDidSetBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_willSetDidSetBlock)
        self._la = 0 # Token type
        try:
            self.state = 908
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.match(SwiftParser.T__10)
                self.state = 897
                self.willSetClause()
                self.state = 899
                _la = self._input.LA(1)
                if _la==SwiftParser.T__46 or _la==SwiftParser.T__68:
                    self.state = 898
                    self.didSetClause()


                self.state = 901
                self.match(SwiftParser.T__11)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.match(SwiftParser.T__10)
                self.state = 904
                self.didSetClause()
                self.state = 905
                self.willSetClause()
                self.state = 906
                self.match(SwiftParser.T__11)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WillSetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def setterName(self):
            return self.getTypedRuleContext(SwiftParser.SetterNameContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_willSetClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterWillSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitWillSetClause(self)




    def willSetClause(self):

        localctx = SwiftParser.WillSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_willSetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 910
                self.attributes()


            self.state = 913
            self.match(SwiftParser.T__45)
            self.state = 915
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                self.state = 914
                self.setterName()


            self.state = 917
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DidSetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def setterName(self):
            return self.getTypedRuleContext(SwiftParser.SetterNameContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_didSetClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDidSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDidSetClause(self)




    def didSetClause(self):

        localctx = SwiftParser.DidSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_didSetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 919
                self.attributes()


            self.state = 922
            self.match(SwiftParser.T__46)
            self.state = 924
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                self.state = 923
                self.setterName()


            self.state = 926
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypealiasDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typealiasHead(self):
            return self.getTypedRuleContext(SwiftParser.TypealiasHeadContext,0)


        def typealiasAssignment(self):
            return self.getTypedRuleContext(SwiftParser.TypealiasAssignmentContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typealiasDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypealiasDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypealiasDeclaration(self)




    def typealiasDeclaration(self):

        localctx = SwiftParser.TypealiasDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_typealiasDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.typealiasHead()
            self.state = 929
            self.typealiasAssignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypealiasHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typealiasName(self):
            return self.getTypedRuleContext(SwiftParser.TypealiasNameContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typealiasHead

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypealiasHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypealiasHead(self)




    def typealiasHead(self):

        localctx = SwiftParser.TypealiasHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typealiasHead)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(SwiftParser.T__34)
            self.state = 932
            self.typealiasName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypealiasNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typealiasName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypealiasName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypealiasName(self)




    def typealiasName(self):

        localctx = SwiftParser.TypealiasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typealiasName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypealiasAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typealiasAssignment

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypealiasAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypealiasAssignment(self)




    def typealiasAssignment(self):

        localctx = SwiftParser.TypealiasAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_typealiasAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(SwiftParser.T__42)
            self.state = 937
            self.sType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionHead(self):
            return self.getTypedRuleContext(SwiftParser.FunctionHeadContext,0)


        def functionName(self):
            return self.getTypedRuleContext(SwiftParser.FunctionNameContext,0)


        def functionSignature(self):
            return self.getTypedRuleContext(SwiftParser.FunctionSignatureContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(SwiftParser.FunctionBodyContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = SwiftParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.functionHead()
            self.state = 940
            self.functionName()
            self.state = 942
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 941
                self.genericParameterClause()


            self.state = 944
            self.functionSignature()
            self.state = 945
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationSpecifiersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_functionHead

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionHead(self)




    def functionHead(self):

        localctx = SwiftParser.FunctionHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 947
                self.attributes()


            self.state = 951
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__24) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32))) != 0):
                self.state = 950
                self.declarationSpecifiers()


            self.state = 953
            self.match(SwiftParser.T__39)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def operator(self):
            return self.getTypedRuleContext(SwiftParser.OperatorContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = SwiftParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_functionName)
        try:
            self.state = 957
            token = self._input.LA(1)
            if token in [SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65, SwiftParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.identifier()

            elif token in [SwiftParser.Operator]:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.operator()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterClauses(self):
            return self.getTypedRuleContext(SwiftParser.ParameterClausesContext,0)


        def functionResult(self):
            return self.getTypedRuleContext(SwiftParser.FunctionResultContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_functionSignature

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionSignature(self)




    def functionSignature(self):

        localctx = SwiftParser.FunctionSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.parameterClauses()
            self.state = 961
            _la = self._input.LA(1)
            if _la==SwiftParser.T__47:
                self.state = 960
                self.functionResult()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionResultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_functionResult

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionResult(self)




    def functionResult(self):

        localctx = SwiftParser.FunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_functionResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(SwiftParser.T__47)
            self.state = 965
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 964
                self.attributes()


            self.state = 967
            self.sType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = SwiftParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterClausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterClause(self):
            return self.getTypedRuleContext(SwiftParser.ParameterClauseContext,0)


        def parameterClauses(self):
            return self.getTypedRuleContext(SwiftParser.ParameterClausesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_parameterClauses

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterParameterClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitParameterClauses(self)




    def parameterClauses(self):

        localctx = SwiftParser.ParameterClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_parameterClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.parameterClause()
            self.state = 973
            _la = self._input.LA(1)
            if _la==SwiftParser.T__2:
                self.state = 972
                self.parameterClauses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SwiftParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_parameterClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterParameterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitParameterClause(self)




    def parameterClause(self):

        localctx = SwiftParser.ParameterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_parameterClause)
        self._la = 0 # Token type
        try:
            self.state = 984
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.match(SwiftParser.T__2)
                self.state = 976
                self.match(SwiftParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.match(SwiftParser.T__2)
                self.state = 978
                self.parameterList()
                self.state = 980
                _la = self._input.LA(1)
                if _la==SwiftParser.T__48:
                    self.state = 979
                    self.match(SwiftParser.T__48)


                self.state = 982
                self.match(SwiftParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(SwiftParser.ParameterContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SwiftParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SwiftParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_parameterList)
        try:
            self.state = 991
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.parameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.parameter()
                self.state = 988
                self.match(SwiftParser.T__14)
                self.state = 989
                self.parameterList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterName(self):
            return self.getTypedRuleContext(SwiftParser.ParameterNameContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SwiftParser.TypeAnnotationContext,0)


        def localParameterName(self):
            return self.getTypedRuleContext(SwiftParser.LocalParameterNameContext,0)


        def defaultArgumentClause(self):
            return self.getTypedRuleContext(SwiftParser.DefaultArgumentClauseContext,0)


        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SwiftParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.state = 1029
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.match(SwiftParser.T__49)


                self.state = 997
                _la = self._input.LA(1)
                if _la==SwiftParser.T__41:
                    self.state = 996
                    self.match(SwiftParser.T__41)


                self.state = 1000
                _la = self._input.LA(1)
                if _la==SwiftParser.T__50:
                    self.state = 999
                    self.match(SwiftParser.T__50)


                self.state = 1002
                self.parameterName()
                self.state = 1004
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                    self.state = 1003
                    self.localParameterName()


                self.state = 1006
                self.typeAnnotation()
                self.state = 1008
                _la = self._input.LA(1)
                if _la==SwiftParser.T__42:
                    self.state = 1007
                    self.defaultArgumentClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                _la = self._input.LA(1)
                if _la==SwiftParser.T__49:
                    self.state = 1010
                    self.match(SwiftParser.T__49)


                self.state = 1013
                self.match(SwiftParser.T__38)
                self.state = 1015
                _la = self._input.LA(1)
                if _la==SwiftParser.T__50:
                    self.state = 1014
                    self.match(SwiftParser.T__50)


                self.state = 1017
                self.parameterName()
                self.state = 1019
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                    self.state = 1018
                    self.localParameterName()


                self.state = 1021
                self.typeAnnotation()
                self.state = 1023
                _la = self._input.LA(1)
                if _la==SwiftParser.T__42:
                    self.state = 1022
                    self.defaultArgumentClause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                _la = self._input.LA(1)
                if _la==SwiftParser.T__68:
                    self.state = 1025
                    self.attributes()


                self.state = 1028
                self.sType(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_parameterName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitParameterName(self)




    def parameterName(self):

        localctx = SwiftParser.ParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_parameterName)
        try:
            self.state = 1033
            token = self._input.LA(1)
            if token in [SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65, SwiftParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.identifier()

            elif token in [SwiftParser.T__51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.match(SwiftParser.T__51)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalParameterNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_localParameterName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterLocalParameterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitLocalParameterName(self)




    def localParameterName(self):

        localctx = SwiftParser.LocalParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_localParameterName)
        try:
            self.state = 1037
            token = self._input.LA(1)
            if token in [SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65, SwiftParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.identifier()

            elif token in [SwiftParser.T__51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.match(SwiftParser.T__51)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultArgumentClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_defaultArgumentClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDefaultArgumentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDefaultArgumentClause(self)




    def defaultArgumentClause(self):

        localctx = SwiftParser.DefaultArgumentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_defaultArgumentClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(SwiftParser.T__42)
            self.state = 1040
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumDef(self):
            return self.getTypedRuleContext(SwiftParser.EnumDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = SwiftParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1042
                self.attributes()


            self.state = 1045
            self.match(SwiftParser.T__36)
            self.state = 1046
            self.enumDef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unionStyleEnum(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumContext,0)


        def rawValueStyleEnum(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_enumDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterEnumDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitEnumDef(self)




    def enumDef(self):

        localctx = SwiftParser.EnumDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_enumDef)
        try:
            self.state = 1050
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.unionStyleEnum()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.rawValueStyleEnum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStyleEnumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumName(self):
            return self.getTypedRuleContext(SwiftParser.EnumNameContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def unionStyleEnumMembers(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumMembersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_unionStyleEnum

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterUnionStyleEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitUnionStyleEnum(self)




    def unionStyleEnum(self):

        localctx = SwiftParser.UnionStyleEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_unionStyleEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.enumName()
            self.state = 1054
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 1053
                self.genericParameterClause()


            self.state = 1056
            self.match(SwiftParser.T__10)
            self.state = 1058
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (SwiftParser.T__12 - 13)) | (1 << (SwiftParser.T__24 - 13)) | (1 << (SwiftParser.T__25 - 13)) | (1 << (SwiftParser.T__26 - 13)) | (1 << (SwiftParser.T__27 - 13)) | (1 << (SwiftParser.T__28 - 13)) | (1 << (SwiftParser.T__29 - 13)) | (1 << (SwiftParser.T__30 - 13)) | (1 << (SwiftParser.T__31 - 13)) | (1 << (SwiftParser.T__32 - 13)) | (1 << (SwiftParser.T__33 - 13)) | (1 << (SwiftParser.T__34 - 13)) | (1 << (SwiftParser.T__35 - 13)) | (1 << (SwiftParser.T__36 - 13)) | (1 << (SwiftParser.T__37 - 13)) | (1 << (SwiftParser.T__38 - 13)) | (1 << (SwiftParser.T__39 - 13)) | (1 << (SwiftParser.T__41 - 13)) | (1 << (SwiftParser.T__52 - 13)) | (1 << (SwiftParser.T__53 - 13)) | (1 << (SwiftParser.T__54 - 13)) | (1 << (SwiftParser.T__55 - 13)) | (1 << (SwiftParser.T__56 - 13)) | (1 << (SwiftParser.T__57 - 13)) | (1 << (SwiftParser.T__68 - 13)))) != 0):
                self.state = 1057
                self.unionStyleEnumMembers()


            self.state = 1060
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStyleEnumMembersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unionStyleEnumMember(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumMemberContext,0)


        def unionStyleEnumMembers(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumMembersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_unionStyleEnumMembers

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterUnionStyleEnumMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitUnionStyleEnumMembers(self)




    def unionStyleEnumMembers(self):

        localctx = SwiftParser.UnionStyleEnumMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_unionStyleEnumMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.unionStyleEnumMember()
            self.state = 1064
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (SwiftParser.T__12 - 13)) | (1 << (SwiftParser.T__24 - 13)) | (1 << (SwiftParser.T__25 - 13)) | (1 << (SwiftParser.T__26 - 13)) | (1 << (SwiftParser.T__27 - 13)) | (1 << (SwiftParser.T__28 - 13)) | (1 << (SwiftParser.T__29 - 13)) | (1 << (SwiftParser.T__30 - 13)) | (1 << (SwiftParser.T__31 - 13)) | (1 << (SwiftParser.T__32 - 13)) | (1 << (SwiftParser.T__33 - 13)) | (1 << (SwiftParser.T__34 - 13)) | (1 << (SwiftParser.T__35 - 13)) | (1 << (SwiftParser.T__36 - 13)) | (1 << (SwiftParser.T__37 - 13)) | (1 << (SwiftParser.T__38 - 13)) | (1 << (SwiftParser.T__39 - 13)) | (1 << (SwiftParser.T__41 - 13)) | (1 << (SwiftParser.T__52 - 13)) | (1 << (SwiftParser.T__53 - 13)) | (1 << (SwiftParser.T__54 - 13)) | (1 << (SwiftParser.T__55 - 13)) | (1 << (SwiftParser.T__56 - 13)) | (1 << (SwiftParser.T__57 - 13)) | (1 << (SwiftParser.T__68 - 13)))) != 0):
                self.state = 1063
                self.unionStyleEnumMembers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStyleEnumMemberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationContext,0)


        def unionStyleEnumCaseClause(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumCaseClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_unionStyleEnumMember

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterUnionStyleEnumMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitUnionStyleEnumMember(self)




    def unionStyleEnumMember(self):

        localctx = SwiftParser.UnionStyleEnumMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_unionStyleEnumMember)
        self._la = 0 # Token type
        try:
            self.state = 1071
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.unionStyleEnumCaseClause()
                self.state = 1069
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 1068
                    self.match(SwiftParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStyleEnumCaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unionStyleEnumCaseList(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumCaseListContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_unionStyleEnumCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterUnionStyleEnumCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitUnionStyleEnumCaseClause(self)




    def unionStyleEnumCaseClause(self):

        localctx = SwiftParser.UnionStyleEnumCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_unionStyleEnumCaseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1073
                self.attributes()


            self.state = 1076
            self.match(SwiftParser.T__12)
            self.state = 1077
            self.unionStyleEnumCaseList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStyleEnumCaseListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unionStyleEnumCase(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumCaseContext,0)


        def unionStyleEnumCaseList(self):
            return self.getTypedRuleContext(SwiftParser.UnionStyleEnumCaseListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_unionStyleEnumCaseList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterUnionStyleEnumCaseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitUnionStyleEnumCaseList(self)




    def unionStyleEnumCaseList(self):

        localctx = SwiftParser.UnionStyleEnumCaseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_unionStyleEnumCaseList)
        try:
            self.state = 1084
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.unionStyleEnumCase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.unionStyleEnumCase()
                self.state = 1081
                self.match(SwiftParser.T__14)
                self.state = 1082
                self.unionStyleEnumCaseList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStyleEnumCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumCaseName(self):
            return self.getTypedRuleContext(SwiftParser.EnumCaseNameContext,0)


        def tupleType(self):
            return self.getTypedRuleContext(SwiftParser.TupleTypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_unionStyleEnumCase

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterUnionStyleEnumCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitUnionStyleEnumCase(self)




    def unionStyleEnumCase(self):

        localctx = SwiftParser.UnionStyleEnumCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_unionStyleEnumCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.enumCaseName()
            self.state = 1088
            _la = self._input.LA(1)
            if _la==SwiftParser.T__2:
                self.state = 1087
                self.tupleType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_enumName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterEnumName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitEnumName(self)




    def enumName(self):

        localctx = SwiftParser.EnumNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_enumName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumCaseNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_enumCaseName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterEnumCaseName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitEnumCaseName(self)




    def enumCaseName(self):

        localctx = SwiftParser.EnumCaseNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_enumCaseName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RawValueStyleEnumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumName(self):
            return self.getTypedRuleContext(SwiftParser.EnumNameContext,0)


        def typeIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def rawValueStyleEnumMembers(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumMembersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_rawValueStyleEnum

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRawValueStyleEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRawValueStyleEnum(self)




    def rawValueStyleEnum(self):

        localctx = SwiftParser.RawValueStyleEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_rawValueStyleEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.enumName()
            self.state = 1096
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 1095
                self.genericParameterClause()


            self.state = 1098
            self.match(SwiftParser.T__13)
            self.state = 1099
            self.typeIdentifier()
            self.state = 1100
            self.match(SwiftParser.T__10)
            self.state = 1102
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (SwiftParser.T__12 - 13)) | (1 << (SwiftParser.T__24 - 13)) | (1 << (SwiftParser.T__25 - 13)) | (1 << (SwiftParser.T__26 - 13)) | (1 << (SwiftParser.T__27 - 13)) | (1 << (SwiftParser.T__28 - 13)) | (1 << (SwiftParser.T__29 - 13)) | (1 << (SwiftParser.T__30 - 13)) | (1 << (SwiftParser.T__31 - 13)) | (1 << (SwiftParser.T__32 - 13)) | (1 << (SwiftParser.T__33 - 13)) | (1 << (SwiftParser.T__34 - 13)) | (1 << (SwiftParser.T__35 - 13)) | (1 << (SwiftParser.T__36 - 13)) | (1 << (SwiftParser.T__37 - 13)) | (1 << (SwiftParser.T__38 - 13)) | (1 << (SwiftParser.T__39 - 13)) | (1 << (SwiftParser.T__41 - 13)) | (1 << (SwiftParser.T__52 - 13)) | (1 << (SwiftParser.T__53 - 13)) | (1 << (SwiftParser.T__54 - 13)) | (1 << (SwiftParser.T__55 - 13)) | (1 << (SwiftParser.T__56 - 13)) | (1 << (SwiftParser.T__57 - 13)) | (1 << (SwiftParser.T__68 - 13)))) != 0):
                self.state = 1101
                self.rawValueStyleEnumMembers()


            self.state = 1104
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RawValueStyleEnumMembersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rawValueStyleEnumMember(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumMemberContext,0)


        def rawValueStyleEnumMembers(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumMembersContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_rawValueStyleEnumMembers

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRawValueStyleEnumMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRawValueStyleEnumMembers(self)




    def rawValueStyleEnumMembers(self):

        localctx = SwiftParser.RawValueStyleEnumMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_rawValueStyleEnumMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.rawValueStyleEnumMember()
            self.state = 1108
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (SwiftParser.T__12 - 13)) | (1 << (SwiftParser.T__24 - 13)) | (1 << (SwiftParser.T__25 - 13)) | (1 << (SwiftParser.T__26 - 13)) | (1 << (SwiftParser.T__27 - 13)) | (1 << (SwiftParser.T__28 - 13)) | (1 << (SwiftParser.T__29 - 13)) | (1 << (SwiftParser.T__30 - 13)) | (1 << (SwiftParser.T__31 - 13)) | (1 << (SwiftParser.T__32 - 13)) | (1 << (SwiftParser.T__33 - 13)) | (1 << (SwiftParser.T__34 - 13)) | (1 << (SwiftParser.T__35 - 13)) | (1 << (SwiftParser.T__36 - 13)) | (1 << (SwiftParser.T__37 - 13)) | (1 << (SwiftParser.T__38 - 13)) | (1 << (SwiftParser.T__39 - 13)) | (1 << (SwiftParser.T__41 - 13)) | (1 << (SwiftParser.T__52 - 13)) | (1 << (SwiftParser.T__53 - 13)) | (1 << (SwiftParser.T__54 - 13)) | (1 << (SwiftParser.T__55 - 13)) | (1 << (SwiftParser.T__56 - 13)) | (1 << (SwiftParser.T__57 - 13)) | (1 << (SwiftParser.T__68 - 13)))) != 0):
                self.state = 1107
                self.rawValueStyleEnumMembers()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RawValueStyleEnumMemberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationContext,0)


        def rawValueStyleEnumCaseClause(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumCaseClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_rawValueStyleEnumMember

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRawValueStyleEnumMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRawValueStyleEnumMember(self)




    def rawValueStyleEnumMember(self):

        localctx = SwiftParser.RawValueStyleEnumMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_rawValueStyleEnumMember)
        try:
            self.state = 1112
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.rawValueStyleEnumCaseClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RawValueStyleEnumCaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rawValueStyleEnumCaseList(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumCaseListContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_rawValueStyleEnumCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRawValueStyleEnumCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRawValueStyleEnumCaseClause(self)




    def rawValueStyleEnumCaseClause(self):

        localctx = SwiftParser.RawValueStyleEnumCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_rawValueStyleEnumCaseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1114
                self.attributes()


            self.state = 1117
            self.match(SwiftParser.T__12)
            self.state = 1118
            self.rawValueStyleEnumCaseList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RawValueStyleEnumCaseListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rawValueStyleEnumCase(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumCaseContext,0)


        def rawValueStyleEnumCaseList(self):
            return self.getTypedRuleContext(SwiftParser.RawValueStyleEnumCaseListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_rawValueStyleEnumCaseList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRawValueStyleEnumCaseList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRawValueStyleEnumCaseList(self)




    def rawValueStyleEnumCaseList(self):

        localctx = SwiftParser.RawValueStyleEnumCaseListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_rawValueStyleEnumCaseList)
        try:
            self.state = 1125
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.rawValueStyleEnumCase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.rawValueStyleEnumCase()
                self.state = 1122
                self.match(SwiftParser.T__14)
                self.state = 1123
                self.rawValueStyleEnumCaseList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RawValueStyleEnumCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumCaseName(self):
            return self.getTypedRuleContext(SwiftParser.EnumCaseNameContext,0)


        def rawValueAssignment(self):
            return self.getTypedRuleContext(SwiftParser.RawValueAssignmentContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_rawValueStyleEnumCase

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRawValueStyleEnumCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRawValueStyleEnumCase(self)




    def rawValueStyleEnumCase(self):

        localctx = SwiftParser.RawValueStyleEnumCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_rawValueStyleEnumCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.enumCaseName()
            self.state = 1129
            _la = self._input.LA(1)
            if _la==SwiftParser.T__42:
                self.state = 1128
                self.rawValueAssignment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RawValueAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(SwiftParser.LiteralContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_rawValueAssignment

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterRawValueAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitRawValueAssignment(self)




    def rawValueAssignment(self):

        localctx = SwiftParser.RawValueAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_rawValueAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(SwiftParser.T__42)
            self.state = 1132
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structName(self):
            return self.getTypedRuleContext(SwiftParser.StructNameContext,0)


        def structBody(self):
            return self.getTypedRuleContext(SwiftParser.StructBodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def typeInheritanceClause(self):
            return self.getTypedRuleContext(SwiftParser.TypeInheritanceClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = SwiftParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1134
                self.attributes()


            self.state = 1137
            self.match(SwiftParser.T__35)
            self.state = 1138
            self.structName()
            self.state = 1140
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 1139
                self.genericParameterClause()


            self.state = 1143
            _la = self._input.LA(1)
            if _la==SwiftParser.T__13:
                self.state = 1142
                self.typeInheritanceClause()


            self.state = 1145
            self.structBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_structName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterStructName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitStructName(self)




    def structName(self):

        localctx = SwiftParser.StructNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_structName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarations(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_structBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterStructBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitStructBody(self)




    def structBody(self):

        localctx = SwiftParser.StructBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_structBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(SwiftParser.T__10)
            self.state = 1151
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SwiftParser.T__24 - 25)) | (1 << (SwiftParser.T__25 - 25)) | (1 << (SwiftParser.T__26 - 25)) | (1 << (SwiftParser.T__27 - 25)) | (1 << (SwiftParser.T__28 - 25)) | (1 << (SwiftParser.T__29 - 25)) | (1 << (SwiftParser.T__30 - 25)) | (1 << (SwiftParser.T__31 - 25)) | (1 << (SwiftParser.T__32 - 25)) | (1 << (SwiftParser.T__33 - 25)) | (1 << (SwiftParser.T__34 - 25)) | (1 << (SwiftParser.T__35 - 25)) | (1 << (SwiftParser.T__36 - 25)) | (1 << (SwiftParser.T__37 - 25)) | (1 << (SwiftParser.T__38 - 25)) | (1 << (SwiftParser.T__39 - 25)) | (1 << (SwiftParser.T__41 - 25)) | (1 << (SwiftParser.T__52 - 25)) | (1 << (SwiftParser.T__53 - 25)) | (1 << (SwiftParser.T__54 - 25)) | (1 << (SwiftParser.T__55 - 25)) | (1 << (SwiftParser.T__56 - 25)) | (1 << (SwiftParser.T__57 - 25)) | (1 << (SwiftParser.T__68 - 25)))) != 0):
                self.state = 1150
                self.declarations()


            self.state = 1153
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(SwiftParser.ClassNameContext,0)


        def classBody(self):
            return self.getTypedRuleContext(SwiftParser.ClassBodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def typeInheritanceClause(self):
            return self.getTypedRuleContext(SwiftParser.TypeInheritanceClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = SwiftParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1155
                self.attributes()


            self.state = 1158
            self.match(SwiftParser.T__24)
            self.state = 1159
            self.className()
            self.state = 1161
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 1160
                self.genericParameterClause()


            self.state = 1164
            _la = self._input.LA(1)
            if _la==SwiftParser.T__13:
                self.state = 1163
                self.typeInheritanceClause()


            self.state = 1166
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_className

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterClassName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitClassName(self)




    def className(self):

        localctx = SwiftParser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_className)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarations(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = SwiftParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(SwiftParser.T__10)
            self.state = 1172
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SwiftParser.T__24 - 25)) | (1 << (SwiftParser.T__25 - 25)) | (1 << (SwiftParser.T__26 - 25)) | (1 << (SwiftParser.T__27 - 25)) | (1 << (SwiftParser.T__28 - 25)) | (1 << (SwiftParser.T__29 - 25)) | (1 << (SwiftParser.T__30 - 25)) | (1 << (SwiftParser.T__31 - 25)) | (1 << (SwiftParser.T__32 - 25)) | (1 << (SwiftParser.T__33 - 25)) | (1 << (SwiftParser.T__34 - 25)) | (1 << (SwiftParser.T__35 - 25)) | (1 << (SwiftParser.T__36 - 25)) | (1 << (SwiftParser.T__37 - 25)) | (1 << (SwiftParser.T__38 - 25)) | (1 << (SwiftParser.T__39 - 25)) | (1 << (SwiftParser.T__41 - 25)) | (1 << (SwiftParser.T__52 - 25)) | (1 << (SwiftParser.T__53 - 25)) | (1 << (SwiftParser.T__54 - 25)) | (1 << (SwiftParser.T__55 - 25)) | (1 << (SwiftParser.T__56 - 25)) | (1 << (SwiftParser.T__57 - 25)) | (1 << (SwiftParser.T__68 - 25)))) != 0):
                self.state = 1171
                self.declarations()


            self.state = 1174
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolName(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolNameContext,0)


        def protocolBody(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolBodyContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def typeInheritanceClause(self):
            return self.getTypedRuleContext(SwiftParser.TypeInheritanceClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolDeclaration(self)




    def protocolDeclaration(self):

        localctx = SwiftParser.ProtocolDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_protocolDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1176
                self.attributes()


            self.state = 1179
            self.match(SwiftParser.T__37)
            self.state = 1180
            self.protocolName()
            self.state = 1182
            _la = self._input.LA(1)
            if _la==SwiftParser.T__13:
                self.state = 1181
                self.typeInheritanceClause()


            self.state = 1184
            self.protocolBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolName(self)




    def protocolName(self):

        localctx = SwiftParser.ProtocolNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_protocolName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolMemberDeclarations(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolMemberDeclarationsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolBody(self)




    def protocolBody(self):

        localctx = SwiftParser.ProtocolBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_protocolBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(SwiftParser.T__10)
            self.state = 1190
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SwiftParser.T__24 - 25)) | (1 << (SwiftParser.T__25 - 25)) | (1 << (SwiftParser.T__26 - 25)) | (1 << (SwiftParser.T__27 - 25)) | (1 << (SwiftParser.T__28 - 25)) | (1 << (SwiftParser.T__29 - 25)) | (1 << (SwiftParser.T__30 - 25)) | (1 << (SwiftParser.T__31 - 25)) | (1 << (SwiftParser.T__32 - 25)) | (1 << (SwiftParser.T__34 - 25)) | (1 << (SwiftParser.T__38 - 25)) | (1 << (SwiftParser.T__39 - 25)) | (1 << (SwiftParser.T__52 - 25)) | (1 << (SwiftParser.T__53 - 25)) | (1 << (SwiftParser.T__56 - 25)) | (1 << (SwiftParser.T__68 - 25)))) != 0):
                self.state = 1189
                self.protocolMemberDeclarations()


            self.state = 1192
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolMemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolPropertyDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolPropertyDeclarationContext,0)


        def protocolMethodDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolMethodDeclarationContext,0)


        def protocolInitializerDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolInitializerDeclarationContext,0)


        def protocolSubscriptDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolSubscriptDeclarationContext,0)


        def protocolAssociatedTypeDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolAssociatedTypeDeclarationContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolMemberDeclaration(self)




    def protocolMemberDeclaration(self):

        localctx = SwiftParser.ProtocolMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_protocolMemberDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1214
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.protocolPropertyDeclaration()
                self.state = 1196
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 1195
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self.protocolMethodDeclaration()
                self.state = 1200
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 1199
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1202
                self.protocolInitializerDeclaration()
                self.state = 1204
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 1203
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1206
                self.protocolSubscriptDeclaration()
                self.state = 1208
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 1207
                    self.match(SwiftParser.T__0)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1210
                self.protocolAssociatedTypeDeclaration()
                self.state = 1212
                _la = self._input.LA(1)
                if _la==SwiftParser.T__0:
                    self.state = 1211
                    self.match(SwiftParser.T__0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolMemberDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolMemberDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolMemberDeclarationContext,0)


        def protocolMemberDeclarations(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolMemberDeclarationsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolMemberDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolMemberDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolMemberDeclarations(self)




    def protocolMemberDeclarations(self):

        localctx = SwiftParser.ProtocolMemberDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_protocolMemberDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.protocolMemberDeclaration()
            self.state = 1218
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SwiftParser.T__24 - 25)) | (1 << (SwiftParser.T__25 - 25)) | (1 << (SwiftParser.T__26 - 25)) | (1 << (SwiftParser.T__27 - 25)) | (1 << (SwiftParser.T__28 - 25)) | (1 << (SwiftParser.T__29 - 25)) | (1 << (SwiftParser.T__30 - 25)) | (1 << (SwiftParser.T__31 - 25)) | (1 << (SwiftParser.T__32 - 25)) | (1 << (SwiftParser.T__34 - 25)) | (1 << (SwiftParser.T__38 - 25)) | (1 << (SwiftParser.T__39 - 25)) | (1 << (SwiftParser.T__52 - 25)) | (1 << (SwiftParser.T__53 - 25)) | (1 << (SwiftParser.T__56 - 25)) | (1 << (SwiftParser.T__68 - 25)))) != 0):
                self.state = 1217
                self.protocolMemberDeclarations()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolPropertyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationHead(self):
            return self.getTypedRuleContext(SwiftParser.VariableDeclarationHeadContext,0)


        def variableName(self):
            return self.getTypedRuleContext(SwiftParser.VariableNameContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SwiftParser.TypeAnnotationContext,0)


        def getterSetterKeywordBlock(self):
            return self.getTypedRuleContext(SwiftParser.GetterSetterKeywordBlockContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolPropertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolPropertyDeclaration(self)




    def protocolPropertyDeclaration(self):

        localctx = SwiftParser.ProtocolPropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_protocolPropertyDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.variableDeclarationHead()
            self.state = 1221
            self.variableName()
            self.state = 1222
            self.typeAnnotation()
            self.state = 1223
            self.getterSetterKeywordBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionHead(self):
            return self.getTypedRuleContext(SwiftParser.FunctionHeadContext,0)


        def functionName(self):
            return self.getTypedRuleContext(SwiftParser.FunctionNameContext,0)


        def functionSignature(self):
            return self.getTypedRuleContext(SwiftParser.FunctionSignatureContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolMethodDeclaration(self)




    def protocolMethodDeclaration(self):

        localctx = SwiftParser.ProtocolMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_protocolMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.functionHead()
            self.state = 1226
            self.functionName()
            self.state = 1228
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 1227
                self.genericParameterClause()


            self.state = 1230
            self.functionSignature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolInitializerDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerHead(self):
            return self.getTypedRuleContext(SwiftParser.InitializerHeadContext,0)


        def parameterClause(self):
            return self.getTypedRuleContext(SwiftParser.ParameterClauseContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolInitializerDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolInitializerDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolInitializerDeclaration(self)




    def protocolInitializerDeclaration(self):

        localctx = SwiftParser.ProtocolInitializerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_protocolInitializerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.initializerHead()
            self.state = 1234
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 1233
                self.genericParameterClause()


            self.state = 1236
            self.parameterClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolSubscriptDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscriptHead(self):
            return self.getTypedRuleContext(SwiftParser.SubscriptHeadContext,0)


        def subscriptResult(self):
            return self.getTypedRuleContext(SwiftParser.SubscriptResultContext,0)


        def getterSetterKeywordBlock(self):
            return self.getTypedRuleContext(SwiftParser.GetterSetterKeywordBlockContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolSubscriptDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolSubscriptDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolSubscriptDeclaration(self)




    def protocolSubscriptDeclaration(self):

        localctx = SwiftParser.ProtocolSubscriptDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_protocolSubscriptDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.subscriptHead()
            self.state = 1239
            self.subscriptResult()
            self.state = 1240
            self.getterSetterKeywordBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolAssociatedTypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typealiasHead(self):
            return self.getTypedRuleContext(SwiftParser.TypealiasHeadContext,0)


        def typeInheritanceClause(self):
            return self.getTypedRuleContext(SwiftParser.TypeInheritanceClauseContext,0)


        def typealiasAssignment(self):
            return self.getTypedRuleContext(SwiftParser.TypealiasAssignmentContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolAssociatedTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolAssociatedTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolAssociatedTypeDeclaration(self)




    def protocolAssociatedTypeDeclaration(self):

        localctx = SwiftParser.ProtocolAssociatedTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_protocolAssociatedTypeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.typealiasHead()
            self.state = 1244
            _la = self._input.LA(1)
            if _la==SwiftParser.T__13:
                self.state = 1243
                self.typeInheritanceClause()


            self.state = 1247
            _la = self._input.LA(1)
            if _la==SwiftParser.T__42:
                self.state = 1246
                self.typealiasAssignment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerHead(self):
            return self.getTypedRuleContext(SwiftParser.InitializerHeadContext,0)


        def parameterClause(self):
            return self.getTypedRuleContext(SwiftParser.ParameterClauseContext,0)


        def initializerBody(self):
            return self.getTypedRuleContext(SwiftParser.InitializerBodyContext,0)


        def genericParameterClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericParameterClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_initializerDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInitializerDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInitializerDeclaration(self)




    def initializerDeclaration(self):

        localctx = SwiftParser.InitializerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_initializerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.initializerHead()
            self.state = 1251
            _la = self._input.LA(1)
            if _la==SwiftParser.T__21:
                self.state = 1250
                self.genericParameterClause()


            self.state = 1253
            self.parameterClause()
            self.state = 1254
            self.initializerBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_initializerHead

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInitializerHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInitializerHead(self)




    def initializerHead(self):

        localctx = SwiftParser.InitializerHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_initializerHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1256
                self.attributes()


            self.state = 1260
            _la = self._input.LA(1)
            if _la==SwiftParser.T__52:
                self.state = 1259
                self.match(SwiftParser.T__52)


            self.state = 1262
            self.match(SwiftParser.T__53)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_initializerBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInitializerBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInitializerBody(self)




    def initializerBody(self):

        localctx = SwiftParser.InitializerBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_initializerBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeinitializerDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_deinitializerDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDeinitializerDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDeinitializerDeclaration(self)




    def deinitializerDeclaration(self):

        localctx = SwiftParser.DeinitializerDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_deinitializerDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1266
                self.attributes()


            self.state = 1269
            self.match(SwiftParser.T__54)
            self.state = 1270
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtensionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,0)


        def extensionBody(self):
            return self.getTypedRuleContext(SwiftParser.ExtensionBodyContext,0)


        def typeInheritanceClause(self):
            return self.getTypedRuleContext(SwiftParser.TypeInheritanceClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_extensionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExtensionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExtensionDeclaration(self)




    def extensionDeclaration(self):

        localctx = SwiftParser.ExtensionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_extensionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.match(SwiftParser.T__55)
            self.state = 1273
            self.typeIdentifier()
            self.state = 1275
            _la = self._input.LA(1)
            if _la==SwiftParser.T__13:
                self.state = 1274
                self.typeInheritanceClause()


            self.state = 1277
            self.extensionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtensionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarations(self):
            return self.getTypedRuleContext(SwiftParser.DeclarationsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_extensionBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExtensionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExtensionBody(self)




    def extensionBody(self):

        localctx = SwiftParser.ExtensionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_extensionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(SwiftParser.T__10)
            self.state = 1281
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SwiftParser.T__24 - 25)) | (1 << (SwiftParser.T__25 - 25)) | (1 << (SwiftParser.T__26 - 25)) | (1 << (SwiftParser.T__27 - 25)) | (1 << (SwiftParser.T__28 - 25)) | (1 << (SwiftParser.T__29 - 25)) | (1 << (SwiftParser.T__30 - 25)) | (1 << (SwiftParser.T__31 - 25)) | (1 << (SwiftParser.T__32 - 25)) | (1 << (SwiftParser.T__33 - 25)) | (1 << (SwiftParser.T__34 - 25)) | (1 << (SwiftParser.T__35 - 25)) | (1 << (SwiftParser.T__36 - 25)) | (1 << (SwiftParser.T__37 - 25)) | (1 << (SwiftParser.T__38 - 25)) | (1 << (SwiftParser.T__39 - 25)) | (1 << (SwiftParser.T__41 - 25)) | (1 << (SwiftParser.T__52 - 25)) | (1 << (SwiftParser.T__53 - 25)) | (1 << (SwiftParser.T__54 - 25)) | (1 << (SwiftParser.T__55 - 25)) | (1 << (SwiftParser.T__56 - 25)) | (1 << (SwiftParser.T__57 - 25)) | (1 << (SwiftParser.T__68 - 25)))) != 0):
                self.state = 1280
                self.declarations()


            self.state = 1283
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscriptHead(self):
            return self.getTypedRuleContext(SwiftParser.SubscriptHeadContext,0)


        def subscriptResult(self):
            return self.getTypedRuleContext(SwiftParser.SubscriptResultContext,0)


        def codeBlock(self):
            return self.getTypedRuleContext(SwiftParser.CodeBlockContext,0)


        def getterSetterBlock(self):
            return self.getTypedRuleContext(SwiftParser.GetterSetterBlockContext,0)


        def getterSetterKeywordBlock(self):
            return self.getTypedRuleContext(SwiftParser.GetterSetterKeywordBlockContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_subscriptDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSubscriptDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSubscriptDeclaration(self)




    def subscriptDeclaration(self):

        localctx = SwiftParser.SubscriptDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_subscriptDeclaration)
        try:
            self.state = 1297
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1285
                self.subscriptHead()
                self.state = 1286
                self.subscriptResult()
                self.state = 1287
                self.codeBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1289
                self.subscriptHead()
                self.state = 1290
                self.subscriptResult()
                self.state = 1291
                self.getterSetterBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1293
                self.subscriptHead()
                self.state = 1294
                self.subscriptResult()
                self.state = 1295
                self.getterSetterKeywordBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterClause(self):
            return self.getTypedRuleContext(SwiftParser.ParameterClauseContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_subscriptHead

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSubscriptHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSubscriptHead(self)




    def subscriptHead(self):

        localctx = SwiftParser.SubscriptHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_subscriptHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1299
                self.attributes()


            self.state = 1302
            self.match(SwiftParser.T__56)
            self.state = 1303
            self.parameterClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptResultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_subscriptResult

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSubscriptResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSubscriptResult(self)




    def subscriptResult(self):

        localctx = SwiftParser.SubscriptResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_subscriptResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(SwiftParser.T__47)
            self.state = 1307
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1306
                self.attributes()


            self.state = 1309
            self.sType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixOperatorDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.PrefixOperatorDeclarationContext,0)


        def postfixOperatorDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.PostfixOperatorDeclarationContext,0)


        def infixOperatorDeclaration(self):
            return self.getTypedRuleContext(SwiftParser.InfixOperatorDeclarationContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_operatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterOperatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitOperatorDeclaration(self)




    def operatorDeclaration(self):

        localctx = SwiftParser.OperatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_operatorDeclaration)
        try:
            self.state = 1314
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.prefixOperatorDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.postfixOperatorDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1313
                self.infixOperatorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_prefixOperatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPrefixOperatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPrefixOperatorDeclaration(self)




    def prefixOperatorDeclaration(self):

        localctx = SwiftParser.PrefixOperatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_prefixOperatorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(SwiftParser.T__57)
            self.state = 1317
            self.match(SwiftParser.T__58)
            self.state = 1318
            self.match(SwiftParser.T__57)
            self.state = 1319
            self.match(SwiftParser.T__10)
            self.state = 1320
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixOperatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_postfixOperatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPostfixOperatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPostfixOperatorDeclaration(self)




    def postfixOperatorDeclaration(self):

        localctx = SwiftParser.PostfixOperatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_postfixOperatorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(SwiftParser.T__57)
            self.state = 1323
            self.match(SwiftParser.T__59)
            self.state = 1324
            self.match(SwiftParser.T__57)
            self.state = 1325
            self.match(SwiftParser.T__10)
            self.state = 1326
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InfixOperatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixOperatorAttributes(self):
            return self.getTypedRuleContext(SwiftParser.InfixOperatorAttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_infixOperatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInfixOperatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInfixOperatorDeclaration(self)




    def infixOperatorDeclaration(self):

        localctx = SwiftParser.InfixOperatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_infixOperatorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(SwiftParser.T__57)
            self.state = 1329
            self.match(SwiftParser.T__60)
            self.state = 1330
            self.match(SwiftParser.T__57)
            self.state = 1331
            self.match(SwiftParser.T__10)
            self.state = 1332
            self.infixOperatorAttributes()
            self.state = 1333
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InfixOperatorAttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceClause(self):
            return self.getTypedRuleContext(SwiftParser.PrecedenceClauseContext,0)


        def associativityClause(self):
            return self.getTypedRuleContext(SwiftParser.AssociativityClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_infixOperatorAttributes

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInfixOperatorAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInfixOperatorAttributes(self)




    def infixOperatorAttributes(self):

        localctx = SwiftParser.InfixOperatorAttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_infixOperatorAttributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            _la = self._input.LA(1)
            if _la==SwiftParser.T__61:
                self.state = 1335
                self.precedenceClause()


            self.state = 1339
            _la = self._input.LA(1)
            if _la==SwiftParser.T__62:
                self.state = 1338
                self.associativityClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecedenceClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precedenceLevel(self):
            return self.getTypedRuleContext(SwiftParser.PrecedenceLevelContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_precedenceClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPrecedenceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPrecedenceClause(self)




    def precedenceClause(self):

        localctx = SwiftParser.PrecedenceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_precedenceClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(SwiftParser.T__61)
            self.state = 1342
            self.precedenceLevel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecedenceLevelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(SwiftParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_precedenceLevel

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPrecedenceLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPrecedenceLevel(self)




    def precedenceLevel(self):

        localctx = SwiftParser.PrecedenceLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_precedenceLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssociativityClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def associativity(self):
            return self.getTypedRuleContext(SwiftParser.AssociativityContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_associativityClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAssociativityClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAssociativityClause(self)




    def associativityClause(self):

        localctx = SwiftParser.AssociativityClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_associativityClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(SwiftParser.T__62)
            self.state = 1347
            self.associativity()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssociativityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_associativity

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAssociativity(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAssociativity(self)




    def associativity(self):

        localctx = SwiftParser.AssociativityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_associativity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def wildcardPattern(self):
            return self.getTypedRuleContext(SwiftParser.WildcardPatternContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SwiftParser.TypeAnnotationContext,0)


        def identifierPattern(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierPatternContext,0)


        def valueBindingPattern(self):
            return self.getTypedRuleContext(SwiftParser.ValueBindingPatternContext,0)


        def tuplePattern(self):
            return self.getTypedRuleContext(SwiftParser.TuplePatternContext,0)


        def enumCasePattern(self):
            return self.getTypedRuleContext(SwiftParser.EnumCasePatternContext,0)


        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def expressionPattern(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionPatternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(SwiftParser.PatternContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPattern(self)



    def pattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SwiftParser.PatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 270
        self.enterRecursionRule(localctx, 270, self.RULE_pattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1352
                self.wildcardPattern()
                self.state = 1354
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1353
                    self.typeAnnotation()


                pass

            elif la_ == 2:
                self.state = 1356
                self.identifierPattern()
                self.state = 1357
                self.typeAnnotation()
                pass

            elif la_ == 3:
                self.state = 1359
                self.valueBindingPattern()
                pass

            elif la_ == 4:
                self.state = 1360
                self.tuplePattern()
                self.state = 1362
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1361
                    self.typeAnnotation()


                pass

            elif la_ == 5:
                self.state = 1364
                self.enumCasePattern()
                pass

            elif la_ == 6:
                self.state = 1365
                self.match(SwiftParser.T__66)
                self.state = 1366
                self.sType(0)
                pass

            elif la_ == 7:
                self.state = 1367
                self.expressionPattern()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1375
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SwiftParser.PatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_pattern)
                    self.state = 1370
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1371
                    self.match(SwiftParser.T__67)
                    self.state = 1372
                    self.sType(0) 
                self.state = 1377
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class WildcardPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_wildcardPattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterWildcardPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitWildcardPattern(self)




    def wildcardPattern(self):

        localctx = SwiftParser.WildcardPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_wildcardPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(SwiftParser.T__51)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_identifierPattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterIdentifierPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitIdentifierPattern(self)




    def identifierPattern(self):

        localctx = SwiftParser.IdentifierPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_identifierPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueBindingPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(SwiftParser.PatternContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_valueBindingPattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterValueBindingPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitValueBindingPattern(self)




    def valueBindingPattern(self):

        localctx = SwiftParser.ValueBindingPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_valueBindingPattern)
        try:
            self.state = 1386
            token = self._input.LA(1)
            if token in [SwiftParser.T__38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1382
                self.match(SwiftParser.T__38)
                self.state = 1383
                self.pattern(0)

            elif token in [SwiftParser.T__41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.match(SwiftParser.T__41)
                self.state = 1385
                self.pattern(0)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TuplePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuplePatternElementList(self):
            return self.getTypedRuleContext(SwiftParser.TuplePatternElementListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_tuplePattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTuplePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTuplePattern(self)




    def tuplePattern(self):

        localctx = SwiftParser.TuplePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_tuplePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(SwiftParser.T__2)
            self.state = 1390
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__40) | (1 << SwiftParser.T__41) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__66 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                self.state = 1389
                self.tuplePatternElementList()


            self.state = 1392
            self.match(SwiftParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TuplePatternElementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tuplePatternElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.TuplePatternElementContext)
            else:
                return self.getTypedRuleContext(SwiftParser.TuplePatternElementContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_tuplePatternElementList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTuplePatternElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTuplePatternElementList(self)




    def tuplePatternElementList(self):

        localctx = SwiftParser.TuplePatternElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_tuplePatternElementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.tuplePatternElement()
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SwiftParser.T__14:
                self.state = 1395
                self.match(SwiftParser.T__14)
                self.state = 1396
                self.tuplePatternElement()
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TuplePatternElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(SwiftParser.PatternContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_tuplePatternElement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTuplePatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTuplePatternElement(self)




    def tuplePatternElement(self):

        localctx = SwiftParser.TuplePatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_tuplePatternElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.pattern(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumCasePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumCaseName(self):
            return self.getTypedRuleContext(SwiftParser.EnumCaseNameContext,0)


        def typeIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,0)


        def tuplePattern(self):
            return self.getTypedRuleContext(SwiftParser.TuplePatternContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_enumCasePattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterEnumCasePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitEnumCasePattern(self)




    def enumCasePattern(self):

        localctx = SwiftParser.EnumCasePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_enumCasePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                self.state = 1404
                self.typeIdentifier()


            self.state = 1407
            self.match(SwiftParser.T__40)
            self.state = 1408
            self.enumCaseName()
            self.state = 1410
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1409
                self.tuplePattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeCastingPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isPattern(self):
            return self.getTypedRuleContext(SwiftParser.IsPatternContext,0)


        def asPattern(self):
            return self.getTypedRuleContext(SwiftParser.AsPatternContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typeCastingPattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypeCastingPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypeCastingPattern(self)




    def typeCastingPattern(self):

        localctx = SwiftParser.TypeCastingPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_typeCastingPattern)
        try:
            self.state = 1414
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1412
                self.isPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1413
                self.asPattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IsPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_isPattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterIsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitIsPattern(self)




    def isPattern(self):

        localctx = SwiftParser.IsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_isPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.match(SwiftParser.T__66)
            self.state = 1417
            self.sType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(SwiftParser.PatternContext,0)


        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_asPattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAsPattern(self)




    def asPattern(self):

        localctx = SwiftParser.AsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_asPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.pattern(0)
            self.state = 1420
            self.match(SwiftParser.T__67)
            self.state = 1421
            self.sType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_expressionPattern

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExpressionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExpressionPattern(self)




    def expressionPattern(self):

        localctx = SwiftParser.ExpressionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_expressionPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeName(self):
            return self.getTypedRuleContext(SwiftParser.AttributeNameContext,0)


        def attributeArgumentClause(self):
            return self.getTypedRuleContext(SwiftParser.AttributeArgumentClauseContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = SwiftParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(SwiftParser.T__68)
            self.state = 1426
            self.attributeName()
            self.state = 1428
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1427
                self.attributeArgumentClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_attributeName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAttributeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAttributeName(self)




    def attributeName(self):

        localctx = SwiftParser.AttributeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_attributeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeArgumentClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedTokens(self):
            return self.getTypedRuleContext(SwiftParser.BalancedTokensContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_attributeArgumentClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAttributeArgumentClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAttributeArgumentClause(self)




    def attributeArgumentClause(self):

        localctx = SwiftParser.AttributeArgumentClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_attributeArgumentClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.match(SwiftParser.T__2)
            self.state = 1434
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                self.state = 1433
                self.balancedTokens()


            self.state = 1436
            self.match(SwiftParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.AttributeContext)
            else:
                return self.getTypedRuleContext(SwiftParser.AttributeContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = SwiftParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1438
                self.attribute()
                self.state = 1441 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SwiftParser.T__68):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedTokensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedToken(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.BalancedTokenContext)
            else:
                return self.getTypedRuleContext(SwiftParser.BalancedTokenContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_balancedTokens

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterBalancedTokens(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitBalancedTokens(self)




    def balancedTokens(self):

        localctx = SwiftParser.BalancedTokensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_balancedTokens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1443
                self.balancedToken()
                self.state = 1446 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedTokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedTokens(self):
            return self.getTypedRuleContext(SwiftParser.BalancedTokensContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def contextSensitiveKeyword(self):
            return self.getTypedRuleContext(SwiftParser.ContextSensitiveKeywordContext,0)


        def literal(self):
            return self.getTypedRuleContext(SwiftParser.LiteralContext,0)


        def operator(self):
            return self.getTypedRuleContext(SwiftParser.OperatorContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_balancedToken

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterBalancedToken(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitBalancedToken(self)




    def balancedToken(self):

        localctx = SwiftParser.BalancedTokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_balancedToken)
        self._la = 0 # Token type
        try:
            self.state = 1468
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1448
                self.match(SwiftParser.T__2)
                self.state = 1450
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 1449
                    self.balancedTokens()


                self.state = 1452
                self.match(SwiftParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(SwiftParser.T__69)
                self.state = 1455
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 1454
                    self.balancedTokens()


                self.state = 1457
                self.match(SwiftParser.T__70)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1458
                self.match(SwiftParser.T__10)
                self.state = 1460
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                    self.state = 1459
                    self.balancedTokens()


                self.state = 1462
                self.match(SwiftParser.T__11)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1463
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1464
                self.expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1465
                self.contextSensitiveKeyword()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1466
                self.literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1467
                self.operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SwiftParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SwiftParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.expression()
            self.state = 1475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SwiftParser.T__14:
                self.state = 1471
                self.match(SwiftParser.T__14)
                self.state = 1472
                self.expression()
                self.state = 1477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PrefixExpressionContext,0)


        def binaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.BinaryExpressionContext)
            else:
                return self.getTypedRuleContext(SwiftParser.BinaryExpressionContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SwiftParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.prefixExpression()
            self.state = 1482
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1479
                    self.binaryExpression() 
                self.state = 1484
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)


        def prefixOperator(self):
            return self.getTypedRuleContext(SwiftParser.PrefixOperatorContext,0)


        def inOutExpression(self):
            return self.getTypedRuleContext(SwiftParser.InOutExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_prefixExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPrefixExpression(self)




    def prefixExpression(self):

        localctx = SwiftParser.PrefixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_prefixExpression)
        self._la = 0 # Token type
        try:
            self.state = 1493
            token = self._input.LA(1)
            if token in [SwiftParser.T__2, SwiftParser.T__10, SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__51, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65, SwiftParser.T__69, SwiftParser.T__73, SwiftParser.T__74, SwiftParser.T__75, SwiftParser.T__76, SwiftParser.T__77, SwiftParser.T__78, SwiftParser.Operator, SwiftParser.Identifier, SwiftParser.BinaryLiteral, SwiftParser.OctalLiteral, SwiftParser.DecimalLiteral, SwiftParser.HexadecimalLiteral, SwiftParser.FloatingPointLiteral, SwiftParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1486
                _la = self._input.LA(1)
                if _la==SwiftParser.Operator:
                    self.state = 1485
                    self.prefixOperator()


                self.state = 1488
                self.postfixExpression(0)
                self.state = 1490
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1489
                    self.match(SwiftParser.T__0)



            elif token in [SwiftParser.T__71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1492
                self.inOutExpression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InOutExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_inOutExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInOutExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInOutExpression(self)




    def inOutExpression(self):

        localctx = SwiftParser.InOutExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_inOutExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.match(SwiftParser.T__71)
            self.state = 1496
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOperator(self):
            return self.getTypedRuleContext(SwiftParser.BinaryOperatorContext,0)


        def prefixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PrefixExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(SwiftParser.AssignmentOperatorContext,0)


        def conditionalOperator(self):
            return self.getTypedRuleContext(SwiftParser.ConditionalOperatorContext,0)


        def typeCastingOperator(self):
            return self.getTypedRuleContext(SwiftParser.TypeCastingOperatorContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_binaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterBinaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitBinaryExpression(self)




    def binaryExpression(self):

        localctx = SwiftParser.BinaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_binaryExpression)
        try:
            self.state = 1508
            token = self._input.LA(1)
            if token in [SwiftParser.Operator]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1498
                self.binaryOperator()
                self.state = 1499
                self.prefixExpression()

            elif token in [SwiftParser.T__42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1501
                self.assignmentOperator()
                self.state = 1502
                self.prefixExpression()

            elif token in [SwiftParser.T__72]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1504
                self.conditionalOperator()
                self.state = 1505
                self.prefixExpression()

            elif token in [SwiftParser.T__66, SwiftParser.T__67]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1507
                self.typeCastingOperator()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = SwiftParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_assignmentOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(SwiftParser.T__42)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_conditionalOperator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterConditionalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitConditionalOperator(self)




    def conditionalOperator(self):

        localctx = SwiftParser.ConditionalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_conditionalOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(SwiftParser.T__72)
            self.state = 1513
            self.expression()
            self.state = 1514
            self.match(SwiftParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeCastingOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typeCastingOperator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypeCastingOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypeCastingOperator(self)




    def typeCastingOperator(self):

        localctx = SwiftParser.TypeCastingOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_typeCastingOperator)
        try:
            self.state = 1523
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1516
                self.match(SwiftParser.T__66)
                self.state = 1517
                self.sType(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1518
                self.match(SwiftParser.T__67)
                self.state = 1519
                self.match(SwiftParser.T__72)
                self.state = 1520
                self.sType(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1521
                self.match(SwiftParser.T__67)
                self.state = 1522
                self.sType(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def genericArgumentClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericArgumentClauseContext,0)


        def literalExpression(self):
            return self.getTypedRuleContext(SwiftParser.LiteralExpressionContext,0)


        def selfExpression(self):
            return self.getTypedRuleContext(SwiftParser.SelfExpressionContext,0)


        def superclassExpression(self):
            return self.getTypedRuleContext(SwiftParser.SuperclassExpressionContext,0)


        def closureExpression(self):
            return self.getTypedRuleContext(SwiftParser.ClosureExpressionContext,0)


        def parenthesizedExpression(self):
            return self.getTypedRuleContext(SwiftParser.ParenthesizedExpressionContext,0)


        def wildcardExpression(self):
            return self.getTypedRuleContext(SwiftParser.WildcardExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SwiftParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_primaryExpression)
        try:
            self.state = 1535
            token = self._input.LA(1)
            if token in [SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65, SwiftParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.identifier()
                self.state = 1527
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1526
                    self.genericArgumentClause()



            elif token in [SwiftParser.T__69, SwiftParser.T__73, SwiftParser.T__74, SwiftParser.T__75, SwiftParser.T__76, SwiftParser.BinaryLiteral, SwiftParser.OctalLiteral, SwiftParser.DecimalLiteral, SwiftParser.HexadecimalLiteral, SwiftParser.FloatingPointLiteral, SwiftParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                self.literalExpression()

            elif token in [SwiftParser.T__77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1530
                self.selfExpression()

            elif token in [SwiftParser.T__78]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1531
                self.superclassExpression()

            elif token in [SwiftParser.T__10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1532
                self.closureExpression()

            elif token in [SwiftParser.T__2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1533
                self.parenthesizedExpression()

            elif token in [SwiftParser.T__51]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1534
                self.wildcardExpression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(SwiftParser.LiteralContext,0)


        def arrayLiteral(self):
            return self.getTypedRuleContext(SwiftParser.ArrayLiteralContext,0)


        def dictionaryLiteral(self):
            return self.getTypedRuleContext(SwiftParser.DictionaryLiteralContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_literalExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitLiteralExpression(self)




    def literalExpression(self):

        localctx = SwiftParser.LiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_literalExpression)
        try:
            self.state = 1544
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1537
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self.arrayLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1539
                self.dictionaryLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1540
                self.match(SwiftParser.T__73)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1541
                self.match(SwiftParser.T__74)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1542
                self.match(SwiftParser.T__75)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1543
                self.match(SwiftParser.T__76)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteralItems(self):
            return self.getTypedRuleContext(SwiftParser.ArrayLiteralItemsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitArrayLiteral(self)




    def arrayLiteral(self):

        localctx = SwiftParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.match(SwiftParser.T__69)
            self.state = 1548
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                self.state = 1547
                self.arrayLiteralItems()


            self.state = 1550
            self.match(SwiftParser.T__70)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayLiteralItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteralItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.ArrayLiteralItemContext)
            else:
                return self.getTypedRuleContext(SwiftParser.ArrayLiteralItemContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_arrayLiteralItems

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterArrayLiteralItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitArrayLiteralItems(self)




    def arrayLiteralItems(self):

        localctx = SwiftParser.ArrayLiteralItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_arrayLiteralItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.arrayLiteralItem()
            self.state = 1557
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1553
                    self.match(SwiftParser.T__14)
                    self.state = 1554
                    self.arrayLiteralItem() 
                self.state = 1559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

            self.state = 1561
            _la = self._input.LA(1)
            if _la==SwiftParser.T__14:
                self.state = 1560
                self.match(SwiftParser.T__14)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayLiteralItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_arrayLiteralItem

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterArrayLiteralItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitArrayLiteralItem(self)




    def arrayLiteralItem(self):

        localctx = SwiftParser.ArrayLiteralItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_arrayLiteralItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictionaryLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryLiteralItems(self):
            return self.getTypedRuleContext(SwiftParser.DictionaryLiteralItemsContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_dictionaryLiteral

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDictionaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDictionaryLiteral(self)




    def dictionaryLiteral(self):

        localctx = SwiftParser.DictionaryLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_dictionaryLiteral)
        try:
            self.state = 1572
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.match(SwiftParser.T__69)
                self.state = 1566
                self.dictionaryLiteralItems()
                self.state = 1567
                self.match(SwiftParser.T__70)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.match(SwiftParser.T__69)
                self.state = 1570
                self.match(SwiftParser.T__13)
                self.state = 1571
                self.match(SwiftParser.T__70)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictionaryLiteralItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryLiteralItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.DictionaryLiteralItemContext)
            else:
                return self.getTypedRuleContext(SwiftParser.DictionaryLiteralItemContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_dictionaryLiteralItems

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDictionaryLiteralItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDictionaryLiteralItems(self)




    def dictionaryLiteralItems(self):

        localctx = SwiftParser.DictionaryLiteralItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_dictionaryLiteralItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self.dictionaryLiteralItem()
            self.state = 1579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1575
                    self.match(SwiftParser.T__14)
                    self.state = 1576
                    self.dictionaryLiteralItem() 
                self.state = 1581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

            self.state = 1583
            _la = self._input.LA(1)
            if _la==SwiftParser.T__14:
                self.state = 1582
                self.match(SwiftParser.T__14)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictionaryLiteralItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SwiftParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_dictionaryLiteralItem

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDictionaryLiteralItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDictionaryLiteralItem(self)




    def dictionaryLiteralItem(self):

        localctx = SwiftParser.DictionaryLiteralItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_dictionaryLiteralItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.expression()
            self.state = 1586
            self.match(SwiftParser.T__13)
            self.state = 1587
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelfExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_selfExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSelfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSelfExpression(self)




    def selfExpression(self):

        localctx = SwiftParser.SelfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_selfExpression)
        try:
            self.state = 1601
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.match(SwiftParser.T__77)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1590
                self.match(SwiftParser.T__77)
                self.state = 1591
                self.match(SwiftParser.T__40)
                self.state = 1592
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1593
                self.match(SwiftParser.T__77)
                self.state = 1594
                self.match(SwiftParser.T__69)
                self.state = 1595
                self.expression()
                self.state = 1596
                self.match(SwiftParser.T__70)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1598
                self.match(SwiftParser.T__77)
                self.state = 1599
                self.match(SwiftParser.T__40)
                self.state = 1600
                self.match(SwiftParser.T__53)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperclassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def superclassMethodExpression(self):
            return self.getTypedRuleContext(SwiftParser.SuperclassMethodExpressionContext,0)


        def superclassSubscriptExpression(self):
            return self.getTypedRuleContext(SwiftParser.SuperclassSubscriptExpressionContext,0)


        def superclassInitializerExpression(self):
            return self.getTypedRuleContext(SwiftParser.SuperclassInitializerExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_superclassExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSuperclassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSuperclassExpression(self)




    def superclassExpression(self):

        localctx = SwiftParser.SuperclassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_superclassExpression)
        try:
            self.state = 1606
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1603
                self.superclassMethodExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1604
                self.superclassSubscriptExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1605
                self.superclassInitializerExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperclassMethodExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_superclassMethodExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSuperclassMethodExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSuperclassMethodExpression(self)




    def superclassMethodExpression(self):

        localctx = SwiftParser.SuperclassMethodExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_superclassMethodExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(SwiftParser.T__78)
            self.state = 1609
            self.match(SwiftParser.T__40)
            self.state = 1610
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperclassSubscriptExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_superclassSubscriptExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSuperclassSubscriptExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSuperclassSubscriptExpression(self)




    def superclassSubscriptExpression(self):

        localctx = SwiftParser.SuperclassSubscriptExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_superclassSubscriptExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self.match(SwiftParser.T__78)
            self.state = 1613
            self.match(SwiftParser.T__69)
            self.state = 1614
            self.expression()
            self.state = 1615
            self.match(SwiftParser.T__70)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperclassInitializerExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_superclassInitializerExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSuperclassInitializerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSuperclassInitializerExpression(self)




    def superclassInitializerExpression(self):

        localctx = SwiftParser.SuperclassInitializerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_superclassInitializerExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(SwiftParser.T__78)
            self.state = 1618
            self.match(SwiftParser.T__40)
            self.state = 1619
            self.match(SwiftParser.T__53)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosureExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(SwiftParser.StatementsContext,0)


        def closureSignature(self):
            return self.getTypedRuleContext(SwiftParser.ClosureSignatureContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_closureExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterClosureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitClosureExpression(self)




    def closureExpression(self):

        localctx = SwiftParser.ClosureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_closureExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(SwiftParser.T__10)
            self.state = 1623
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1622
                self.closureSignature()


            self.state = 1625
            self.statements()
            self.state = 1626
            self.match(SwiftParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosureSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterClause(self):
            return self.getTypedRuleContext(SwiftParser.ParameterClauseContext,0)


        def functionResult(self):
            return self.getTypedRuleContext(SwiftParser.FunctionResultContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierListContext,0)


        def captureList(self):
            return self.getTypedRuleContext(SwiftParser.CaptureListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_closureSignature

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterClosureSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitClosureSignature(self)




    def closureSignature(self):

        localctx = SwiftParser.ClosureSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_closureSignature)
        self._la = 0 # Token type
        try:
            self.state = 1657
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1628
                self.parameterClause()
                self.state = 1630
                _la = self._input.LA(1)
                if _la==SwiftParser.T__47:
                    self.state = 1629
                    self.functionResult()


                self.state = 1632
                self.match(SwiftParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1634
                self.identifierList()
                self.state = 1636
                _la = self._input.LA(1)
                if _la==SwiftParser.T__47:
                    self.state = 1635
                    self.functionResult()


                self.state = 1638
                self.match(SwiftParser.T__4)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1640
                self.captureList()
                self.state = 1641
                self.parameterClause()
                self.state = 1643
                _la = self._input.LA(1)
                if _la==SwiftParser.T__47:
                    self.state = 1642
                    self.functionResult()


                self.state = 1645
                self.match(SwiftParser.T__4)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1647
                self.captureList()
                self.state = 1648
                self.identifierList()
                self.state = 1650
                _la = self._input.LA(1)
                if _la==SwiftParser.T__47:
                    self.state = 1649
                    self.functionResult()


                self.state = 1652
                self.match(SwiftParser.T__4)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1654
                self.captureList()
                self.state = 1655
                self.match(SwiftParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaptureListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def captureSpecifier(self):
            return self.getTypedRuleContext(SwiftParser.CaptureSpecifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_captureList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterCaptureList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitCaptureList(self)




    def captureList(self):

        localctx = SwiftParser.CaptureListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_captureList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.match(SwiftParser.T__69)
            self.state = 1660
            self.captureSpecifier()
            self.state = 1661
            self.expression()
            self.state = 1662
            self.match(SwiftParser.T__70)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaptureSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_captureSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterCaptureSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitCaptureSpecifier(self)




    def captureSpecifier(self):

        localctx = SwiftParser.CaptureSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_captureSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicitMemberExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_implicitMemberExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterImplicitMemberExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitImplicitMemberExpression(self)




    def implicitMemberExpression(self):

        localctx = SwiftParser.ImplicitMemberExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_implicitMemberExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(SwiftParser.T__40)
            self.state = 1667
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesizedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionElementList(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionElementListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitParenthesizedExpression(self)




    def parenthesizedExpression(self):

        localctx = SwiftParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_parenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.match(SwiftParser.T__2)
            self.state = 1671
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__10) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__51) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__69 - 64)) | (1 << (SwiftParser.T__71 - 64)) | (1 << (SwiftParser.T__73 - 64)) | (1 << (SwiftParser.T__74 - 64)) | (1 << (SwiftParser.T__75 - 64)) | (1 << (SwiftParser.T__76 - 64)) | (1 << (SwiftParser.T__77 - 64)) | (1 << (SwiftParser.T__78 - 64)) | (1 << (SwiftParser.Operator - 64)) | (1 << (SwiftParser.Identifier - 64)) | (1 << (SwiftParser.BinaryLiteral - 64)) | (1 << (SwiftParser.OctalLiteral - 64)) | (1 << (SwiftParser.DecimalLiteral - 64)) | (1 << (SwiftParser.HexadecimalLiteral - 64)) | (1 << (SwiftParser.FloatingPointLiteral - 64)) | (1 << (SwiftParser.StringLiteral - 64)))) != 0):
                self.state = 1670
                self.expressionElementList()


            self.state = 1673
            self.match(SwiftParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionElementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionElement(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionElementContext,0)


        def expressionElementList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.ExpressionElementListContext)
            else:
                return self.getTypedRuleContext(SwiftParser.ExpressionElementListContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_expressionElementList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExpressionElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExpressionElementList(self)




    def expressionElementList(self):

        localctx = SwiftParser.ExpressionElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_expressionElementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.expressionElement()
            self.state = 1680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1676
                    self.match(SwiftParser.T__14)
                    self.state = 1677
                    self.expressionElementList() 
                self.state = 1682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_expressionElement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExpressionElement(self)




    def expressionElement(self):

        localctx = SwiftParser.ExpressionElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_expressionElement)
        try:
            self.state = 1688
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1683
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1684
                self.identifier()
                self.state = 1685
                self.match(SwiftParser.T__13)
                self.state = 1686
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WildcardExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_wildcardExpression

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterWildcardExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitWildcardExpression(self)




    def wildcardExpression(self):

        localctx = SwiftParser.WildcardExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_wildcardExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(SwiftParser.T__51)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_postfixExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExplicitMemberExpression1Context(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)

        def DecimalLiteral(self):
            return self.getToken(SwiftParser.DecimalLiteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExplicitMemberExpression1(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExplicitMemberExpression1(self)


    class DynamicTypeExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterDynamicTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitDynamicTypeExpression(self)


    class PostfixOperationContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)

        def postfixOperator(self):
            return self.getTypedRuleContext(SwiftParser.PostfixOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPostfixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPostfixOperation(self)


    class FunctionCallWithClosureExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)

        def closureExpression(self):
            return self.getTypedRuleContext(SwiftParser.ClosureExpressionContext,0)

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(SwiftParser.ParenthesizedExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionCallWithClosureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionCallWithClosureExpression(self)


    class InitializerExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterInitializerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitInitializerExpression(self)


    class SubscriptExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)

        def expressionList(self):
            return self.getTypedRuleContext(SwiftParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSubscriptExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSubscriptExpression(self)


    class ForcedValueExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterForcedValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitForcedValueExpression(self)


    class ExplicitMemberExpression2Context(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)

        def genericArgumentClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericArgumentClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterExplicitMemberExpression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitExplicitMemberExpression2(self)


    class FunctionCallExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(SwiftParser.ParenthesizedExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterFunctionCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitFunctionCallExpression(self)


    class PostfixSelfExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPostfixSelfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPostfixSelfExpression(self)


    class PrimaryContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SwiftParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPrimary(self)


    class OptionalChainingExpressionContext(PostfixExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SwiftParser.PostfixExpressionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExpression(self):
            return self.getTypedRuleContext(SwiftParser.PostfixExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterOptionalChainingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitOptionalChainingExpression(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SwiftParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 366
        self.enterRecursionRule(localctx, 366, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SwiftParser.PrimaryContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1693
            self.primaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1731
                    la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                    if la_ == 1:
                        localctx = SwiftParser.PostfixOperationContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1695
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1696
                        self.postfixOperator()
                        pass

                    elif la_ == 2:
                        localctx = SwiftParser.FunctionCallExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1697
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1698
                        self.parenthesizedExpression()
                        pass

                    elif la_ == 3:
                        localctx = SwiftParser.FunctionCallWithClosureExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1699
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1701
                        _la = self._input.LA(1)
                        if _la==SwiftParser.T__2:
                            self.state = 1700
                            self.parenthesizedExpression()


                        self.state = 1703
                        self.closureExpression()
                        pass

                    elif la_ == 4:
                        localctx = SwiftParser.InitializerExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1704
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1705
                        self.match(SwiftParser.T__40)
                        self.state = 1706
                        self.match(SwiftParser.T__53)
                        pass

                    elif la_ == 5:
                        localctx = SwiftParser.ExplicitMemberExpression1Context(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1707
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1708
                        self.match(SwiftParser.T__40)
                        self.state = 1709
                        self.match(SwiftParser.DecimalLiteral)
                        pass

                    elif la_ == 6:
                        localctx = SwiftParser.ExplicitMemberExpression2Context(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1710
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1711
                        self.match(SwiftParser.T__40)
                        self.state = 1712
                        self.identifier()
                        self.state = 1714
                        la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                        if la_ == 1:
                            self.state = 1713
                            self.genericArgumentClause()


                        pass

                    elif la_ == 7:
                        localctx = SwiftParser.PostfixSelfExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1716
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1717
                        self.match(SwiftParser.T__40)
                        self.state = 1718
                        self.match(SwiftParser.T__77)
                        pass

                    elif la_ == 8:
                        localctx = SwiftParser.DynamicTypeExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1719
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1720
                        self.match(SwiftParser.T__40)
                        self.state = 1721
                        self.match(SwiftParser.T__79)
                        pass

                    elif la_ == 9:
                        localctx = SwiftParser.SubscriptExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1722
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1723
                        self.match(SwiftParser.T__69)
                        self.state = 1724
                        self.expressionList()
                        self.state = 1725
                        self.match(SwiftParser.T__70)
                        pass

                    elif la_ == 10:
                        localctx = SwiftParser.ForcedValueExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1727
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1728
                        self.match(SwiftParser.T__80)
                        pass

                    elif la_ == 11:
                        localctx = SwiftParser.OptionalChainingExpressionContext(self, SwiftParser.PostfixExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 1729
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1730
                        self.match(SwiftParser.T__72)
                        pass

             
                self.state = 1735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class OperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(SwiftParser.Operator, 0)

        def getRuleIndex(self):
            return SwiftParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitOperator(self)




    def operator(self):

        localctx = SwiftParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.match(SwiftParser.Operator)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(SwiftParser.OperatorContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_binaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterBinaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitBinaryOperator(self)




    def binaryOperator(self):

        localctx = SwiftParser.BinaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_binaryOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(SwiftParser.OperatorContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = SwiftParser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_prefixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(SwiftParser.OperatorContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_postfixOperator

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterPostfixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitPostfixOperator(self)




    def postfixOperator(self):

        localctx = SwiftParser.PostfixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_postfixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class STypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,0)


        def tupleType(self):
            return self.getTypedRuleContext(SwiftParser.TupleTypeContext,0)


        def protocolCompositionType(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolCompositionTypeContext,0)


        def sType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.STypeContext)
            else:
                return self.getTypedRuleContext(SwiftParser.STypeContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_sType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterSType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitSType(self)



    def sType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SwiftParser.STypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 376
        self.enterRecursionRule(localctx, 376, self.RULE_sType, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            token = self._input.LA(1)
            if token in [SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65, SwiftParser.Identifier]:
                self.state = 1745
                self.typeIdentifier()

            elif token in [SwiftParser.T__2]:
                self.state = 1746
                self.tupleType()

            elif token in [SwiftParser.T__37]:
                self.state = 1747
                self.protocolCompositionType()

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1766
                    la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                    if la_ == 1:
                        localctx = SwiftParser.STypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_sType)
                        self.state = 1750
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1751
                        self.match(SwiftParser.T__47)
                        self.state = 1752
                        self.sType(9)
                        pass

                    elif la_ == 2:
                        localctx = SwiftParser.STypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_sType)
                        self.state = 1753
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1754
                        self.match(SwiftParser.T__69)
                        self.state = 1755
                        self.match(SwiftParser.T__70)
                        pass

                    elif la_ == 3:
                        localctx = SwiftParser.STypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_sType)
                        self.state = 1756
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1757
                        self.match(SwiftParser.T__72)
                        pass

                    elif la_ == 4:
                        localctx = SwiftParser.STypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_sType)
                        self.state = 1758
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1759
                        self.match(SwiftParser.T__80)
                        pass

                    elif la_ == 5:
                        localctx = SwiftParser.STypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_sType)
                        self.state = 1760
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1761
                        self.match(SwiftParser.T__40)
                        self.state = 1762
                        self.match(SwiftParser.T__81)
                        pass

                    elif la_ == 6:
                        localctx = SwiftParser.STypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_sType)
                        self.state = 1763
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1764
                        self.match(SwiftParser.T__40)
                        self.state = 1765
                        self.match(SwiftParser.T__82)
                        pass

             
                self.state = 1770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypeAnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typeAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypeAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypeAnnotation(self)




    def typeAnnotation(self):

        localctx = SwiftParser.TypeAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_typeAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.match(SwiftParser.T__13)
            self.state = 1773
            _la = self._input.LA(1)
            if _la==SwiftParser.T__68:
                self.state = 1772
                self.attributes()


            self.state = 1775
            self.sType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SwiftParser.TypeNameContext,0)


        def genericArgumentClause(self):
            return self.getTypedRuleContext(SwiftParser.GenericArgumentClauseContext,0)


        def typeIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypeIdentifier(self)




    def typeIdentifier(self):

        localctx = SwiftParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1788
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1777
                self.typeName()
                self.state = 1779
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1778
                    self.genericArgumentClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1781
                self.typeName()
                self.state = 1783
                _la = self._input.LA(1)
                if _la==SwiftParser.T__21:
                    self.state = 1782
                    self.genericArgumentClause()


                self.state = 1785
                self.match(SwiftParser.T__40)
                self.state = 1786
                self.typeIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = SwiftParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleTypeBody(self):
            return self.getTypedRuleContext(SwiftParser.TupleTypeBodyContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_tupleType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTupleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTupleType(self)




    def tupleType(self):

        localctx = SwiftParser.TupleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_tupleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.match(SwiftParser.T__2)
            self.state = 1794
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__2) | (1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__37) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.T__68 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                self.state = 1793
                self.tupleTypeBody()


            self.state = 1796
            self.match(SwiftParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleTypeBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleTypeElementList(self):
            return self.getTypedRuleContext(SwiftParser.TupleTypeElementListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_tupleTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTupleTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTupleTypeBody(self)




    def tupleTypeBody(self):

        localctx = SwiftParser.TupleTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_tupleTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.tupleTypeElementList()
            self.state = 1800
            _la = self._input.LA(1)
            if _la==SwiftParser.T__48:
                self.state = 1799
                self.match(SwiftParser.T__48)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleTypeElementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleTypeElement(self):
            return self.getTypedRuleContext(SwiftParser.TupleTypeElementContext,0)


        def tupleTypeElementList(self):
            return self.getTypedRuleContext(SwiftParser.TupleTypeElementListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_tupleTypeElementList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTupleTypeElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTupleTypeElementList(self)




    def tupleTypeElementList(self):

        localctx = SwiftParser.TupleTypeElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_tupleTypeElementList)
        try:
            self.state = 1807
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1802
                self.tupleTypeElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1803
                self.tupleTypeElement()
                self.state = 1804
                self.match(SwiftParser.T__14)
                self.state = 1805
                self.tupleTypeElementList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleTypeElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(SwiftParser.AttributesContext,0)


        def elementName(self):
            return self.getTypedRuleContext(SwiftParser.ElementNameContext,0)


        def typeAnnotation(self):
            return self.getTypedRuleContext(SwiftParser.TypeAnnotationContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_tupleTypeElement

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTupleTypeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTupleTypeElement(self)




    def tupleTypeElement(self):

        localctx = SwiftParser.TupleTypeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_tupleTypeElement)
        self._la = 0 # Token type
        try:
            self.state = 1822
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1810
                _la = self._input.LA(1)
                if _la==SwiftParser.T__68:
                    self.state = 1809
                    self.attributes()


                self.state = 1813
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1812
                    self.match(SwiftParser.T__49)


                self.state = 1815
                self.sType(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1817
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1816
                    self.match(SwiftParser.T__49)


                self.state = 1819
                self.elementName()
                self.state = 1820
                self.typeAnnotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_elementName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterElementName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitElementName(self)




    def elementName(self):

        localctx = SwiftParser.ElementNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_elementName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolCompositionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolIdentifierList(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolIdentifierListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolCompositionType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolCompositionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolCompositionType(self)




    def protocolCompositionType(self):

        localctx = SwiftParser.ProtocolCompositionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_protocolCompositionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(SwiftParser.T__37)
            self.state = 1827
            self.match(SwiftParser.T__21)
            self.state = 1829
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__25) | (1 << SwiftParser.T__26) | (1 << SwiftParser.T__27) | (1 << SwiftParser.T__29) | (1 << SwiftParser.T__30) | (1 << SwiftParser.T__31) | (1 << SwiftParser.T__32) | (1 << SwiftParser.T__43) | (1 << SwiftParser.T__44) | (1 << SwiftParser.T__45) | (1 << SwiftParser.T__46) | (1 << SwiftParser.T__49) | (1 << SwiftParser.T__57) | (1 << SwiftParser.T__58) | (1 << SwiftParser.T__59) | (1 << SwiftParser.T__60) | (1 << SwiftParser.T__61) | (1 << SwiftParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SwiftParser.T__63 - 64)) | (1 << (SwiftParser.T__64 - 64)) | (1 << (SwiftParser.T__65 - 64)) | (1 << (SwiftParser.Identifier - 64)))) != 0):
                self.state = 1828
                self.protocolIdentifierList()


            self.state = 1831
            self.match(SwiftParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def protocolIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolIdentifierContext,0)


        def protocolIdentifierList(self):
            return self.getTypedRuleContext(SwiftParser.ProtocolIdentifierListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolIdentifierList(self)




    def protocolIdentifierList(self):

        localctx = SwiftParser.ProtocolIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_protocolIdentifierList)
        try:
            self.state = 1838
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.protocolIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.protocolIdentifier()
                self.state = 1835
                self.match(SwiftParser.T__14)
                self.state = 1836
                self.protocolIdentifierList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProtocolIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_protocolIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterProtocolIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitProtocolIdentifier(self)




    def protocolIdentifier(self):

        localctx = SwiftParser.ProtocolIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_protocolIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.typeIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetatypeTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sType(self):
            return self.getTypedRuleContext(SwiftParser.STypeContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_metatypeType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterMetatypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitMetatypeType(self)




    def metatypeType(self):

        localctx = SwiftParser.MetatypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_metatypeType)
        try:
            self.state = 1850
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1842
                self.sType(0)
                self.state = 1843
                self.match(SwiftParser.T__40)
                self.state = 1844
                self.match(SwiftParser.T__81)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                self.sType(0)
                self.state = 1847
                self.match(SwiftParser.T__40)
                self.state = 1848
                self.match(SwiftParser.T__82)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeInheritanceClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeInheritanceList(self):
            return self.getTypedRuleContext(SwiftParser.TypeInheritanceListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_typeInheritanceClause

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypeInheritanceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypeInheritanceClause(self)




    def typeInheritanceClause(self):

        localctx = SwiftParser.TypeInheritanceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_typeInheritanceClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.match(SwiftParser.T__13)
            self.state = 1853
            self.typeInheritanceList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeInheritanceListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SwiftParser.TypeIdentifierContext)
            else:
                return self.getTypedRuleContext(SwiftParser.TypeIdentifierContext,i)


        def getRuleIndex(self):
            return SwiftParser.RULE_typeInheritanceList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterTypeInheritanceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitTypeInheritanceList(self)




    def typeInheritanceList(self):

        localctx = SwiftParser.TypeInheritanceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_typeInheritanceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.typeIdentifier()
            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SwiftParser.T__14:
                self.state = 1856
                self.match(SwiftParser.T__14)
                self.state = 1857
                self.typeIdentifier()
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SwiftParser.Identifier, 0)

        def contextSensitiveKeyword(self):
            return self.getTypedRuleContext(SwiftParser.ContextSensitiveKeywordContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SwiftParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_identifier)
        try:
            self.state = 1865
            token = self._input.LA(1)
            if token in [SwiftParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.match(SwiftParser.Identifier)

            elif token in [SwiftParser.T__25, SwiftParser.T__26, SwiftParser.T__27, SwiftParser.T__29, SwiftParser.T__30, SwiftParser.T__31, SwiftParser.T__32, SwiftParser.T__43, SwiftParser.T__44, SwiftParser.T__45, SwiftParser.T__46, SwiftParser.T__49, SwiftParser.T__57, SwiftParser.T__58, SwiftParser.T__59, SwiftParser.T__60, SwiftParser.T__61, SwiftParser.T__62, SwiftParser.T__63, SwiftParser.T__64, SwiftParser.T__65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.contextSensitiveKeyword()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SwiftParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SwiftParser.T__1) | (1 << SwiftParser.T__4) | (1 << SwiftParser.T__5) | (1 << SwiftParser.T__6) | (1 << SwiftParser.T__7) | (1 << SwiftParser.T__8) | (1 << SwiftParser.T__9) | (1 << SwiftParser.T__12) | (1 << SwiftParser.T__15) | (1 << SwiftParser.T__16) | (1 << SwiftParser.T__17) | (1 << SwiftParser.T__18) | (1 << SwiftParser.T__19) | (1 << SwiftParser.T__20) | (1 << SwiftParser.T__24) | (1 << SwiftParser.T__28) | (1 << SwiftParser.T__33) | (1 << SwiftParser.T__34) | (1 << SwiftParser.T__35) | (1 << SwiftParser.T__36) | (1 << SwiftParser.T__37) | (1 << SwiftParser.T__38) | (1 << SwiftParser.T__39) | (1 << SwiftParser.T__41) | (1 << SwiftParser.T__52) | (1 << SwiftParser.T__53) | (1 << SwiftParser.T__54) | (1 << SwiftParser.T__55) | (1 << SwiftParser.T__56))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (SwiftParser.T__66 - 67)) | (1 << (SwiftParser.T__67 - 67)) | (1 << (SwiftParser.T__77 - 67)) | (1 << (SwiftParser.T__78 - 67)) | (1 << (SwiftParser.T__79 - 67)) | (1 << (SwiftParser.T__81 - 67)) | (1 << (SwiftParser.T__83 - 67)) | (1 << (SwiftParser.T__84 - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContextSensitiveKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SwiftParser.RULE_contextSensitiveKeyword

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterContextSensitiveKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitContextSensitiveKeyword(self)




    def contextSensitiveKeyword(self):

        localctx = SwiftParser.ContextSensitiveKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_contextSensitiveKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            _la = self._input.LA(1)
            if not(((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (SwiftParser.T__25 - 26)) | (1 << (SwiftParser.T__26 - 26)) | (1 << (SwiftParser.T__27 - 26)) | (1 << (SwiftParser.T__29 - 26)) | (1 << (SwiftParser.T__30 - 26)) | (1 << (SwiftParser.T__31 - 26)) | (1 << (SwiftParser.T__32 - 26)) | (1 << (SwiftParser.T__43 - 26)) | (1 << (SwiftParser.T__44 - 26)) | (1 << (SwiftParser.T__45 - 26)) | (1 << (SwiftParser.T__46 - 26)) | (1 << (SwiftParser.T__49 - 26)) | (1 << (SwiftParser.T__57 - 26)) | (1 << (SwiftParser.T__58 - 26)) | (1 << (SwiftParser.T__59 - 26)) | (1 << (SwiftParser.T__60 - 26)) | (1 << (SwiftParser.T__61 - 26)) | (1 << (SwiftParser.T__62 - 26)) | (1 << (SwiftParser.T__63 - 26)) | (1 << (SwiftParser.T__64 - 26)) | (1 << (SwiftParser.T__65 - 26)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SwiftParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SwiftParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SwiftParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_identifierList)
        try:
            self.state = 1876
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1872
                self.identifier()
                self.state = 1873
                self.match(SwiftParser.T__14)
                self.state = 1874
                self.identifierList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(SwiftParser.IntegerLiteralContext,0)


        def FloatingPointLiteral(self):
            return self.getToken(SwiftParser.FloatingPointLiteral, 0)

        def StringLiteral(self):
            return self.getToken(SwiftParser.StringLiteral, 0)

        def getRuleIndex(self):
            return SwiftParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = SwiftParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_literal)
        try:
            self.state = 1881
            token = self._input.LA(1)
            if token in [SwiftParser.BinaryLiteral, SwiftParser.OctalLiteral, SwiftParser.DecimalLiteral, SwiftParser.HexadecimalLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1878
                self.integerLiteral()

            elif token in [SwiftParser.FloatingPointLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1879
                self.match(SwiftParser.FloatingPointLiteral)

            elif token in [SwiftParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1880
                self.match(SwiftParser.StringLiteral)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BinaryLiteral(self):
            return self.getToken(SwiftParser.BinaryLiteral, 0)

        def OctalLiteral(self):
            return self.getToken(SwiftParser.OctalLiteral, 0)

        def DecimalLiteral(self):
            return self.getToken(SwiftParser.DecimalLiteral, 0)

        def HexadecimalLiteral(self):
            return self.getToken(SwiftParser.HexadecimalLiteral, 0)

        def getRuleIndex(self):
            return SwiftParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, SwiftListener ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = SwiftParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            _la = self._input.LA(1)
            if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (SwiftParser.BinaryLiteral - 92)) | (1 << (SwiftParser.OctalLiteral - 92)) | (1 << (SwiftParser.DecimalLiteral - 92)) | (1 << (SwiftParser.HexadecimalLiteral - 92)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[135] = self.pattern_sempred
        self._predicates[183] = self.postfixExpression_sempred
        self._predicates[188] = self.sType_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def pattern_sempred(self, localctx:PatternContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def sType_sempred(self, localctx:STypeContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         



