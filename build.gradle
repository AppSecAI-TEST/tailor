apply plugin: 'java'

// Add ANTLR output as sourceSet
sourceSets {
    gen {
        java {
            srcDir file('src/gen/java')
        }
    }
}

// Display useful test events and output on the console
test {
    testLogging {
        events "skipped", "failed", "standardOut", "standardError"
    }
}

compileJava {
    // Enable compilation in a separate daemon process
    options.fork = true
    // Enable incremental compilation
    options.incremental = true
}

// Ensure main JAR includes ANTLR output
jar {
    from sourceSets.gen.output
}

// Ensure ANTLR output is generated before compilation
compileGenJava.dependsOn 'generateGrammarSource'

// Generate ANTLR output based on Swift grammar
apply plugin: 'antlr'

generateGrammarSource {
    arguments += ['-package', 'com.sleekbyte.tailor.antlr']
    outputDirectory = file('src/gen/java/com/sleekbyte/tailor/antlr')
}

// Ensure ANTLR output is deleted via clean
clean {
    delete file('src/gen')
}

// Add run task
apply plugin: 'application'

mainClassName = 'com.sleekbyte.tailor.Tailor'

// Allow arguments: `gradle run -Pargs="args"`
run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

// Use [Checkstyle](http://checkstyle.sourceforge.net) Plugin
apply plugin: 'checkstyle'

checkstyle {
    configFile = file('config/checkstyle/google_checks.xml')
    toolVersion = "6.7"
    // Exclude generated code from Checkstyle checks
    sourceSets -= sourceSets.gen
}

checkstyleTest.configFile = file('config/checkstyle/google_test_checks.xml')

// Use [FindBugs](http://findbugs.sourceforge.net/) Plugin
apply plugin: 'findbugs'

findbugs {
    // Exclude generated code from FindBugs checks
    sourceSets -= sourceSets.gen
}

tasks.withType(FindBugs) {
    reports {
        // Use HTML reports instead of XML
        xml.enabled = false
        html.enabled = true
    }
}

// Use [PMD](http://pmd.sourceforge.net/) Plugin
apply plugin: 'pmd'

pmd {
    // Exclude generated code from PMD checks
    sourceSets -= sourceSets.gen
    // Disable default ruleSets
    ruleSets = []
    // Use custom ruleSet file
    ruleSetFiles = files('config/pmd/tailorRuleSet.xml')
}

tasks.withType(Pmd) {
    reports {
        // Use HTML reports instead of XML
        xml.enabled = false
        html.enabled = true
    }
}

repositories {
    jcenter()
}

dependencies {
    antlr 'org.antlr:antlr4:4.5'
    genCompile 'org.antlr:antlr4-runtime:4.5'
    // Ensure ANTLR output is compiled before main sourceSet
    compile sourceSets.gen.output
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.antlr:antlr4-runtime:4.5'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-core:1.+'
}
